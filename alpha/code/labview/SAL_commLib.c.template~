/* commLib.c 	08/30/1999	NOAO */

/* 
 *  Developed 1998 by the National Optical Astronomy Observatories(*)
 *
 * (*) Operated by the Association of Universities for Research in
 *    Astronomy, Inc. (AURA) under cooperative agreement with the
 *    National Science Foundation.
 */

/*
 *  modification history
 *  --------------------
 *  01b 30aug99, rcr - Created.
 *  02a 05dec02, gsh - shared library for LabVIEW
 *  03a 11feb04, gsh - Multiple ports version
 *  03b 11feb04, gsh - Multithreaded version
 *  04a 30mar04, gsh - Modified for FIFO useage (rev8)
 *  05a 25may07, gsh - Modified to use DDS. Renamed as D_commLib.c
 *  06a 18nov08, djm - Create SAL version, Renamed SAL_commLib.c
 */

/*------------------------------------------------------------------
 * SAL_commLib.c
 *
 *-----------------------------------------------------------------*/

#include <stdio.h>
#include <stdlib.h>
#include <sys/time.h>
#include <sys/times.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/select.h>
#include <unistd.h>
#include <sys/ioctl.h>
#include <termios.h>
#include <fcntl.h>
#include <errno.h>
#include <mqueue.h>
#include <math.h>
#include <assert.h>
#include <time.h>
#include <string.h>
#include "SAL_commLib.h" 

extern int errno;

/*----------------------------------------------------------------------
 *	Local Variables
 *---------------------------------------------------------------------*/

static serial_st LV_serial[3];	/* ports structures		*/

/*----------------------------------------------------------------------
 *	Local Function Prototypes
 *---------------------------------------------------------------------*/
 
void serial_read(serial_st *pack);	/* threaded read	*/
void serial_write(serial_st *pack);	/* threaded write	*/

/*------------------------------------------------------------------
 * comm_open_port - open channel port.
 *
 * Attempt to open channel port in variable ttys. The function returns 0
 * when no problem is encountered, otherwise < 0.
 *
 *
 *	In the SAL version, there is only one logical port
 *	implemented with shared memory:
 * 
 *----------------------------------------------------------------*/
int comm_open_port (int np, char *subsystem)
{
	pthread_t new_thread;
	pthread_attr_t attr;  
        int status;
        svcSAL_cachehandle *handle=NULL;
		
        status = svcSAL_connect1 (subsystem, handle);
        if ( status == 0 ) {
           return -1;
        }
	
        LV_serial[np].shm_ptr = (svcSAL_cachehandle *)handle->ref;
	strcpy(LV_serial[np].streamname,subsystem);

			/* generate the threads	*/
			
	pthread_attr_init(&attr);
	pthread_create(&new_thread, &attr, (void *) &serial_read,
		       &LV_serial[np]);
	LV_serial[np].thread_read = new_thread;
	pthread_attr_init(&attr);
	pthread_create(&new_thread, &attr, (void *) &serial_write,
		       &LV_serial[np]);
	LV_serial[np].thread_write = new_thread;
	
  	return (0);
}

/*------------------------------------------------------------------
 * comm_send_msg - send a string through the serial port.
 *
 * This function sends the given string through the serial port along
 * with a newline character '\r'.
 *
 *  	MODIFIED FOR FIFO LOGIC
 *
 *	The FIFO protocol sends the length of the message as 4 bytes,
 *	followed by the actual message
 *
 *	The SAL version writes to a shared memory segment
 *
 *------------------------------------------------------------------*/
int comm_send_msg (svcSAL_tlmhdr_cache *outBuf)
{
        if ( outBuf->syncO ) {
           return (-1);
        }
   	return(0);
}

/*------------------------------------------------------------------
 * comm_get_msg - get a string from the serial port.
 *
 * This function reads a newline terminated string from the serial port.
 *
 *	MODIFIED FOR FIFO LOGIC
 *
 *	The FIFO protocol reads the length of the message as 4 bytes,
 *	and then reads the message.
 *
 *	The DDS version issues an POSIX receive
 *
 *------------------------------------------------------------------*/
int comm_get_msg (svcSAL_tlmhdr_cache *inBuf)
{

        if ( inBuf->syncI == 0 ) {
           return (-1);
        }
   	return(0);
}

/***********************************************************************/

/*
	Serial read threaded task.
	Wait on select, then read the port, put data in the
	structure and trigger the occurrence.
*/
void serial_read(serial_st *pack)
{
	Occurrence occ;
	int wait;
	
	occ = pack->occ_read;

	sem_init(&(pack->sem_read), 0, 0);
	wait = 1;
	while(1)
	{
		if (wait)
		{
			sem_wait(&(pack->sem_read));
			wait = 0;
		}

		if (comm_get_msg(pack->shm_ptr) < 0)
			pack->er.status = LVTRUE;
		else
			pack->er.status = LVFALSE;
		Occur(occ);
		wait = 1;
	}
	pack->er.status = LVTRUE;
	Occur(occ);
	sem_destroy(&(pack->sem_read));
}

/*
	Serial write threaded task.
	Wait on a semaphore, take data from structure, write to port,
	and trigger the occurrence.
*/
void serial_write(serial_st *pack)
{
	Occurrence occ;
	
	occ = pack->occ_write;
	sem_init(&(pack->sem_write), 0, 0);
	while(1)
	{	
		sem_wait(&(pack->sem_write));
		if (comm_send_msg(pack->shm_ptr) < 0)
			pack->ew.status = LVTRUE;
		else
			pack->ew.status = LVFALSE;
		Occur(occ);
	}
	sem_destroy(&(pack->sem_write));
}
		

/*----------------------------------------------------------------------
*
*	Wrappers for LabVIEW
*
*---------------------------------------------------------------------*/

int LVcomm_init(void *occArray)
{				/* labVIEW initializes the occurrences */
				/* in a global style II array	       */
	int i; 
	int *occ_array;
	
	occ_array = *((int **) occArray);
	for (i = 1; i < 3; i++)
	{
		LV_serial[i].occ_read = (Occurrence) occ_array[2*i+1];
		LV_serial[i].occ_write = (Occurrence) occ_array[2*i+2];
		LV_serial[i].er.status = LVFALSE;
		LV_serial[i].er.code = 0;
		LV_serial[i].ew.status = LVFALSE;
		LV_serial[i].ew.code = 0;
	}
	
	return(0);
}

/*
	Open the connection to shared memory and send the 
	name of the datastream.
*/

int LVcomm_open_SAL(int fd, LStrHandle buf_streamname)
{
	int lenp, err; 
	char streamname[128];

        svcSAL_initialize();
        lenp = LStrLen(*buf_streamname);
	memcpy(streamname, *(char **) buf_streamname+4, lenp);
	streamname[lenp] = '\0';
	err = comm_open_port(fd, streamname);
	if (err < 0) return(-5);

  	return (0);
}

###INSERT readwrite


