/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : TaskManager.sm
 */


//
// The contents of this file are subject to the Mozilla Public
// License Version 1.1 (the "License"); you may not use this file
// except in compliance with the License. You may obtain a copy of
// the License at http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS
// IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
// implied. See the License for the specific language governing
// rights and limitations under the License.
// 
// The Original Code is State Machine Compiler (SMC).
// 
// The Initial Developer of the Original Code is Charles W. Rapp.
// Portions created by Charles W. Rapp are
// Copyright (C) 2000 - 2003 Charles W. Rapp.
// All Rights Reserved.
// 
// Contributor(s): 
//
// State Machine
//  TaskManager
//
// Description
//  The task manager is responsible for executing tasks. This
//  state machine tracks whether the manager has any tasks to run
//  and how long a task is executed.
//
// RCS ID
// $Id: TaskManager.sm,v 1.6 2009/11/25 22:30:18 cwrapp Exp $
//
// CHANGE LOG
// $Log: TaskManager.sm,v $
// Revision 1.6  2009/11/25 22:30:18  cwrapp
// Fixed problem between %fsmclass and sm file names.
//
// Revision 1.5  2005/05/28 13:51:24  cwrapp
// Update Java examples 1 - 7.
//
// Revision 1.1  2005/01/16 17:45:43  charlesr
// Added Default transition to IdleShutdown state.
//
// Revision 1.0  2003/12/14 20:14:34  charlesr
// Initial revision
//


package smc_ex5;


public class TaskManagerFSM
    extends statemap.FSMContext
{
//---------------------------------------------------------------
// Member methods.
//

    public TaskManagerFSM(TaskManager owner)
    {
        this (owner, MainMap.Idle);
    }

    public TaskManagerFSM(TaskManager owner, TaskManagerState initState)
    {
        super (initState);

        _owner = owner;
    }

    @Override
    public void enterStartState()
    {
        getState().entry(this);
        return;
    }

    public void ReplyTimeout()
    {
        _transition = "ReplyTimeout";
        getState().ReplyTimeout(this);
        _transition = "";
        return;
    }

    public void RunTask()
    {
        _transition = "RunTask";
        getState().RunTask(this);
        _transition = "";
        return;
    }

    public void Shutdown()
    {
        _transition = "Shutdown";
        getState().Shutdown(this);
        _transition = "";
        return;
    }

    public void ShutdownTimeout()
    {
        _transition = "ShutdownTimeout";
        getState().ShutdownTimeout(this);
        _transition = "";
        return;
    }

    public void SliceTimeout()
    {
        _transition = "SliceTimeout";
        getState().SliceTimeout(this);
        _transition = "";
        return;
    }

    public void TaskBlocked()
    {
        _transition = "TaskBlocked";
        getState().TaskBlocked(this);
        _transition = "";
        return;
    }

    public void TaskCreated()
    {
        _transition = "TaskCreated";
        getState().TaskCreated(this);
        _transition = "";
        return;
    }

    public void TaskDeleted()
    {
        _transition = "TaskDeleted";
        getState().TaskDeleted(this);
        _transition = "";
        return;
    }

    public void TaskDone()
    {
        _transition = "TaskDone";
        getState().TaskDone(this);
        _transition = "";
        return;
    }

    public void TaskStopped()
    {
        _transition = "TaskStopped";
        getState().TaskStopped(this);
        _transition = "";
        return;
    }

    public void TaskSuspended()
    {
        _transition = "TaskSuspended";
        getState().TaskSuspended(this);
        _transition = "";
        return;
    }

    public void TaskUnblocked()
    {
        _transition = "TaskUnblocked";
        getState().TaskUnblocked(this);
        _transition = "";
        return;
    }

    public TaskManagerState getState()
        throws statemap.StateUndefinedException
    {
        if (_state == null)
        {
            throw(
                new statemap.StateUndefinedException());
        }

        return ((TaskManagerState) _state);
    }

    protected TaskManager getOwner()
    {
        return (_owner);
    }

    public void setOwner(TaskManager owner)
    {
        if (owner == null)
        {
            throw (
                new NullPointerException(
                    "null owner"));
        }
        else
        {
            _owner = owner;
        }

        return;
    }

//---------------------------------------------------------------
// Member data.
//

    transient private TaskManager _owner;

    //-----------------------------------------------------------
    // Constants.
    //

    private static final long serialVersionUID = 1L;

//---------------------------------------------------------------
// Inner classes.
//

    public static abstract class TaskManagerState
        extends statemap.State
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected TaskManagerState(String name, int id)
        {
            super (name, id);
        }

        protected void entry(TaskManagerFSM context) {}
        protected void exit(TaskManagerFSM context) {}

        protected void ReplyTimeout(TaskManagerFSM context)
        {
            Default(context);
        }

        protected void RunTask(TaskManagerFSM context)
        {
            Default(context);
        }

        protected void Shutdown(TaskManagerFSM context)
        {
            Default(context);
        }

        protected void ShutdownTimeout(TaskManagerFSM context)
        {
            Default(context);
        }

        protected void SliceTimeout(TaskManagerFSM context)
        {
            Default(context);
        }

        protected void TaskBlocked(TaskManagerFSM context)
        {
            Default(context);
        }

        protected void TaskCreated(TaskManagerFSM context)
        {
            Default(context);
        }

        protected void TaskDeleted(TaskManagerFSM context)
        {
            Default(context);
        }

        protected void TaskDone(TaskManagerFSM context)
        {
            Default(context);
        }

        protected void TaskStopped(TaskManagerFSM context)
        {
            Default(context);
        }

        protected void TaskSuspended(TaskManagerFSM context)
        {
            Default(context);
        }

        protected void TaskUnblocked(TaskManagerFSM context)
        {
            Default(context);
        }

        protected void Default(TaskManagerFSM context)
        {
            throw (
                new statemap.TransitionUndefinedException(
                    "State: " +
                    context.getState().getName() +
                    ", Transition: " +
                    context.getTransition()));
        }

    //-----------------------------------------------------------
    // Member data.
    //
    }

    /* package */ static abstract class MainMap
    {
    //-----------------------------------------------------------
    // Member methods.
    //

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
        // Constants.
        //

        public static final MainMap_Idle Idle =
            new MainMap_Idle("MainMap.Idle", 0);
        public static final MainMap_RunningTask RunningTask =
            new MainMap_RunningTask("MainMap.RunningTask", 1);
        public static final MainMap_SuspendingTask SuspendingTask =
            new MainMap_SuspendingTask("MainMap.SuspendingTask", 2);
        public static final MainMap_ShuttingDown ShuttingDown =
            new MainMap_ShuttingDown("MainMap.ShuttingDown", 3);
        public static final MainMap_IdleShutdown IdleShutdown =
            new MainMap_IdleShutdown("MainMap.IdleShutdown", 4);
        public static final MainMap_ShutdownComplete ShutdownComplete =
            new MainMap_ShutdownComplete("MainMap.ShutdownComplete", 5);
    }

    protected static class MainMap_Default
        extends TaskManagerState
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected MainMap_Default(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void Shutdown(TaskManagerFSM context)
        {
            TaskManager ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.sendMessage(0, "Shutdown started. Stopping all tasks.");
                ctxt.stopAllTimers();
                ctxt.stopAllTasks();
                ctxt.setTimer("ShutdownTimeout", 5000);
            }
            finally
            {
                context.setState(MainMap.ShuttingDown);
                (context.getState()).entry(context);
            }

            return;
        }

        @Override
        protected void TaskCreated(TaskManagerFSM context)
        {

            return;
        }

        @Override
        protected void TaskUnblocked(TaskManagerFSM context)
        {

            return;
        }

    //-----------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class MainMap_Idle
        extends MainMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private MainMap_Idle(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(TaskManagerFSM context)
            {
                TaskManager ctxt = context.getOwner();

            ctxt.sendMessage(4, "Idle. Looking for a task to run.");
            ctxt.checkTaskQueue();
            return;
        }

        @Override
        protected void RunTask(TaskManagerFSM context)
        {
            TaskManager ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.startTask();
            }
            finally
            {
                context.setState(MainMap.RunningTask);
                (context.getState()).entry(context);
            }

            return;
        }

        @Override
        protected void Shutdown(TaskManagerFSM context)
        {
            TaskManager ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.sendMessage(0, "Shutdown started.");
                ctxt.setTimer("ShutdownTimeout", 2000);
            }
            finally
            {
                context.setState(MainMap.IdleShutdown);
                (context.getState()).entry(context);
            }

            return;
        }

        @Override
        protected void TaskCreated(TaskManagerFSM context)
        {
            TaskManager ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.startTask();
            }
            finally
            {
                context.setState(MainMap.RunningTask);
                (context.getState()).entry(context);
            }

            return;
        }

        @Override
        protected void TaskDone(TaskManagerFSM context)
        {
            TaskManager ctxt = context.getOwner();

            if (ctxt.getRunnableTaskCount() > 0)
            {
                (context.getState()).exit(context);
                context.clearState();
                try
                {
                    ctxt.startTask();
                }
                finally
                {
                    context.setState(MainMap.RunningTask);
                    (context.getState()).entry(context);
                }

            }
            else
            {
                TaskManagerState endState = context.getState();
                context.clearState();
                try
                {
                    ctxt.stopTimer("ReplyTimeout");
                }
                finally
                {
                    context.setState(endState);
                }

            }

            return;
        }

        @Override
        protected void TaskUnblocked(TaskManagerFSM context)
        {
            TaskManager ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.startTask();
            }
            finally
            {
                context.setState(MainMap.RunningTask);
                (context.getState()).entry(context);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class MainMap_RunningTask
        extends MainMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private MainMap_RunningTask(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(TaskManagerFSM context)
            {
                TaskManager ctxt = context.getOwner();

            ctxt.setTimer("Slice Timeout", 3000);
            return;
        }

        @Override
        protected void exit(TaskManagerFSM context)
            {
            TaskManager ctxt = context.getOwner();

            ctxt.stopTimer("Slice Timeout");
            return;
        }

        @Override
        protected void SliceTimeout(TaskManagerFSM context)
        {
            TaskManager ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.suspendTask();
            }
            finally
            {
                context.setState(MainMap.SuspendingTask);
                (context.getState()).entry(context);
            }

            return;
        }

        @Override
        protected void TaskBlocked(TaskManagerFSM context)
        {

            (context.getState()).exit(context);
            context.setState(MainMap.Idle);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void TaskDeleted(TaskManagerFSM context)
        {

            (context.getState()).exit(context);
            context.setState(MainMap.Idle);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void TaskDone(TaskManagerFSM context)
        {

            (context.getState()).exit(context);
            context.setState(MainMap.Idle);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void TaskSuspended(TaskManagerFSM context)
        {

            (context.getState()).exit(context);
            context.setState(MainMap.Idle);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class MainMap_SuspendingTask
        extends MainMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private MainMap_SuspendingTask(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void entry(TaskManagerFSM context)
            {
                TaskManager ctxt = context.getOwner();

            ctxt.setTimer("Reply Timeout", 500);
            return;
        }

        @Override
        protected void exit(TaskManagerFSM context)
            {
            TaskManager ctxt = context.getOwner();

            ctxt.stopTimer("Reply Timeout");
            return;
        }

        @Override
        protected void ReplyTimeout(TaskManagerFSM context)
        {

            (context.getState()).exit(context);
            context.setState(MainMap.Idle);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void TaskDone(TaskManagerFSM context)
        {

            (context.getState()).exit(context);
            context.setState(MainMap.Idle);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void TaskSuspended(TaskManagerFSM context)
        {

            (context.getState()).exit(context);
            context.setState(MainMap.Idle);
            (context.getState()).entry(context);
            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class MainMap_ShuttingDown
        extends MainMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private MainMap_ShuttingDown(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void Shutdown(TaskManagerFSM context)
        {

            return;
        }

        @Override
        protected void ShutdownTimeout(TaskManagerFSM context)
        {
            TaskManager ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.sendMessage(0, "Timed out waiting for tasks to stop. Forcibly deleting tasks and exiting.");
                ctxt.deleteAllTasks();
                ctxt.exitApplication();
            }
            finally
            {
                context.setState(MainMap.ShutdownComplete);
                (context.getState()).entry(context);
            }

            return;
        }

        @Override
        protected void TaskStopped(TaskManagerFSM context)
        {
            TaskManager ctxt = context.getOwner();

            if (ctxt.getRunningTask() == null &&
       ctxt.getRunnableTaskCount() == 0 &&
       ctxt.getBlockedTaskCount() == 0)
            {
                (context.getState()).exit(context);
                context.clearState();
                try
                {
                    ctxt.stopTimer("ShutdownTimeout");
                    ctxt.sendMessage(0, "Shutdown completed.");
                    ctxt.exitApplication();
                }
                finally
                {
                    context.setState(MainMap.ShutdownComplete);
                    (context.getState()).entry(context);
                }

            }
            else
            {
            }

            return;
        }

        @Override
        protected void TaskSuspended(TaskManagerFSM context)
        {

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class MainMap_IdleShutdown
        extends MainMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private MainMap_IdleShutdown(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void Default(TaskManagerFSM context)
        {

            return;
        }

        @Override
        protected void ShutdownTimeout(TaskManagerFSM context)
        {
            TaskManager ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.sendMessage(0, "Shutdown completed.");
                ctxt.exitApplication();
            }
            finally
            {
                context.setState(MainMap.ShutdownComplete);
                (context.getState()).entry(context);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class MainMap_ShutdownComplete
        extends MainMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private MainMap_ShutdownComplete(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void Default(TaskManagerFSM context)
        {

            return;
        }

        @Override
        protected void Shutdown(TaskManagerFSM context)
        {

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
