#!/usr/bin/tclsh

#
# Command line tool for SAL code/document/etc generation.
#

if { $argc == 0 } {
   puts stdout "SAL generator tool - Usage :

	salgenerator match*.idl flag(s)

   where flag(s) may be

		validate - check the IDL
		c++      - generate c++ code
		java     - generate JNI interface
		tcl      - generate tcl interface
		html     - generate web form interfaces

		db       - generate telemetry database table

                    Arguments required are
 
		    db start-time end-time interval

                    where the times are formatted like \"2008-11-12 16:20:01\"
                    and the interval is in seconds

		sim      - generate simulation configuration
		icd      - generate ICD document
		verbose  - be more verbose ;-)
"
  exit
}

set ORIGIN_DIR [pwd]
set SAL_DIR $env(SAL_DIR)
source $SAL_DIR/versioning.tcl
source $SAL_DIR/utilities.tcl

set SUBSYSTEMS [lindex $argv 0]
set SAL_WORK_DIR [file dirname $SUBSYSTEMS]
if { [file exists $SAL_WORK_DIR] == 0 } {
   errorexit "Working directory $SAL_WORK_DIR does not exist"
}

cd $SAL_WORK_DIR
set SAL_WORK_DIR [file normalize .]

catch {exec mkdir saltemptest} ok
if { [file exists saltemptest] == 0 } {
   errorexit "Working directory $SAL_WORK_DIR does not have write permission"
}

exec rmdir saltemptest
exec mkdir -p .salwork

set TARGETS [lsort [glob [file tail $SUBSYSTEMS].idl]]
if { $TARGETS == "" } {
   errorexit "No matching Interface Definition files match $SUBSYSTEMS"
}


foreach o "validate code c++ java tcl -debug -testcode db icd html sim verbose" {
  set OPTIONS($o) 0
  if { [lsearch [string tolower $argv] $o] > -1 } {
     set OPTIONS($o) 1
  }
}

if { $OPTIONS(validate) } {
  exec mkdir -p idl-templates/validated
  source $SAL_DIR/checkidl.tcl
  exec cp $TARGETS $SAL_WORK_DIR/idl-templates/.
  cd $SAL_WORK_DIR/idl-templates
  foreach subsys $TARGETS {
      stdlog "Validating $subsys interface definition"
      checkidl $subsys
      stdlog "Completed $subsys validation\n\n"
  }
  cd $SAL_WORK_DIR
}

if { $OPTIONS(html) } {
   cd $SAL_WORK_DIR
   source $SAL_DIR/updatedetails.tcl
   source $SAL_DIR/genidlshmem.tcl
   exec mkdir -p $SAL_WORK_DIR/sql
   set sqlf [glob *.sqldef *.sqlwrt]
   foreach f $sqlf { exec mv $f $SAL_WORK_DIR/sql/. }
   stdlog "Generating telemetry stream definition editor html"
   exec mkdir -p $SAL_WORK_DIR/html
   cd $SAL_WORK_DIR/html
   source $SAL_DIR/genhtml.tcl
   stdlog "Generating Facility database table creation html"
   source $SAL_DIR/gendbhtml.tcl
   cd $SAL_WORK_DIR
   stdlog "Generating Subsystem simulation control html"
   source $SAL_DIR/gensimhtml.tcl
}

if { $OPTIONS(c++) } {
  cd $SAL_WORK_DIR
  exec mkdir -p ./include/gen
  source $SAL_DIR/gensimdcode.tcl
  foreach subsys $TARGETS {
     set topic [file rootname $subsys]
     exec mkdir -p ./ospl-$topic
     exec cp $SAL_WORK_DIR/idl-templates/validated/[file tail $subsys] ./ospl-$topic/.
     stdlog "Generating SAL low-level code for $topic"
     catch { set result [gensimdcode $topic] } bad
     if { [file exists ./ospl-$topic/[set topic]-sub] == 0 } {
        errorexit "SAL low-level generation failed : \n $bad"
     }
     if { $OPTIONS(verbose) } {stdlog $result}
  }
}

if { $OPTIONS(tcl) } {
  cd $SAL_WORK_DIR
  foreach subsys $TARGETS {
     stdlog "Generating Tcl for $topic"
     set topic [file rootname $subsys]
     exec mkdir -p ./ospl-$topic
     catch { set result [exec $SAL_DIR/genshmem-tcl.tcl $topic $SAL_WORK_DIR] } bad
#     if { $bad } {
#        errorexit "Tcl interface generation failed : \n $bad"
#     }
     if { $OPTIONS(verbose) } {stdlog $result}
  }
}

if { $OPTIONS(java) } {
  source $SAL_DIR/genjnicode.tcl
  foreach subsys $TARGETS {
     set topic [file rootname $subsys]
     stdlog "Generating DDS java code for $topic"
     catch { set result [exec $DDSGEN -S -d ./ospl-$topic -l java $topic.idl] } bad
     if { $bad } {
        errorexit "DDS java generation failed : \n $bad"
     }
     stdlog "Generating SAL JNI code for $topic"
     catch { set result [genjnicode $topic] } bad
     if { $bad } {
        errorexit "SAL JNI generation failed : \n $bad"
     }
     if { $OPTIONS(verbose) } {stdlog $result}
  }
}


if { $OPTIONS(db) } {
  source $SAL_DIR/simulatedb.tcl
  set k [lsearch $argv db]
  set dbstart [lindex $argv [expr $k+1]]
  set dbend   [lindex $argv [expr $k+2]]
  set dbfreq  [lindex $argv [expr $k+3]]
  stdlog "Facility database table parameters : "
  stdlog "   Start time = $dbstart"
  stdlog "   End time   = $dbend"
  stdlog "   Interval   = $dbfreq"
  foreach subsys $TARGETS {
     set topic [file rootname $subsys]
     stdlog "Generating simulated facility database table for $topic"
     set fout [open $SAL_WORK_DIR/sql/$topic-[join $dbstart -]_to_[join $dbend -].sql w]
     simulateperiod $fout $topic $dbstart $dbend $dbfreq
     close $fout
     stdlog "   data in $SAL_WORK_DIR/sql/$topic-[join $dbstart -]_to_[join $dbend -].sql"
  }
}


if { $OPTIONS(sim) } {
   stdlog "Not yet implemented  - use VM web interface"
}


if { $OPTIONS(icd) } {
   stdlog "Not yet implemented  - use VM web interface"
}




