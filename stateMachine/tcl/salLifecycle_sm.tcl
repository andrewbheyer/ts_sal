# ex: set ro:
# DO NOT EDIT.
# generated by smc (http://smc.sourceforge.net/)
# from file : salLifecycle.sm


class salLifecycleContext {
    inherit ::statemap::FSMContext;

# Member functions.

    constructor {owner} {
        ::statemap::FSMContext::constructor ${MainMap::Off};
    } {
        set _owner $owner;
    }

    public method configureError {} {
        [getState] configureError $this;
        return -code ok;
    }

    public method disableError {} {
        [getState] disableError $this;
        return -code ok;
    }

    public method enableError {} {
        [getState] enableError $this;
        return -code ok;
    }

    public method ocsAbandon {} {
        [getState] ocsAbandon $this;
        return -code ok;
    }

    public method ocsAbort {} {
        [getState] ocsAbort $this;
        return -code ok;
    }

    public method ocsBoot {} {
        [getState] ocsBoot $this;
        return -code ok;
    }

    public method ocsConfigure {} {
        [getState] ocsConfigure $this;
        return -code ok;
    }

    public method ocsDisable {} {
        [getState] ocsDisable $this;
        return -code ok;
    }

    public method ocsEnable {} {
        [getState] ocsEnable $this;
        return -code ok;
    }

    public method ocsQuit {} {
        [getState] ocsQuit $this;
        return -code ok;
    }

    public method ocsReset {} {
        [getState] ocsReset $this;
        return -code ok;
    }

    public method ocsSetValue {} {
        [getState] ocsSetValue $this;
        return -code ok;
    }

    public method ocsStop {} {
        [getState] ocsStop $this;
        return -code ok;
    }

    public method ocsUnConfigure {} {
        [getState] ocsUnConfigure $this;
        return -code ok;
    }

    public method getOwner {} {
        return -code ok $_owner;
    }

# Member data.

    private variable _owner;
}

class salLifecycleState {
    inherit ::statemap::State;

# Member functions.

    constructor {name id} {
        ::statemap::State::constructor $name $id;
    } {}

    public method Entry {context} {};
    public method Exit {context} {};

    public method configureError {context} {
        Default $context;
        return -code ok;
    }

    public method disableError {context} {
        Default $context;
        return -code ok;
    }

    public method enableError {context} {
        Default $context;
        return -code ok;
    }

    public method ocsAbandon {context} {
        Default $context;
        return -code ok;
    }

    public method ocsAbort {context} {
        Default $context;
        return -code ok;
    }

    public method ocsBoot {context} {
        Default $context;
        return -code ok;
    }

    public method ocsConfigure {context} {
        Default $context;
        return -code ok;
    }

    public method ocsDisable {context} {
        Default $context;
        return -code ok;
    }

    public method ocsEnable {context} {
        Default $context;
        return -code ok;
    }

    public method ocsQuit {context} {
        Default $context;
        return -code ok;
    }

    public method ocsReset {context} {
        Default $context;
        return -code ok;
    }

    public method ocsSetValue {context} {
        Default $context;
        return -code ok;
    }

    public method ocsStop {context} {
        Default $context;
        return -code ok;
    }

    public method ocsUnConfigure {context} {
        Default $context;
        return -code ok;
    }

    public method Default {context} {
        set transition [$context getTransition];
        return -code error "Transition \"$transition\" fell through to a non-existent default definition.";
    }
}

class MainMap {
# Member data.

    public common Off "";
    public common STANDBY "";
    public common CONFIGURING "";
    public common DISABLED "";
    public common ENABLED "";
    public common ERROR "";
}

class MainMap_Default {
    inherit salLifecycleState;

# Member functions.

    constructor {name id} {
       salLifecycleState::constructor $name $id;
    } {}
}

class MainMap_Off {
    inherit MainMap_Default;

    constructor {name id} {
        MainMap_Default::constructor $name $id;
    } {}

    public method ocsBoot {context} {
        set ctxt [$context getOwner];

        [$context getState] Exit $context;
        $context clearState;
        if [catch {
            $ctxt boot ;
        } result] {
            $context setState ${MainMap::STANDBY};
            error $result;
        } else {
            $context setState ${MainMap::STANDBY};
        }
        [$context getState] Entry $context;

        return -code ok;
    }
}

class MainMap_STANDBY {
    inherit MainMap_Default;

    constructor {name id} {
        MainMap_Default::constructor $name $id;
    } {}

    public method ocsConfigure {context} {
        set ctxt [$context getOwner];

        [$context getState] Exit $context;
        $context clearState;
        if [catch {
            $ctxt configureAck ;
        } result] {
            $context setState ${MainMap::CONFIGURING};
            error $result;
        } else {
            $context setState ${MainMap::CONFIGURING};
        }
        [$context getState] Entry $context;

        return -code ok;
    }

    public method ocsQuit {context} {
        set ctxt [$context getOwner];

        [$context getState] Exit $context;
        $context clearState;
        if [catch {
            $ctxt quit ;
        } result] {
            $context setState ${MainMap::Off};
            error $result;
        } else {
            $context setState ${MainMap::Off};
        }
        [$context getState] Entry $context;

        return -code ok;
    }
}

class MainMap_CONFIGURING {
    inherit MainMap_Default;

    constructor {name id} {
        MainMap_Default::constructor $name $id;
    } {}

    public method configureError {context} {
        set ctxt [$context getOwner];

        [$context getState] Exit $context;
        $context clearState;
        if [catch {
            $ctxt configureFailed ;
        } result] {
            $context setState ${MainMap::ERROR};
            error $result;
        } else {
            $context setState ${MainMap::ERROR};
        }
        [$context getState] Entry $context;

        return -code ok;
    }

    public method ocsAbandon {context} {
        set ctxt [$context getOwner];

        [$context getState] Exit $context;
        $context clearState;
        if [catch {
            $ctxt abandon ;
        } result] {
            $context setState ${MainMap::STANDBY};
            error $result;
        } else {
            $context setState ${MainMap::STANDBY};
        }
        [$context getState] Entry $context;

        return -code ok;
    }

    public method ocsConfigure {context} {
        set ctxt [$context getOwner];

        [$context getState] Exit $context;
        $context clearState;
        if [catch {
            $ctxt configureDone ;
        } result] {
            $context setState ${MainMap::DISABLED};
            error $result;
        } else {
            $context setState ${MainMap::DISABLED};
        }
        [$context getState] Entry $context;

        return -code ok;
    }
}

class MainMap_DISABLED {
    inherit MainMap_Default;

    constructor {name id} {
        MainMap_Default::constructor $name $id;
    } {}

    public method disableError {context} {
        set ctxt [$context getOwner];

        [$context getState] Exit $context;
        $context clearState;
        if [catch {
            $ctxt disableFailed ;
        } result] {
            $context setState ${MainMap::ERROR};
            error $result;
        } else {
            $context setState ${MainMap::ERROR};
        }
        [$context getState] Entry $context;

        return -code ok;
    }

    public method ocsEnable {context} {
        set ctxt [$context getOwner];

        [$context getState] Exit $context;
        $context clearState;
        if [catch {
            $ctxt enableAck ;
        } result] {
            $context setState ${MainMap::ENABLED};
            error $result;
        } else {
            $context setState ${MainMap::ENABLED};
        }
        [$context getState] Entry $context;

        return -code ok;
    }

    public method ocsUnConfigure {context} {
        set ctxt [$context getOwner];

        [$context getState] Exit $context;
        $context clearState;
        if [catch {
            $ctxt unConfigureAck ;
        } result] {
            $context setState ${MainMap::STANDBY};
            error $result;
        } else {
            $context setState ${MainMap::STANDBY};
        }
        [$context getState] Entry $context;

        return -code ok;
    }
}

class MainMap_ENABLED {
    inherit MainMap_Default;

    constructor {name id} {
        MainMap_Default::constructor $name $id;
    } {}

    public method enableError {context} {
        set ctxt [$context getOwner];

        [$context getState] Exit $context;
        $context clearState;
        if [catch {
            $ctxt enableFailed ;
        } result] {
            $context setState ${MainMap::ERROR};
            error $result;
        } else {
            $context setState ${MainMap::ERROR};
        }
        [$context getState] Entry $context;

        return -code ok;
    }

    public method ocsAbort {context} {
        set ctxt [$context getOwner];

        [$context getState] Exit $context;
        $context clearState;
        if [catch {
            $ctxt enableFailed ;
        } result] {
            $context setState ${MainMap::ERROR};
            error $result;
        } else {
            $context setState ${MainMap::ERROR};
        }
        [$context getState] Entry $context;

        return -code ok;
    }

    public method ocsDisable {context} {
        set ctxt [$context getOwner];

        [$context getState] Exit $context;
        $context clearState;
        if [catch {
            $ctxt disableDone ;
        } result] {
            $context setState ${MainMap::DISABLED};
            error $result;
        } else {
            $context setState ${MainMap::DISABLED};
        }
        [$context getState] Entry $context;

        return -code ok;
    }

    public method ocsEnable {context} {
        set ctxt [$context getOwner];

        [$context getState] Exit $context;
        $context clearState;
        if [catch {
            $ctxt enableDone ;
        } result] {
            $context setState ${MainMap::ENABLED};
            error $result;
        } else {
            $context setState ${MainMap::ENABLED};
        }
        [$context getState] Entry $context;

        return -code ok;
    }

    public method ocsSetValue {context} {
        set ctxt [$context getOwner];

        [$context getState] Exit $context;
        $context clearState;
        if [catch {
            $ctxt setValue par val;
        } result] {
            $context setState ${MainMap::ENABLED};
            error $result;
        } else {
            $context setState ${MainMap::ENABLED};
        }
        [$context getState] Entry $context;

        return -code ok;
    }

    public method ocsStop {context} {
        set ctxt [$context getOwner];

        [$context getState] Exit $context;
        $context clearState;
        if [catch {
            $ctxt stopDone ;
        } result] {
            $context setState ${MainMap::ENABLED};
            error $result;
        } else {
            $context setState ${MainMap::ENABLED};
        }
        [$context getState] Entry $context;

        return -code ok;
    }
}

class MainMap_ERROR {
    inherit MainMap_Default;

    constructor {name id} {
        MainMap_Default::constructor $name $id;
    } {}

    public method ocsReset {context} {
        set ctxt [$context getOwner];

        [$context getState] Exit $context;
        $context clearState;
        if [catch {
            $ctxt reset ;
        } result] {
            $context setState ${MainMap::STANDBY};
            error $result;
        } else {
            $context setState ${MainMap::STANDBY};
        }
        [$context getState] Entry $context;

        return -code ok;
    }
}


# Static state declarations.
set MainMap::Off [MainMap_Off #auto "MainMap::Off" 0];
set MainMap::STANDBY [MainMap_STANDBY #auto "MainMap::STANDBY" 1];
set MainMap::CONFIGURING [MainMap_CONFIGURING #auto "MainMap::CONFIGURING" 2];
set MainMap::DISABLED [MainMap_DISABLED #auto "MainMap::DISABLED" 3];
set MainMap::ENABLED [MainMap_ENABLED #auto "MainMap::ENABLED" 4];
set MainMap::ERROR [MainMap_ERROR #auto "MainMap::ERROR" 5];

# Local variables:
#  buffer-read-only: t
# End:
