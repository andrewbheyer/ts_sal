//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : salLifecycle-cpp.sm
//

#include "header"
#include "cpp/salLifecycle-cpp_sm.h"

using namespace statemap;

// Static class declarations.
MainMap_Off MainMap::Off("MainMap::Off", 0);
MainMap_STANDBY MainMap::STANDBY("MainMap::STANDBY", 1);
MainMap_CONFIGURING MainMap::CONFIGURING("MainMap::CONFIGURING", 2);
MainMap_DISABLED MainMap::DISABLED("MainMap::DISABLED", 3);
MainMap_ENABLED MainMap::ENABLED("MainMap::ENABLED", 4);
MainMap_ERROR MainMap::ERROR("MainMap::ERROR", 5);

void salLifecycleState::configureError(salLifecycle-cppContext& context)
{
    Default(context);
}

void salLifecycleState::disableError(salLifecycle-cppContext& context)
{
    Default(context);
}

void salLifecycleState::enableError(salLifecycle-cppContext& context)
{
    Default(context);
}

void salLifecycleState::ocsAbandon(salLifecycle-cppContext& context)
{
    Default(context);
}

void salLifecycleState::ocsAbort(salLifecycle-cppContext& context)
{
    Default(context);
}

void salLifecycleState::ocsBoot(salLifecycle-cppContext& context)
{
    Default(context);
}

void salLifecycleState::ocsConfigure(salLifecycle-cppContext& context)
{
    Default(context);
}

void salLifecycleState::ocsDisable(salLifecycle-cppContext& context)
{
    Default(context);
}

void salLifecycleState::ocsEnable(salLifecycle-cppContext& context)
{
    Default(context);
}

void salLifecycleState::ocsQuit(salLifecycle-cppContext& context)
{
    Default(context);
}

void salLifecycleState::ocsReset(salLifecycle-cppContext& context)
{
    Default(context);
}

void salLifecycleState::ocsSetValue(salLifecycle-cppContext& context)
{
    Default(context);
}

void salLifecycleState::ocsStop(salLifecycle-cppContext& context)
{
    Default(context);
}

void salLifecycleState::ocsUnConfigure(salLifecycle-cppContext& context)
{
    Default(context);
}

void salLifecycleState::Default(salLifecycle-cppContext& context)
{
    throw (
        TransitionUndefinedException(
            context.getState().getName(),
            context.getTransition()));

}

void MainMap_Off::ocsBoot(salLifecycle-cppContext& context)
{
    salLifecycle& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.boot();
        context.setState(MainMap::STANDBY);
    }
    catch (...)
    {
        context.setState(MainMap::STANDBY);
        throw;
    }
    context.getState().Entry(context);

}

void MainMap_STANDBY::ocsConfigure(salLifecycle-cppContext& context)
{
    salLifecycle& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.configureAck();
        context.setState(MainMap::CONFIGURING);
    }
    catch (...)
    {
        context.setState(MainMap::CONFIGURING);
        throw;
    }
    context.getState().Entry(context);

}

void MainMap_STANDBY::ocsQuit(salLifecycle-cppContext& context)
{
    salLifecycle& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.quit();
        context.setState(MainMap::Off);
    }
    catch (...)
    {
        context.setState(MainMap::Off);
        throw;
    }
    context.getState().Entry(context);

}

void MainMap_CONFIGURING::configureError(salLifecycle-cppContext& context)
{
    salLifecycle& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.configureFailed();
        context.setState(MainMap::ERROR);
    }
    catch (...)
    {
        context.setState(MainMap::ERROR);
        throw;
    }
    context.getState().Entry(context);

}

void MainMap_CONFIGURING::ocsAbandon(salLifecycle-cppContext& context)
{
    salLifecycle& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.abandon();
        context.setState(MainMap::STANDBY);
    }
    catch (...)
    {
        context.setState(MainMap::STANDBY);
        throw;
    }
    context.getState().Entry(context);

}

void MainMap_CONFIGURING::ocsConfigure(salLifecycle-cppContext& context)
{
    salLifecycle& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.configureDone();
        context.setState(MainMap::DISABLED);
    }
    catch (...)
    {
        context.setState(MainMap::DISABLED);
        throw;
    }
    context.getState().Entry(context);

}

void MainMap_DISABLED::disableError(salLifecycle-cppContext& context)
{
    salLifecycle& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.disableFailed();
        context.setState(MainMap::ERROR);
    }
    catch (...)
    {
        context.setState(MainMap::ERROR);
        throw;
    }
    context.getState().Entry(context);

}

void MainMap_DISABLED::ocsEnable(salLifecycle-cppContext& context)
{
    salLifecycle& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.enableAck();
        context.setState(MainMap::ENABLED);
    }
    catch (...)
    {
        context.setState(MainMap::ENABLED);
        throw;
    }
    context.getState().Entry(context);

}

void MainMap_DISABLED::ocsUnConfigure(salLifecycle-cppContext& context)
{
    salLifecycle& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.unConfigureAck();
        context.setState(MainMap::STANDBY);
    }
    catch (...)
    {
        context.setState(MainMap::STANDBY);
        throw;
    }
    context.getState().Entry(context);

}

void MainMap_ENABLED::enableError(salLifecycle-cppContext& context)
{
    salLifecycle& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.enableFailed();
        context.setState(MainMap::ERROR);
    }
    catch (...)
    {
        context.setState(MainMap::ERROR);
        throw;
    }
    context.getState().Entry(context);

}

void MainMap_ENABLED::ocsAbort(salLifecycle-cppContext& context)
{
    salLifecycle& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.enableFailed();
        context.setState(MainMap::ERROR);
    }
    catch (...)
    {
        context.setState(MainMap::ERROR);
        throw;
    }
    context.getState().Entry(context);

}

void MainMap_ENABLED::ocsDisable(salLifecycle-cppContext& context)
{
    salLifecycle& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.disableDone();
        context.setState(MainMap::DISABLED);
    }
    catch (...)
    {
        context.setState(MainMap::DISABLED);
        throw;
    }
    context.getState().Entry(context);

}

void MainMap_ENABLED::ocsEnable(salLifecycle-cppContext& context)
{
    salLifecycle& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.enableDone();
        context.setState(MainMap::ENABLED);
    }
    catch (...)
    {
        context.setState(MainMap::ENABLED);
        throw;
    }
    context.getState().Entry(context);

}

void MainMap_ENABLED::ocsSetValue(salLifecycle-cppContext& context)
{
    salLifecycle& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.setValue(par, val);
        context.setState(MainMap::ENABLED);
    }
    catch (...)
    {
        context.setState(MainMap::ENABLED);
        throw;
    }
    context.getState().Entry(context);

}

void MainMap_ENABLED::ocsStop(salLifecycle-cppContext& context)
{
    salLifecycle& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.stopDone();
        context.setState(MainMap::ENABLED);
    }
    catch (...)
    {
        context.setState(MainMap::ENABLED);
        throw;
    }
    context.getState().Entry(context);

}

void MainMap_ERROR::ocsReset(salLifecycle-cppContext& context)
{
    salLifecycle& ctxt = context.getOwner();

    context.getState().Exit(context);
    context.clearState();
    try
    {
        ctxt.reset();
        context.setState(MainMap::STANDBY);
    }
    catch (...)
    {
        context.setState(MainMap::STANDBY);
        throw;
    }
    context.getState().Entry(context);

}

//
// Local variables:
//  buffer-read-only: t
// End:
//
