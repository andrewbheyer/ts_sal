//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: sal_mountDcps.h
//  Source: sal_mountDcps.idl
//  Generated: Tue Mar 31 09:07:30 2015
//  OpenSplice V6.4.140320OSS
//  
//******************************************************************
#ifndef _SAL_MOUNTDCPS_H_
#define _SAL_MOUNTDCPS_H_

#include "sacpp_mapping.h"
#include "sacpp_DDS_DCPS.h"
#include "sal_mount.h"
#include "dds_dcps.h"


namespace mount
{

   class AltTypeSupportInterface;

   typedef AltTypeSupportInterface * AltTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < AltTypeSupportInterface> AltTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < AltTypeSupportInterface> AltTypeSupportInterface_out;


   class AltDataWriter;

   typedef AltDataWriter * AltDataWriter_ptr;
   typedef DDS_DCPSInterface_var < AltDataWriter> AltDataWriter_var;
   typedef DDS_DCPSInterface_out < AltDataWriter> AltDataWriter_out;


   class AltDataReader;

   typedef AltDataReader * AltDataReader_ptr;
   typedef DDS_DCPSInterface_var < AltDataReader> AltDataReader_var;
   typedef DDS_DCPSInterface_out < AltDataReader> AltDataReader_out;


   class AltDataReaderView;

   typedef AltDataReaderView * AltDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < AltDataReaderView> AltDataReaderView_var;
   typedef DDS_DCPSInterface_out < AltDataReaderView> AltDataReaderView_out;


   class ApplicationTypeSupportInterface;

   typedef ApplicationTypeSupportInterface * ApplicationTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < ApplicationTypeSupportInterface> ApplicationTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < ApplicationTypeSupportInterface> ApplicationTypeSupportInterface_out;


   class ApplicationDataWriter;

   typedef ApplicationDataWriter * ApplicationDataWriter_ptr;
   typedef DDS_DCPSInterface_var < ApplicationDataWriter> ApplicationDataWriter_var;
   typedef DDS_DCPSInterface_out < ApplicationDataWriter> ApplicationDataWriter_out;


   class ApplicationDataReader;

   typedef ApplicationDataReader * ApplicationDataReader_ptr;
   typedef DDS_DCPSInterface_var < ApplicationDataReader> ApplicationDataReader_var;
   typedef DDS_DCPSInterface_out < ApplicationDataReader> ApplicationDataReader_out;


   class ApplicationDataReaderView;

   typedef ApplicationDataReaderView * ApplicationDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < ApplicationDataReaderView> ApplicationDataReaderView_var;
   typedef DDS_DCPSInterface_out < ApplicationDataReaderView> ApplicationDataReaderView_out;


   class AzTypeSupportInterface;

   typedef AzTypeSupportInterface * AzTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < AzTypeSupportInterface> AzTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < AzTypeSupportInterface> AzTypeSupportInterface_out;


   class AzDataWriter;

   typedef AzDataWriter * AzDataWriter_ptr;
   typedef DDS_DCPSInterface_var < AzDataWriter> AzDataWriter_var;
   typedef DDS_DCPSInterface_out < AzDataWriter> AzDataWriter_out;


   class AzDataReader;

   typedef AzDataReader * AzDataReader_ptr;
   typedef DDS_DCPSInterface_var < AzDataReader> AzDataReader_var;
   typedef DDS_DCPSInterface_out < AzDataReader> AzDataReader_out;


   class AzDataReaderView;

   typedef AzDataReaderView * AzDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < AzDataReaderView> AzDataReaderView_var;
   typedef DDS_DCPSInterface_out < AzDataReaderView> AzDataReaderView_out;


   class ElectricalTypeSupportInterface;

   typedef ElectricalTypeSupportInterface * ElectricalTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < ElectricalTypeSupportInterface> ElectricalTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < ElectricalTypeSupportInterface> ElectricalTypeSupportInterface_out;


   class ElectricalDataWriter;

   typedef ElectricalDataWriter * ElectricalDataWriter_ptr;
   typedef DDS_DCPSInterface_var < ElectricalDataWriter> ElectricalDataWriter_var;
   typedef DDS_DCPSInterface_out < ElectricalDataWriter> ElectricalDataWriter_out;


   class ElectricalDataReader;

   typedef ElectricalDataReader * ElectricalDataReader_ptr;
   typedef DDS_DCPSInterface_var < ElectricalDataReader> ElectricalDataReader_var;
   typedef DDS_DCPSInterface_out < ElectricalDataReader> ElectricalDataReader_out;


   class ElectricalDataReaderView;

   typedef ElectricalDataReaderView * ElectricalDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < ElectricalDataReaderView> ElectricalDataReaderView_var;
   typedef DDS_DCPSInterface_out < ElectricalDataReaderView> ElectricalDataReaderView_out;


   class MetrologyTypeSupportInterface;

   typedef MetrologyTypeSupportInterface * MetrologyTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < MetrologyTypeSupportInterface> MetrologyTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < MetrologyTypeSupportInterface> MetrologyTypeSupportInterface_out;


   class MetrologyDataWriter;

   typedef MetrologyDataWriter * MetrologyDataWriter_ptr;
   typedef DDS_DCPSInterface_var < MetrologyDataWriter> MetrologyDataWriter_var;
   typedef DDS_DCPSInterface_out < MetrologyDataWriter> MetrologyDataWriter_out;


   class MetrologyDataReader;

   typedef MetrologyDataReader * MetrologyDataReader_ptr;
   typedef DDS_DCPSInterface_var < MetrologyDataReader> MetrologyDataReader_var;
   typedef DDS_DCPSInterface_out < MetrologyDataReader> MetrologyDataReader_out;


   class MetrologyDataReaderView;

   typedef MetrologyDataReaderView * MetrologyDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < MetrologyDataReaderView> MetrologyDataReaderView_var;
   typedef DDS_DCPSInterface_out < MetrologyDataReaderView> MetrologyDataReaderView_out;


   class RotatorTypeSupportInterface;

   typedef RotatorTypeSupportInterface * RotatorTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < RotatorTypeSupportInterface> RotatorTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < RotatorTypeSupportInterface> RotatorTypeSupportInterface_out;


   class RotatorDataWriter;

   typedef RotatorDataWriter * RotatorDataWriter_ptr;
   typedef DDS_DCPSInterface_var < RotatorDataWriter> RotatorDataWriter_var;
   typedef DDS_DCPSInterface_out < RotatorDataWriter> RotatorDataWriter_out;


   class RotatorDataReader;

   typedef RotatorDataReader * RotatorDataReader_ptr;
   typedef DDS_DCPSInterface_var < RotatorDataReader> RotatorDataReader_var;
   typedef DDS_DCPSInterface_out < RotatorDataReader> RotatorDataReader_out;


   class RotatorDataReaderView;

   typedef RotatorDataReaderView * RotatorDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < RotatorDataReaderView> RotatorDataReaderView_var;
   typedef DDS_DCPSInterface_out < RotatorDataReaderView> RotatorDataReaderView_out;


   class TCTypeSupportInterface;

   typedef TCTypeSupportInterface * TCTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < TCTypeSupportInterface> TCTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < TCTypeSupportInterface> TCTypeSupportInterface_out;


   class TCDataWriter;

   typedef TCDataWriter * TCDataWriter_ptr;
   typedef DDS_DCPSInterface_var < TCDataWriter> TCDataWriter_var;
   typedef DDS_DCPSInterface_out < TCDataWriter> TCDataWriter_out;


   class TCDataReader;

   typedef TCDataReader * TCDataReader_ptr;
   typedef DDS_DCPSInterface_var < TCDataReader> TCDataReader_var;
   typedef DDS_DCPSInterface_out < TCDataReader> TCDataReader_out;


   class TCDataReaderView;

   typedef TCDataReaderView * TCDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < TCDataReaderView> TCDataReaderView_var;
   typedef DDS_DCPSInterface_out < TCDataReaderView> TCDataReaderView_out;


   class command_configureTypeSupportInterface;

   typedef command_configureTypeSupportInterface * command_configureTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < command_configureTypeSupportInterface> command_configureTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < command_configureTypeSupportInterface> command_configureTypeSupportInterface_out;


   class command_configureDataWriter;

   typedef command_configureDataWriter * command_configureDataWriter_ptr;
   typedef DDS_DCPSInterface_var < command_configureDataWriter> command_configureDataWriter_var;
   typedef DDS_DCPSInterface_out < command_configureDataWriter> command_configureDataWriter_out;


   class command_configureDataReader;

   typedef command_configureDataReader * command_configureDataReader_ptr;
   typedef DDS_DCPSInterface_var < command_configureDataReader> command_configureDataReader_var;
   typedef DDS_DCPSInterface_out < command_configureDataReader> command_configureDataReader_out;


   class command_configureDataReaderView;

   typedef command_configureDataReaderView * command_configureDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < command_configureDataReaderView> command_configureDataReaderView_var;
   typedef DDS_DCPSInterface_out < command_configureDataReaderView> command_configureDataReaderView_out;


   class command_moveCamWrapTypeSupportInterface;

   typedef command_moveCamWrapTypeSupportInterface * command_moveCamWrapTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < command_moveCamWrapTypeSupportInterface> command_moveCamWrapTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < command_moveCamWrapTypeSupportInterface> command_moveCamWrapTypeSupportInterface_out;


   class command_moveCamWrapDataWriter;

   typedef command_moveCamWrapDataWriter * command_moveCamWrapDataWriter_ptr;
   typedef DDS_DCPSInterface_var < command_moveCamWrapDataWriter> command_moveCamWrapDataWriter_var;
   typedef DDS_DCPSInterface_out < command_moveCamWrapDataWriter> command_moveCamWrapDataWriter_out;


   class command_moveCamWrapDataReader;

   typedef command_moveCamWrapDataReader * command_moveCamWrapDataReader_ptr;
   typedef DDS_DCPSInterface_var < command_moveCamWrapDataReader> command_moveCamWrapDataReader_var;
   typedef DDS_DCPSInterface_out < command_moveCamWrapDataReader> command_moveCamWrapDataReader_out;


   class command_moveCamWrapDataReaderView;

   typedef command_moveCamWrapDataReaderView * command_moveCamWrapDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < command_moveCamWrapDataReaderView> command_moveCamWrapDataReaderView_var;
   typedef DDS_DCPSInterface_out < command_moveCamWrapDataReaderView> command_moveCamWrapDataReaderView_out;


   class command_moveMirrorCoverTypeSupportInterface;

   typedef command_moveMirrorCoverTypeSupportInterface * command_moveMirrorCoverTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < command_moveMirrorCoverTypeSupportInterface> command_moveMirrorCoverTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < command_moveMirrorCoverTypeSupportInterface> command_moveMirrorCoverTypeSupportInterface_out;


   class command_moveMirrorCoverDataWriter;

   typedef command_moveMirrorCoverDataWriter * command_moveMirrorCoverDataWriter_ptr;
   typedef DDS_DCPSInterface_var < command_moveMirrorCoverDataWriter> command_moveMirrorCoverDataWriter_var;
   typedef DDS_DCPSInterface_out < command_moveMirrorCoverDataWriter> command_moveMirrorCoverDataWriter_out;


   class command_moveMirrorCoverDataReader;

   typedef command_moveMirrorCoverDataReader * command_moveMirrorCoverDataReader_ptr;
   typedef DDS_DCPSInterface_var < command_moveMirrorCoverDataReader> command_moveMirrorCoverDataReader_var;
   typedef DDS_DCPSInterface_out < command_moveMirrorCoverDataReader> command_moveMirrorCoverDataReader_out;


   class command_moveMirrorCoverDataReaderView;

   typedef command_moveMirrorCoverDataReaderView * command_moveMirrorCoverDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < command_moveMirrorCoverDataReaderView> command_moveMirrorCoverDataReaderView_var;
   typedef DDS_DCPSInterface_out < command_moveMirrorCoverDataReaderView> command_moveMirrorCoverDataReaderView_out;


   class command_moveToTargetTypeSupportInterface;

   typedef command_moveToTargetTypeSupportInterface * command_moveToTargetTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < command_moveToTargetTypeSupportInterface> command_moveToTargetTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < command_moveToTargetTypeSupportInterface> command_moveToTargetTypeSupportInterface_out;


   class command_moveToTargetDataWriter;

   typedef command_moveToTargetDataWriter * command_moveToTargetDataWriter_ptr;
   typedef DDS_DCPSInterface_var < command_moveToTargetDataWriter> command_moveToTargetDataWriter_var;
   typedef DDS_DCPSInterface_out < command_moveToTargetDataWriter> command_moveToTargetDataWriter_out;


   class command_moveToTargetDataReader;

   typedef command_moveToTargetDataReader * command_moveToTargetDataReader_ptr;
   typedef DDS_DCPSInterface_var < command_moveToTargetDataReader> command_moveToTargetDataReader_var;
   typedef DDS_DCPSInterface_out < command_moveToTargetDataReader> command_moveToTargetDataReader_out;


   class command_moveToTargetDataReaderView;

   typedef command_moveToTargetDataReaderView * command_moveToTargetDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < command_moveToTargetDataReaderView> command_moveToTargetDataReaderView_var;
   typedef DDS_DCPSInterface_out < command_moveToTargetDataReaderView> command_moveToTargetDataReaderView_out;


   class command_testTypeSupportInterface;

   typedef command_testTypeSupportInterface * command_testTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < command_testTypeSupportInterface> command_testTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < command_testTypeSupportInterface> command_testTypeSupportInterface_out;


   class command_testDataWriter;

   typedef command_testDataWriter * command_testDataWriter_ptr;
   typedef DDS_DCPSInterface_var < command_testDataWriter> command_testDataWriter_var;
   typedef DDS_DCPSInterface_out < command_testDataWriter> command_testDataWriter_out;


   class command_testDataReader;

   typedef command_testDataReader * command_testDataReader_ptr;
   typedef DDS_DCPSInterface_var < command_testDataReader> command_testDataReader_var;
   typedef DDS_DCPSInterface_out < command_testDataReader> command_testDataReader_out;


   class command_testDataReaderView;

   typedef command_testDataReaderView * command_testDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < command_testDataReaderView> command_testDataReaderView_var;
   typedef DDS_DCPSInterface_out < command_testDataReaderView> command_testDataReaderView_out;


   class logevent_accLimitTypeSupportInterface;

   typedef logevent_accLimitTypeSupportInterface * logevent_accLimitTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < logevent_accLimitTypeSupportInterface> logevent_accLimitTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < logevent_accLimitTypeSupportInterface> logevent_accLimitTypeSupportInterface_out;


   class logevent_accLimitDataWriter;

   typedef logevent_accLimitDataWriter * logevent_accLimitDataWriter_ptr;
   typedef DDS_DCPSInterface_var < logevent_accLimitDataWriter> logevent_accLimitDataWriter_var;
   typedef DDS_DCPSInterface_out < logevent_accLimitDataWriter> logevent_accLimitDataWriter_out;


   class logevent_accLimitDataReader;

   typedef logevent_accLimitDataReader * logevent_accLimitDataReader_ptr;
   typedef DDS_DCPSInterface_var < logevent_accLimitDataReader> logevent_accLimitDataReader_var;
   typedef DDS_DCPSInterface_out < logevent_accLimitDataReader> logevent_accLimitDataReader_out;


   class logevent_accLimitDataReaderView;

   typedef logevent_accLimitDataReaderView * logevent_accLimitDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < logevent_accLimitDataReaderView> logevent_accLimitDataReaderView_var;
   typedef DDS_DCPSInterface_out < logevent_accLimitDataReaderView> logevent_accLimitDataReaderView_out;


   class logevent_altLimitTypeSupportInterface;

   typedef logevent_altLimitTypeSupportInterface * logevent_altLimitTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < logevent_altLimitTypeSupportInterface> logevent_altLimitTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < logevent_altLimitTypeSupportInterface> logevent_altLimitTypeSupportInterface_out;


   class logevent_altLimitDataWriter;

   typedef logevent_altLimitDataWriter * logevent_altLimitDataWriter_ptr;
   typedef DDS_DCPSInterface_var < logevent_altLimitDataWriter> logevent_altLimitDataWriter_var;
   typedef DDS_DCPSInterface_out < logevent_altLimitDataWriter> logevent_altLimitDataWriter_out;


   class logevent_altLimitDataReader;

   typedef logevent_altLimitDataReader * logevent_altLimitDataReader_ptr;
   typedef DDS_DCPSInterface_var < logevent_altLimitDataReader> logevent_altLimitDataReader_var;
   typedef DDS_DCPSInterface_out < logevent_altLimitDataReader> logevent_altLimitDataReader_out;


   class logevent_altLimitDataReaderView;

   typedef logevent_altLimitDataReaderView * logevent_altLimitDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < logevent_altLimitDataReaderView> logevent_altLimitDataReaderView_var;
   typedef DDS_DCPSInterface_out < logevent_altLimitDataReaderView> logevent_altLimitDataReaderView_out;


   class logevent_interlockTypeSupportInterface;

   typedef logevent_interlockTypeSupportInterface * logevent_interlockTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < logevent_interlockTypeSupportInterface> logevent_interlockTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < logevent_interlockTypeSupportInterface> logevent_interlockTypeSupportInterface_out;


   class logevent_interlockDataWriter;

   typedef logevent_interlockDataWriter * logevent_interlockDataWriter_ptr;
   typedef DDS_DCPSInterface_var < logevent_interlockDataWriter> logevent_interlockDataWriter_var;
   typedef DDS_DCPSInterface_out < logevent_interlockDataWriter> logevent_interlockDataWriter_out;


   class logevent_interlockDataReader;

   typedef logevent_interlockDataReader * logevent_interlockDataReader_ptr;
   typedef DDS_DCPSInterface_var < logevent_interlockDataReader> logevent_interlockDataReader_var;
   typedef DDS_DCPSInterface_out < logevent_interlockDataReader> logevent_interlockDataReader_out;


   class logevent_interlockDataReaderView;

   typedef logevent_interlockDataReaderView * logevent_interlockDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < logevent_interlockDataReaderView> logevent_interlockDataReaderView_var;
   typedef DDS_DCPSInterface_out < logevent_interlockDataReaderView> logevent_interlockDataReaderView_out;


   class logevent_powerErrorTypeSupportInterface;

   typedef logevent_powerErrorTypeSupportInterface * logevent_powerErrorTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < logevent_powerErrorTypeSupportInterface> logevent_powerErrorTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < logevent_powerErrorTypeSupportInterface> logevent_powerErrorTypeSupportInterface_out;


   class logevent_powerErrorDataWriter;

   typedef logevent_powerErrorDataWriter * logevent_powerErrorDataWriter_ptr;
   typedef DDS_DCPSInterface_var < logevent_powerErrorDataWriter> logevent_powerErrorDataWriter_var;
   typedef DDS_DCPSInterface_out < logevent_powerErrorDataWriter> logevent_powerErrorDataWriter_out;


   class logevent_powerErrorDataReader;

   typedef logevent_powerErrorDataReader * logevent_powerErrorDataReader_ptr;
   typedef DDS_DCPSInterface_var < logevent_powerErrorDataReader> logevent_powerErrorDataReader_var;
   typedef DDS_DCPSInterface_out < logevent_powerErrorDataReader> logevent_powerErrorDataReader_out;


   class logevent_powerErrorDataReaderView;

   typedef logevent_powerErrorDataReaderView * logevent_powerErrorDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < logevent_powerErrorDataReaderView> logevent_powerErrorDataReaderView_var;
   typedef DDS_DCPSInterface_out < logevent_powerErrorDataReaderView> logevent_powerErrorDataReaderView_out;


   class logevent_slewErrorTypeSupportInterface;

   typedef logevent_slewErrorTypeSupportInterface * logevent_slewErrorTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < logevent_slewErrorTypeSupportInterface> logevent_slewErrorTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < logevent_slewErrorTypeSupportInterface> logevent_slewErrorTypeSupportInterface_out;


   class logevent_slewErrorDataWriter;

   typedef logevent_slewErrorDataWriter * logevent_slewErrorDataWriter_ptr;
   typedef DDS_DCPSInterface_var < logevent_slewErrorDataWriter> logevent_slewErrorDataWriter_var;
   typedef DDS_DCPSInterface_out < logevent_slewErrorDataWriter> logevent_slewErrorDataWriter_out;


   class logevent_slewErrorDataReader;

   typedef logevent_slewErrorDataReader * logevent_slewErrorDataReader_ptr;
   typedef DDS_DCPSInterface_var < logevent_slewErrorDataReader> logevent_slewErrorDataReader_var;
   typedef DDS_DCPSInterface_out < logevent_slewErrorDataReader> logevent_slewErrorDataReader_out;


   class logevent_slewErrorDataReaderView;

   typedef logevent_slewErrorDataReaderView * logevent_slewErrorDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < logevent_slewErrorDataReaderView> logevent_slewErrorDataReaderView_var;
   typedef DDS_DCPSInterface_out < logevent_slewErrorDataReaderView> logevent_slewErrorDataReaderView_out;


   class logevent_slewOKTypeSupportInterface;

   typedef logevent_slewOKTypeSupportInterface * logevent_slewOKTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < logevent_slewOKTypeSupportInterface> logevent_slewOKTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < logevent_slewOKTypeSupportInterface> logevent_slewOKTypeSupportInterface_out;


   class logevent_slewOKDataWriter;

   typedef logevent_slewOKDataWriter * logevent_slewOKDataWriter_ptr;
   typedef DDS_DCPSInterface_var < logevent_slewOKDataWriter> logevent_slewOKDataWriter_var;
   typedef DDS_DCPSInterface_out < logevent_slewOKDataWriter> logevent_slewOKDataWriter_out;


   class logevent_slewOKDataReader;

   typedef logevent_slewOKDataReader * logevent_slewOKDataReader_ptr;
   typedef DDS_DCPSInterface_var < logevent_slewOKDataReader> logevent_slewOKDataReader_var;
   typedef DDS_DCPSInterface_out < logevent_slewOKDataReader> logevent_slewOKDataReader_out;


   class logevent_slewOKDataReaderView;

   typedef logevent_slewOKDataReaderView * logevent_slewOKDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < logevent_slewOKDataReaderView> logevent_slewOKDataReaderView_var;
   typedef DDS_DCPSInterface_out < logevent_slewOKDataReaderView> logevent_slewOKDataReaderView_out;


   class logevent_slewReadyTypeSupportInterface;

   typedef logevent_slewReadyTypeSupportInterface * logevent_slewReadyTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < logevent_slewReadyTypeSupportInterface> logevent_slewReadyTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < logevent_slewReadyTypeSupportInterface> logevent_slewReadyTypeSupportInterface_out;


   class logevent_slewReadyDataWriter;

   typedef logevent_slewReadyDataWriter * logevent_slewReadyDataWriter_ptr;
   typedef DDS_DCPSInterface_var < logevent_slewReadyDataWriter> logevent_slewReadyDataWriter_var;
   typedef DDS_DCPSInterface_out < logevent_slewReadyDataWriter> logevent_slewReadyDataWriter_out;


   class logevent_slewReadyDataReader;

   typedef logevent_slewReadyDataReader * logevent_slewReadyDataReader_ptr;
   typedef DDS_DCPSInterface_var < logevent_slewReadyDataReader> logevent_slewReadyDataReader_var;
   typedef DDS_DCPSInterface_out < logevent_slewReadyDataReader> logevent_slewReadyDataReader_out;


   class logevent_slewReadyDataReaderView;

   typedef logevent_slewReadyDataReaderView * logevent_slewReadyDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < logevent_slewReadyDataReaderView> logevent_slewReadyDataReaderView_var;
   typedef DDS_DCPSInterface_out < logevent_slewReadyDataReaderView> logevent_slewReadyDataReaderView_out;


   class logevent_tempErrorTypeSupportInterface;

   typedef logevent_tempErrorTypeSupportInterface * logevent_tempErrorTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < logevent_tempErrorTypeSupportInterface> logevent_tempErrorTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < logevent_tempErrorTypeSupportInterface> logevent_tempErrorTypeSupportInterface_out;


   class logevent_tempErrorDataWriter;

   typedef logevent_tempErrorDataWriter * logevent_tempErrorDataWriter_ptr;
   typedef DDS_DCPSInterface_var < logevent_tempErrorDataWriter> logevent_tempErrorDataWriter_var;
   typedef DDS_DCPSInterface_out < logevent_tempErrorDataWriter> logevent_tempErrorDataWriter_out;


   class logevent_tempErrorDataReader;

   typedef logevent_tempErrorDataReader * logevent_tempErrorDataReader_ptr;
   typedef DDS_DCPSInterface_var < logevent_tempErrorDataReader> logevent_tempErrorDataReader_var;
   typedef DDS_DCPSInterface_out < logevent_tempErrorDataReader> logevent_tempErrorDataReader_out;


   class logevent_tempErrorDataReaderView;

   typedef logevent_tempErrorDataReaderView * logevent_tempErrorDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < logevent_tempErrorDataReaderView> logevent_tempErrorDataReaderView_var;
   typedef DDS_DCPSInterface_out < logevent_tempErrorDataReaderView> logevent_tempErrorDataReaderView_out;


   class logevent_trackLostTypeSupportInterface;

   typedef logevent_trackLostTypeSupportInterface * logevent_trackLostTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < logevent_trackLostTypeSupportInterface> logevent_trackLostTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < logevent_trackLostTypeSupportInterface> logevent_trackLostTypeSupportInterface_out;


   class logevent_trackLostDataWriter;

   typedef logevent_trackLostDataWriter * logevent_trackLostDataWriter_ptr;
   typedef DDS_DCPSInterface_var < logevent_trackLostDataWriter> logevent_trackLostDataWriter_var;
   typedef DDS_DCPSInterface_out < logevent_trackLostDataWriter> logevent_trackLostDataWriter_out;


   class logevent_trackLostDataReader;

   typedef logevent_trackLostDataReader * logevent_trackLostDataReader_ptr;
   typedef DDS_DCPSInterface_var < logevent_trackLostDataReader> logevent_trackLostDataReader_var;
   typedef DDS_DCPSInterface_out < logevent_trackLostDataReader> logevent_trackLostDataReader_out;


   class logevent_trackLostDataReaderView;

   typedef logevent_trackLostDataReaderView * logevent_trackLostDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < logevent_trackLostDataReaderView> logevent_trackLostDataReaderView_var;
   typedef DDS_DCPSInterface_out < logevent_trackLostDataReaderView> logevent_trackLostDataReaderView_out;


   class logevent_trackingTypeSupportInterface;

   typedef logevent_trackingTypeSupportInterface * logevent_trackingTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < logevent_trackingTypeSupportInterface> logevent_trackingTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < logevent_trackingTypeSupportInterface> logevent_trackingTypeSupportInterface_out;


   class logevent_trackingDataWriter;

   typedef logevent_trackingDataWriter * logevent_trackingDataWriter_ptr;
   typedef DDS_DCPSInterface_var < logevent_trackingDataWriter> logevent_trackingDataWriter_var;
   typedef DDS_DCPSInterface_out < logevent_trackingDataWriter> logevent_trackingDataWriter_out;


   class logevent_trackingDataReader;

   typedef logevent_trackingDataReader * logevent_trackingDataReader_ptr;
   typedef DDS_DCPSInterface_var < logevent_trackingDataReader> logevent_trackingDataReader_var;
   typedef DDS_DCPSInterface_out < logevent_trackingDataReader> logevent_trackingDataReader_out;


   class logevent_trackingDataReaderView;

   typedef logevent_trackingDataReaderView * logevent_trackingDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < logevent_trackingDataReaderView> logevent_trackingDataReaderView_var;
   typedef DDS_DCPSInterface_out < logevent_trackingDataReaderView> logevent_trackingDataReaderView_out;


   class logevent_velLimitTypeSupportInterface;

   typedef logevent_velLimitTypeSupportInterface * logevent_velLimitTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < logevent_velLimitTypeSupportInterface> logevent_velLimitTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < logevent_velLimitTypeSupportInterface> logevent_velLimitTypeSupportInterface_out;


   class logevent_velLimitDataWriter;

   typedef logevent_velLimitDataWriter * logevent_velLimitDataWriter_ptr;
   typedef DDS_DCPSInterface_var < logevent_velLimitDataWriter> logevent_velLimitDataWriter_var;
   typedef DDS_DCPSInterface_out < logevent_velLimitDataWriter> logevent_velLimitDataWriter_out;


   class logevent_velLimitDataReader;

   typedef logevent_velLimitDataReader * logevent_velLimitDataReader_ptr;
   typedef DDS_DCPSInterface_var < logevent_velLimitDataReader> logevent_velLimitDataReader_var;
   typedef DDS_DCPSInterface_out < logevent_velLimitDataReader> logevent_velLimitDataReader_out;


   class logevent_velLimitDataReaderView;

   typedef logevent_velLimitDataReaderView * logevent_velLimitDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < logevent_velLimitDataReaderView> logevent_velLimitDataReaderView_var;
   typedef DDS_DCPSInterface_out < logevent_velLimitDataReaderView> logevent_velLimitDataReaderView_out;


   class commandTypeSupportInterface;

   typedef commandTypeSupportInterface * commandTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < commandTypeSupportInterface> commandTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < commandTypeSupportInterface> commandTypeSupportInterface_out;


   class commandDataWriter;

   typedef commandDataWriter * commandDataWriter_ptr;
   typedef DDS_DCPSInterface_var < commandDataWriter> commandDataWriter_var;
   typedef DDS_DCPSInterface_out < commandDataWriter> commandDataWriter_out;


   class commandDataReader;

   typedef commandDataReader * commandDataReader_ptr;
   typedef DDS_DCPSInterface_var < commandDataReader> commandDataReader_var;
   typedef DDS_DCPSInterface_out < commandDataReader> commandDataReader_out;


   class commandDataReaderView;

   typedef commandDataReaderView * commandDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < commandDataReaderView> commandDataReaderView_var;
   typedef DDS_DCPSInterface_out < commandDataReaderView> commandDataReaderView_out;


   class ackcmdTypeSupportInterface;

   typedef ackcmdTypeSupportInterface * ackcmdTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < ackcmdTypeSupportInterface> ackcmdTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < ackcmdTypeSupportInterface> ackcmdTypeSupportInterface_out;


   class ackcmdDataWriter;

   typedef ackcmdDataWriter * ackcmdDataWriter_ptr;
   typedef DDS_DCPSInterface_var < ackcmdDataWriter> ackcmdDataWriter_var;
   typedef DDS_DCPSInterface_out < ackcmdDataWriter> ackcmdDataWriter_out;


   class ackcmdDataReader;

   typedef ackcmdDataReader * ackcmdDataReader_ptr;
   typedef DDS_DCPSInterface_var < ackcmdDataReader> ackcmdDataReader_var;
   typedef DDS_DCPSInterface_out < ackcmdDataReader> ackcmdDataReader_out;


   class ackcmdDataReaderView;

   typedef ackcmdDataReaderView * ackcmdDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < ackcmdDataReaderView> ackcmdDataReaderView_var;
   typedef DDS_DCPSInterface_out < ackcmdDataReaderView> ackcmdDataReaderView_out;


   class logeventTypeSupportInterface;

   typedef logeventTypeSupportInterface * logeventTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < logeventTypeSupportInterface> logeventTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < logeventTypeSupportInterface> logeventTypeSupportInterface_out;


   class logeventDataWriter;

   typedef logeventDataWriter * logeventDataWriter_ptr;
   typedef DDS_DCPSInterface_var < logeventDataWriter> logeventDataWriter_var;
   typedef DDS_DCPSInterface_out < logeventDataWriter> logeventDataWriter_out;


   class logeventDataReader;

   typedef logeventDataReader * logeventDataReader_ptr;
   typedef DDS_DCPSInterface_var < logeventDataReader> logeventDataReader_var;
   typedef DDS_DCPSInterface_out < logeventDataReader> logeventDataReader_out;


   class logeventDataReaderView;

   typedef logeventDataReaderView * logeventDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < logeventDataReaderView> logeventDataReaderView_var;
   typedef DDS_DCPSInterface_out < logeventDataReaderView> logeventDataReaderView_out;

   struct AltSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < Alt, struct AltSeq_uniq_> AltSeq;
   typedef DDS_DCPSSequence_var < AltSeq> AltSeq_var;
   typedef DDS_DCPSSequence_out < AltSeq> AltSeq_out;
   class AltTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef AltTypeSupportInterface_ptr _ptr_type;
      typedef AltTypeSupportInterface_var _var_type;

      static AltTypeSupportInterface_ptr _duplicate (AltTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static AltTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static AltTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static AltTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      AltTypeSupportInterface_ptr _this () { return this; }


   protected:
      AltTypeSupportInterface () {};
      ~AltTypeSupportInterface () {};
   private:
      AltTypeSupportInterface (const AltTypeSupportInterface &);
      AltTypeSupportInterface & operator = (const AltTypeSupportInterface &);
   };

   class AltDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef AltDataWriter_ptr _ptr_type;
      typedef AltDataWriter_var _var_type;

      static AltDataWriter_ptr _duplicate (AltDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static AltDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static AltDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static AltDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      AltDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const Alt& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const Alt& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const Alt& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const Alt& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const Alt& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const Alt& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const Alt& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const Alt& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const Alt& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const Alt& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (Alt& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Alt& instance_data) = 0;

   protected:
      AltDataWriter () {};
      ~AltDataWriter () {};
   private:
      AltDataWriter (const AltDataWriter &);
      AltDataWriter & operator = (const AltDataWriter &);
   };

   class AltDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef AltDataReader_ptr _ptr_type;
      typedef AltDataReader_var _var_type;

      static AltDataReader_ptr _duplicate (AltDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static AltDataReader_ptr _narrow (DDS::Object_ptr obj);
      static AltDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static AltDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      AltDataReader_ptr _this () { return this; }

      virtual DDS::Long read (AltSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (AltSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (AltSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (AltSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (Alt& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (Alt& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (AltSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (AltSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (AltSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (AltSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (AltSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (AltSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (AltSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (Alt& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Alt& instance) = 0;

   protected:
      AltDataReader () {};
      ~AltDataReader () {};
   private:
      AltDataReader (const AltDataReader &);
      AltDataReader & operator = (const AltDataReader &);
   };

   class AltDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef AltDataReaderView_ptr _ptr_type;
      typedef AltDataReaderView_var _var_type;

      static AltDataReaderView_ptr _duplicate (AltDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static AltDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static AltDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static AltDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      AltDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (AltSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (AltSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (AltSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (AltSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (Alt& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (Alt& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (AltSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (AltSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (AltSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (AltSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (AltSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (AltSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (AltSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (Alt& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Alt& instance) = 0;

   protected:
      AltDataReaderView () {};
      ~AltDataReaderView () {};
   private:
      AltDataReaderView (const AltDataReaderView &);
      AltDataReaderView & operator = (const AltDataReaderView &);
   };

   struct ApplicationSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < Application, struct ApplicationSeq_uniq_> ApplicationSeq;
   typedef DDS_DCPSSequence_var < ApplicationSeq> ApplicationSeq_var;
   typedef DDS_DCPSSequence_out < ApplicationSeq> ApplicationSeq_out;
   class ApplicationTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef ApplicationTypeSupportInterface_ptr _ptr_type;
      typedef ApplicationTypeSupportInterface_var _var_type;

      static ApplicationTypeSupportInterface_ptr _duplicate (ApplicationTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ApplicationTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static ApplicationTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ApplicationTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      ApplicationTypeSupportInterface_ptr _this () { return this; }


   protected:
      ApplicationTypeSupportInterface () {};
      ~ApplicationTypeSupportInterface () {};
   private:
      ApplicationTypeSupportInterface (const ApplicationTypeSupportInterface &);
      ApplicationTypeSupportInterface & operator = (const ApplicationTypeSupportInterface &);
   };

   class ApplicationDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef ApplicationDataWriter_ptr _ptr_type;
      typedef ApplicationDataWriter_var _var_type;

      static ApplicationDataWriter_ptr _duplicate (ApplicationDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ApplicationDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static ApplicationDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ApplicationDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      ApplicationDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const Application& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const Application& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const Application& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const Application& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const Application& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const Application& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const Application& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const Application& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const Application& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const Application& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (Application& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Application& instance_data) = 0;

   protected:
      ApplicationDataWriter () {};
      ~ApplicationDataWriter () {};
   private:
      ApplicationDataWriter (const ApplicationDataWriter &);
      ApplicationDataWriter & operator = (const ApplicationDataWriter &);
   };

   class ApplicationDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef ApplicationDataReader_ptr _ptr_type;
      typedef ApplicationDataReader_var _var_type;

      static ApplicationDataReader_ptr _duplicate (ApplicationDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ApplicationDataReader_ptr _narrow (DDS::Object_ptr obj);
      static ApplicationDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ApplicationDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      ApplicationDataReader_ptr _this () { return this; }

      virtual DDS::Long read (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (Application& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (Application& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (Application& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Application& instance) = 0;

   protected:
      ApplicationDataReader () {};
      ~ApplicationDataReader () {};
   private:
      ApplicationDataReader (const ApplicationDataReader &);
      ApplicationDataReader & operator = (const ApplicationDataReader &);
   };

   class ApplicationDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef ApplicationDataReaderView_ptr _ptr_type;
      typedef ApplicationDataReaderView_var _var_type;

      static ApplicationDataReaderView_ptr _duplicate (ApplicationDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ApplicationDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static ApplicationDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ApplicationDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      ApplicationDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (Application& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (Application& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (Application& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Application& instance) = 0;

   protected:
      ApplicationDataReaderView () {};
      ~ApplicationDataReaderView () {};
   private:
      ApplicationDataReaderView (const ApplicationDataReaderView &);
      ApplicationDataReaderView & operator = (const ApplicationDataReaderView &);
   };

   struct AzSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < Az, struct AzSeq_uniq_> AzSeq;
   typedef DDS_DCPSSequence_var < AzSeq> AzSeq_var;
   typedef DDS_DCPSSequence_out < AzSeq> AzSeq_out;
   class AzTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef AzTypeSupportInterface_ptr _ptr_type;
      typedef AzTypeSupportInterface_var _var_type;

      static AzTypeSupportInterface_ptr _duplicate (AzTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static AzTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static AzTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static AzTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      AzTypeSupportInterface_ptr _this () { return this; }


   protected:
      AzTypeSupportInterface () {};
      ~AzTypeSupportInterface () {};
   private:
      AzTypeSupportInterface (const AzTypeSupportInterface &);
      AzTypeSupportInterface & operator = (const AzTypeSupportInterface &);
   };

   class AzDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef AzDataWriter_ptr _ptr_type;
      typedef AzDataWriter_var _var_type;

      static AzDataWriter_ptr _duplicate (AzDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static AzDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static AzDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static AzDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      AzDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const Az& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const Az& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const Az& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const Az& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const Az& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const Az& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const Az& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const Az& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const Az& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const Az& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (Az& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Az& instance_data) = 0;

   protected:
      AzDataWriter () {};
      ~AzDataWriter () {};
   private:
      AzDataWriter (const AzDataWriter &);
      AzDataWriter & operator = (const AzDataWriter &);
   };

   class AzDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef AzDataReader_ptr _ptr_type;
      typedef AzDataReader_var _var_type;

      static AzDataReader_ptr _duplicate (AzDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static AzDataReader_ptr _narrow (DDS::Object_ptr obj);
      static AzDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static AzDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      AzDataReader_ptr _this () { return this; }

      virtual DDS::Long read (AzSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (AzSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (AzSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (AzSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (Az& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (Az& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (AzSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (AzSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (AzSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (AzSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (AzSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (AzSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (AzSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (Az& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Az& instance) = 0;

   protected:
      AzDataReader () {};
      ~AzDataReader () {};
   private:
      AzDataReader (const AzDataReader &);
      AzDataReader & operator = (const AzDataReader &);
   };

   class AzDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef AzDataReaderView_ptr _ptr_type;
      typedef AzDataReaderView_var _var_type;

      static AzDataReaderView_ptr _duplicate (AzDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static AzDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static AzDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static AzDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      AzDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (AzSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (AzSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (AzSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (AzSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (Az& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (Az& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (AzSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (AzSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (AzSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (AzSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (AzSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (AzSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (AzSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (Az& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Az& instance) = 0;

   protected:
      AzDataReaderView () {};
      ~AzDataReaderView () {};
   private:
      AzDataReaderView (const AzDataReaderView &);
      AzDataReaderView & operator = (const AzDataReaderView &);
   };

   struct ElectricalSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < Electrical, struct ElectricalSeq_uniq_> ElectricalSeq;
   typedef DDS_DCPSSequence_var < ElectricalSeq> ElectricalSeq_var;
   typedef DDS_DCPSSequence_out < ElectricalSeq> ElectricalSeq_out;
   class ElectricalTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef ElectricalTypeSupportInterface_ptr _ptr_type;
      typedef ElectricalTypeSupportInterface_var _var_type;

      static ElectricalTypeSupportInterface_ptr _duplicate (ElectricalTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ElectricalTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static ElectricalTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ElectricalTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      ElectricalTypeSupportInterface_ptr _this () { return this; }


   protected:
      ElectricalTypeSupportInterface () {};
      ~ElectricalTypeSupportInterface () {};
   private:
      ElectricalTypeSupportInterface (const ElectricalTypeSupportInterface &);
      ElectricalTypeSupportInterface & operator = (const ElectricalTypeSupportInterface &);
   };

   class ElectricalDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef ElectricalDataWriter_ptr _ptr_type;
      typedef ElectricalDataWriter_var _var_type;

      static ElectricalDataWriter_ptr _duplicate (ElectricalDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ElectricalDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static ElectricalDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ElectricalDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      ElectricalDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const Electrical& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const Electrical& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const Electrical& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const Electrical& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const Electrical& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const Electrical& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const Electrical& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const Electrical& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const Electrical& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const Electrical& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (Electrical& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Electrical& instance_data) = 0;

   protected:
      ElectricalDataWriter () {};
      ~ElectricalDataWriter () {};
   private:
      ElectricalDataWriter (const ElectricalDataWriter &);
      ElectricalDataWriter & operator = (const ElectricalDataWriter &);
   };

   class ElectricalDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef ElectricalDataReader_ptr _ptr_type;
      typedef ElectricalDataReader_var _var_type;

      static ElectricalDataReader_ptr _duplicate (ElectricalDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ElectricalDataReader_ptr _narrow (DDS::Object_ptr obj);
      static ElectricalDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ElectricalDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      ElectricalDataReader_ptr _this () { return this; }

      virtual DDS::Long read (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (Electrical& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (Electrical& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (Electrical& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Electrical& instance) = 0;

   protected:
      ElectricalDataReader () {};
      ~ElectricalDataReader () {};
   private:
      ElectricalDataReader (const ElectricalDataReader &);
      ElectricalDataReader & operator = (const ElectricalDataReader &);
   };

   class ElectricalDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef ElectricalDataReaderView_ptr _ptr_type;
      typedef ElectricalDataReaderView_var _var_type;

      static ElectricalDataReaderView_ptr _duplicate (ElectricalDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ElectricalDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static ElectricalDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ElectricalDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      ElectricalDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (Electrical& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (Electrical& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (Electrical& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Electrical& instance) = 0;

   protected:
      ElectricalDataReaderView () {};
      ~ElectricalDataReaderView () {};
   private:
      ElectricalDataReaderView (const ElectricalDataReaderView &);
      ElectricalDataReaderView & operator = (const ElectricalDataReaderView &);
   };

   struct MetrologySeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < Metrology, struct MetrologySeq_uniq_> MetrologySeq;
   typedef DDS_DCPSSequence_var < MetrologySeq> MetrologySeq_var;
   typedef DDS_DCPSSequence_out < MetrologySeq> MetrologySeq_out;
   class MetrologyTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef MetrologyTypeSupportInterface_ptr _ptr_type;
      typedef MetrologyTypeSupportInterface_var _var_type;

      static MetrologyTypeSupportInterface_ptr _duplicate (MetrologyTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static MetrologyTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static MetrologyTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static MetrologyTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      MetrologyTypeSupportInterface_ptr _this () { return this; }


   protected:
      MetrologyTypeSupportInterface () {};
      ~MetrologyTypeSupportInterface () {};
   private:
      MetrologyTypeSupportInterface (const MetrologyTypeSupportInterface &);
      MetrologyTypeSupportInterface & operator = (const MetrologyTypeSupportInterface &);
   };

   class MetrologyDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef MetrologyDataWriter_ptr _ptr_type;
      typedef MetrologyDataWriter_var _var_type;

      static MetrologyDataWriter_ptr _duplicate (MetrologyDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static MetrologyDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static MetrologyDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static MetrologyDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      MetrologyDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const Metrology& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const Metrology& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const Metrology& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const Metrology& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const Metrology& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const Metrology& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const Metrology& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const Metrology& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const Metrology& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const Metrology& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (Metrology& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Metrology& instance_data) = 0;

   protected:
      MetrologyDataWriter () {};
      ~MetrologyDataWriter () {};
   private:
      MetrologyDataWriter (const MetrologyDataWriter &);
      MetrologyDataWriter & operator = (const MetrologyDataWriter &);
   };

   class MetrologyDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef MetrologyDataReader_ptr _ptr_type;
      typedef MetrologyDataReader_var _var_type;

      static MetrologyDataReader_ptr _duplicate (MetrologyDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static MetrologyDataReader_ptr _narrow (DDS::Object_ptr obj);
      static MetrologyDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static MetrologyDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      MetrologyDataReader_ptr _this () { return this; }

      virtual DDS::Long read (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (Metrology& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (Metrology& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (Metrology& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Metrology& instance) = 0;

   protected:
      MetrologyDataReader () {};
      ~MetrologyDataReader () {};
   private:
      MetrologyDataReader (const MetrologyDataReader &);
      MetrologyDataReader & operator = (const MetrologyDataReader &);
   };

   class MetrologyDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef MetrologyDataReaderView_ptr _ptr_type;
      typedef MetrologyDataReaderView_var _var_type;

      static MetrologyDataReaderView_ptr _duplicate (MetrologyDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static MetrologyDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static MetrologyDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static MetrologyDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      MetrologyDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (Metrology& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (Metrology& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (Metrology& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Metrology& instance) = 0;

   protected:
      MetrologyDataReaderView () {};
      ~MetrologyDataReaderView () {};
   private:
      MetrologyDataReaderView (const MetrologyDataReaderView &);
      MetrologyDataReaderView & operator = (const MetrologyDataReaderView &);
   };

   struct RotatorSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < Rotator, struct RotatorSeq_uniq_> RotatorSeq;
   typedef DDS_DCPSSequence_var < RotatorSeq> RotatorSeq_var;
   typedef DDS_DCPSSequence_out < RotatorSeq> RotatorSeq_out;
   class RotatorTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef RotatorTypeSupportInterface_ptr _ptr_type;
      typedef RotatorTypeSupportInterface_var _var_type;

      static RotatorTypeSupportInterface_ptr _duplicate (RotatorTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static RotatorTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static RotatorTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static RotatorTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      RotatorTypeSupportInterface_ptr _this () { return this; }


   protected:
      RotatorTypeSupportInterface () {};
      ~RotatorTypeSupportInterface () {};
   private:
      RotatorTypeSupportInterface (const RotatorTypeSupportInterface &);
      RotatorTypeSupportInterface & operator = (const RotatorTypeSupportInterface &);
   };

   class RotatorDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef RotatorDataWriter_ptr _ptr_type;
      typedef RotatorDataWriter_var _var_type;

      static RotatorDataWriter_ptr _duplicate (RotatorDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static RotatorDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static RotatorDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static RotatorDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      RotatorDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const Rotator& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const Rotator& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const Rotator& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const Rotator& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const Rotator& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const Rotator& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const Rotator& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const Rotator& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const Rotator& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const Rotator& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (Rotator& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Rotator& instance_data) = 0;

   protected:
      RotatorDataWriter () {};
      ~RotatorDataWriter () {};
   private:
      RotatorDataWriter (const RotatorDataWriter &);
      RotatorDataWriter & operator = (const RotatorDataWriter &);
   };

   class RotatorDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef RotatorDataReader_ptr _ptr_type;
      typedef RotatorDataReader_var _var_type;

      static RotatorDataReader_ptr _duplicate (RotatorDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static RotatorDataReader_ptr _narrow (DDS::Object_ptr obj);
      static RotatorDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static RotatorDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      RotatorDataReader_ptr _this () { return this; }

      virtual DDS::Long read (RotatorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (RotatorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (RotatorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (RotatorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (Rotator& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (Rotator& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (RotatorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (RotatorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (RotatorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (RotatorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (RotatorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (RotatorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (RotatorSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (Rotator& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Rotator& instance) = 0;

   protected:
      RotatorDataReader () {};
      ~RotatorDataReader () {};
   private:
      RotatorDataReader (const RotatorDataReader &);
      RotatorDataReader & operator = (const RotatorDataReader &);
   };

   class RotatorDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef RotatorDataReaderView_ptr _ptr_type;
      typedef RotatorDataReaderView_var _var_type;

      static RotatorDataReaderView_ptr _duplicate (RotatorDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static RotatorDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static RotatorDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static RotatorDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      RotatorDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (RotatorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (RotatorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (RotatorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (RotatorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (Rotator& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (Rotator& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (RotatorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (RotatorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (RotatorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (RotatorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (RotatorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (RotatorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (RotatorSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (Rotator& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Rotator& instance) = 0;

   protected:
      RotatorDataReaderView () {};
      ~RotatorDataReaderView () {};
   private:
      RotatorDataReaderView (const RotatorDataReaderView &);
      RotatorDataReaderView & operator = (const RotatorDataReaderView &);
   };

   struct TCSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < TC, struct TCSeq_uniq_> TCSeq;
   typedef DDS_DCPSSequence_var < TCSeq> TCSeq_var;
   typedef DDS_DCPSSequence_out < TCSeq> TCSeq_out;
   class TCTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef TCTypeSupportInterface_ptr _ptr_type;
      typedef TCTypeSupportInterface_var _var_type;

      static TCTypeSupportInterface_ptr _duplicate (TCTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static TCTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static TCTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static TCTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      TCTypeSupportInterface_ptr _this () { return this; }


   protected:
      TCTypeSupportInterface () {};
      ~TCTypeSupportInterface () {};
   private:
      TCTypeSupportInterface (const TCTypeSupportInterface &);
      TCTypeSupportInterface & operator = (const TCTypeSupportInterface &);
   };

   class TCDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef TCDataWriter_ptr _ptr_type;
      typedef TCDataWriter_var _var_type;

      static TCDataWriter_ptr _duplicate (TCDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static TCDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static TCDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static TCDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      TCDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const TC& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const TC& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const TC& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const TC& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const TC& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const TC& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const TC& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const TC& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const TC& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const TC& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (TC& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const TC& instance_data) = 0;

   protected:
      TCDataWriter () {};
      ~TCDataWriter () {};
   private:
      TCDataWriter (const TCDataWriter &);
      TCDataWriter & operator = (const TCDataWriter &);
   };

   class TCDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef TCDataReader_ptr _ptr_type;
      typedef TCDataReader_var _var_type;

      static TCDataReader_ptr _duplicate (TCDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static TCDataReader_ptr _narrow (DDS::Object_ptr obj);
      static TCDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static TCDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      TCDataReader_ptr _this () { return this; }

      virtual DDS::Long read (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (TC& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (TC& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (TCSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (TC& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const TC& instance) = 0;

   protected:
      TCDataReader () {};
      ~TCDataReader () {};
   private:
      TCDataReader (const TCDataReader &);
      TCDataReader & operator = (const TCDataReader &);
   };

   class TCDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef TCDataReaderView_ptr _ptr_type;
      typedef TCDataReaderView_var _var_type;

      static TCDataReaderView_ptr _duplicate (TCDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static TCDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static TCDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static TCDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      TCDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (TC& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (TC& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (TCSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (TC& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const TC& instance) = 0;

   protected:
      TCDataReaderView () {};
      ~TCDataReaderView () {};
   private:
      TCDataReaderView (const TCDataReaderView &);
      TCDataReaderView & operator = (const TCDataReaderView &);
   };

   struct command_configureSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < command_configure, struct command_configureSeq_uniq_> command_configureSeq;
   typedef DDS_DCPSSequence_var < command_configureSeq> command_configureSeq_var;
   typedef DDS_DCPSSequence_out < command_configureSeq> command_configureSeq_out;
   class command_configureTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef command_configureTypeSupportInterface_ptr _ptr_type;
      typedef command_configureTypeSupportInterface_var _var_type;

      static command_configureTypeSupportInterface_ptr _duplicate (command_configureTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_configureTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static command_configureTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_configureTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      command_configureTypeSupportInterface_ptr _this () { return this; }


   protected:
      command_configureTypeSupportInterface () {};
      ~command_configureTypeSupportInterface () {};
   private:
      command_configureTypeSupportInterface (const command_configureTypeSupportInterface &);
      command_configureTypeSupportInterface & operator = (const command_configureTypeSupportInterface &);
   };

   class command_configureDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef command_configureDataWriter_ptr _ptr_type;
      typedef command_configureDataWriter_var _var_type;

      static command_configureDataWriter_ptr _duplicate (command_configureDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_configureDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static command_configureDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_configureDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      command_configureDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const command_configure& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const command_configure& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const command_configure& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const command_configure& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const command_configure& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const command_configure& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const command_configure& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const command_configure& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const command_configure& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const command_configure& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (command_configure& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_configure& instance_data) = 0;

   protected:
      command_configureDataWriter () {};
      ~command_configureDataWriter () {};
   private:
      command_configureDataWriter (const command_configureDataWriter &);
      command_configureDataWriter & operator = (const command_configureDataWriter &);
   };

   class command_configureDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef command_configureDataReader_ptr _ptr_type;
      typedef command_configureDataReader_var _var_type;

      static command_configureDataReader_ptr _duplicate (command_configureDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_configureDataReader_ptr _narrow (DDS::Object_ptr obj);
      static command_configureDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_configureDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      command_configureDataReader_ptr _this () { return this; }

      virtual DDS::Long read (command_configureSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_configureSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_configureSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_configureSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_configure& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_configure& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_configureSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_configureSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_configureSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_configureSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_configureSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_configureSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_configureSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_configure& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_configure& instance) = 0;

   protected:
      command_configureDataReader () {};
      ~command_configureDataReader () {};
   private:
      command_configureDataReader (const command_configureDataReader &);
      command_configureDataReader & operator = (const command_configureDataReader &);
   };

   class command_configureDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef command_configureDataReaderView_ptr _ptr_type;
      typedef command_configureDataReaderView_var _var_type;

      static command_configureDataReaderView_ptr _duplicate (command_configureDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_configureDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static command_configureDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_configureDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      command_configureDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (command_configureSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_configureSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_configureSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_configureSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_configure& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_configure& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_configureSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_configureSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_configureSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_configureSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_configureSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_configureSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_configureSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_configure& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_configure& instance) = 0;

   protected:
      command_configureDataReaderView () {};
      ~command_configureDataReaderView () {};
   private:
      command_configureDataReaderView (const command_configureDataReaderView &);
      command_configureDataReaderView & operator = (const command_configureDataReaderView &);
   };

   struct command_moveCamWrapSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < command_moveCamWrap, struct command_moveCamWrapSeq_uniq_> command_moveCamWrapSeq;
   typedef DDS_DCPSSequence_var < command_moveCamWrapSeq> command_moveCamWrapSeq_var;
   typedef DDS_DCPSSequence_out < command_moveCamWrapSeq> command_moveCamWrapSeq_out;
   class command_moveCamWrapTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef command_moveCamWrapTypeSupportInterface_ptr _ptr_type;
      typedef command_moveCamWrapTypeSupportInterface_var _var_type;

      static command_moveCamWrapTypeSupportInterface_ptr _duplicate (command_moveCamWrapTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_moveCamWrapTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static command_moveCamWrapTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_moveCamWrapTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      command_moveCamWrapTypeSupportInterface_ptr _this () { return this; }


   protected:
      command_moveCamWrapTypeSupportInterface () {};
      ~command_moveCamWrapTypeSupportInterface () {};
   private:
      command_moveCamWrapTypeSupportInterface (const command_moveCamWrapTypeSupportInterface &);
      command_moveCamWrapTypeSupportInterface & operator = (const command_moveCamWrapTypeSupportInterface &);
   };

   class command_moveCamWrapDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef command_moveCamWrapDataWriter_ptr _ptr_type;
      typedef command_moveCamWrapDataWriter_var _var_type;

      static command_moveCamWrapDataWriter_ptr _duplicate (command_moveCamWrapDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_moveCamWrapDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static command_moveCamWrapDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_moveCamWrapDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      command_moveCamWrapDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const command_moveCamWrap& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const command_moveCamWrap& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const command_moveCamWrap& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const command_moveCamWrap& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const command_moveCamWrap& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const command_moveCamWrap& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const command_moveCamWrap& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const command_moveCamWrap& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const command_moveCamWrap& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const command_moveCamWrap& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (command_moveCamWrap& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_moveCamWrap& instance_data) = 0;

   protected:
      command_moveCamWrapDataWriter () {};
      ~command_moveCamWrapDataWriter () {};
   private:
      command_moveCamWrapDataWriter (const command_moveCamWrapDataWriter &);
      command_moveCamWrapDataWriter & operator = (const command_moveCamWrapDataWriter &);
   };

   class command_moveCamWrapDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef command_moveCamWrapDataReader_ptr _ptr_type;
      typedef command_moveCamWrapDataReader_var _var_type;

      static command_moveCamWrapDataReader_ptr _duplicate (command_moveCamWrapDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_moveCamWrapDataReader_ptr _narrow (DDS::Object_ptr obj);
      static command_moveCamWrapDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_moveCamWrapDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      command_moveCamWrapDataReader_ptr _this () { return this; }

      virtual DDS::Long read (command_moveCamWrapSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_moveCamWrapSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_moveCamWrapSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_moveCamWrapSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_moveCamWrap& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_moveCamWrap& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_moveCamWrapSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_moveCamWrapSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_moveCamWrapSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_moveCamWrapSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_moveCamWrapSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_moveCamWrapSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_moveCamWrapSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_moveCamWrap& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_moveCamWrap& instance) = 0;

   protected:
      command_moveCamWrapDataReader () {};
      ~command_moveCamWrapDataReader () {};
   private:
      command_moveCamWrapDataReader (const command_moveCamWrapDataReader &);
      command_moveCamWrapDataReader & operator = (const command_moveCamWrapDataReader &);
   };

   class command_moveCamWrapDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef command_moveCamWrapDataReaderView_ptr _ptr_type;
      typedef command_moveCamWrapDataReaderView_var _var_type;

      static command_moveCamWrapDataReaderView_ptr _duplicate (command_moveCamWrapDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_moveCamWrapDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static command_moveCamWrapDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_moveCamWrapDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      command_moveCamWrapDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (command_moveCamWrapSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_moveCamWrapSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_moveCamWrapSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_moveCamWrapSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_moveCamWrap& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_moveCamWrap& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_moveCamWrapSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_moveCamWrapSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_moveCamWrapSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_moveCamWrapSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_moveCamWrapSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_moveCamWrapSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_moveCamWrapSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_moveCamWrap& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_moveCamWrap& instance) = 0;

   protected:
      command_moveCamWrapDataReaderView () {};
      ~command_moveCamWrapDataReaderView () {};
   private:
      command_moveCamWrapDataReaderView (const command_moveCamWrapDataReaderView &);
      command_moveCamWrapDataReaderView & operator = (const command_moveCamWrapDataReaderView &);
   };

   struct command_moveMirrorCoverSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < command_moveMirrorCover, struct command_moveMirrorCoverSeq_uniq_> command_moveMirrorCoverSeq;
   typedef DDS_DCPSSequence_var < command_moveMirrorCoverSeq> command_moveMirrorCoverSeq_var;
   typedef DDS_DCPSSequence_out < command_moveMirrorCoverSeq> command_moveMirrorCoverSeq_out;
   class command_moveMirrorCoverTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef command_moveMirrorCoverTypeSupportInterface_ptr _ptr_type;
      typedef command_moveMirrorCoverTypeSupportInterface_var _var_type;

      static command_moveMirrorCoverTypeSupportInterface_ptr _duplicate (command_moveMirrorCoverTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_moveMirrorCoverTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static command_moveMirrorCoverTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_moveMirrorCoverTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      command_moveMirrorCoverTypeSupportInterface_ptr _this () { return this; }


   protected:
      command_moveMirrorCoverTypeSupportInterface () {};
      ~command_moveMirrorCoverTypeSupportInterface () {};
   private:
      command_moveMirrorCoverTypeSupportInterface (const command_moveMirrorCoverTypeSupportInterface &);
      command_moveMirrorCoverTypeSupportInterface & operator = (const command_moveMirrorCoverTypeSupportInterface &);
   };

   class command_moveMirrorCoverDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef command_moveMirrorCoverDataWriter_ptr _ptr_type;
      typedef command_moveMirrorCoverDataWriter_var _var_type;

      static command_moveMirrorCoverDataWriter_ptr _duplicate (command_moveMirrorCoverDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_moveMirrorCoverDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static command_moveMirrorCoverDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_moveMirrorCoverDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      command_moveMirrorCoverDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const command_moveMirrorCover& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const command_moveMirrorCover& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const command_moveMirrorCover& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const command_moveMirrorCover& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const command_moveMirrorCover& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const command_moveMirrorCover& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const command_moveMirrorCover& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const command_moveMirrorCover& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const command_moveMirrorCover& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const command_moveMirrorCover& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (command_moveMirrorCover& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_moveMirrorCover& instance_data) = 0;

   protected:
      command_moveMirrorCoverDataWriter () {};
      ~command_moveMirrorCoverDataWriter () {};
   private:
      command_moveMirrorCoverDataWriter (const command_moveMirrorCoverDataWriter &);
      command_moveMirrorCoverDataWriter & operator = (const command_moveMirrorCoverDataWriter &);
   };

   class command_moveMirrorCoverDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef command_moveMirrorCoverDataReader_ptr _ptr_type;
      typedef command_moveMirrorCoverDataReader_var _var_type;

      static command_moveMirrorCoverDataReader_ptr _duplicate (command_moveMirrorCoverDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_moveMirrorCoverDataReader_ptr _narrow (DDS::Object_ptr obj);
      static command_moveMirrorCoverDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_moveMirrorCoverDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      command_moveMirrorCoverDataReader_ptr _this () { return this; }

      virtual DDS::Long read (command_moveMirrorCoverSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_moveMirrorCoverSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_moveMirrorCoverSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_moveMirrorCoverSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_moveMirrorCover& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_moveMirrorCover& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_moveMirrorCoverSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_moveMirrorCoverSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_moveMirrorCoverSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_moveMirrorCoverSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_moveMirrorCoverSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_moveMirrorCoverSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_moveMirrorCoverSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_moveMirrorCover& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_moveMirrorCover& instance) = 0;

   protected:
      command_moveMirrorCoverDataReader () {};
      ~command_moveMirrorCoverDataReader () {};
   private:
      command_moveMirrorCoverDataReader (const command_moveMirrorCoverDataReader &);
      command_moveMirrorCoverDataReader & operator = (const command_moveMirrorCoverDataReader &);
   };

   class command_moveMirrorCoverDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef command_moveMirrorCoverDataReaderView_ptr _ptr_type;
      typedef command_moveMirrorCoverDataReaderView_var _var_type;

      static command_moveMirrorCoverDataReaderView_ptr _duplicate (command_moveMirrorCoverDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_moveMirrorCoverDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static command_moveMirrorCoverDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_moveMirrorCoverDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      command_moveMirrorCoverDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (command_moveMirrorCoverSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_moveMirrorCoverSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_moveMirrorCoverSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_moveMirrorCoverSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_moveMirrorCover& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_moveMirrorCover& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_moveMirrorCoverSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_moveMirrorCoverSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_moveMirrorCoverSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_moveMirrorCoverSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_moveMirrorCoverSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_moveMirrorCoverSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_moveMirrorCoverSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_moveMirrorCover& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_moveMirrorCover& instance) = 0;

   protected:
      command_moveMirrorCoverDataReaderView () {};
      ~command_moveMirrorCoverDataReaderView () {};
   private:
      command_moveMirrorCoverDataReaderView (const command_moveMirrorCoverDataReaderView &);
      command_moveMirrorCoverDataReaderView & operator = (const command_moveMirrorCoverDataReaderView &);
   };

   struct command_moveToTargetSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < command_moveToTarget, struct command_moveToTargetSeq_uniq_> command_moveToTargetSeq;
   typedef DDS_DCPSSequence_var < command_moveToTargetSeq> command_moveToTargetSeq_var;
   typedef DDS_DCPSSequence_out < command_moveToTargetSeq> command_moveToTargetSeq_out;
   class command_moveToTargetTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef command_moveToTargetTypeSupportInterface_ptr _ptr_type;
      typedef command_moveToTargetTypeSupportInterface_var _var_type;

      static command_moveToTargetTypeSupportInterface_ptr _duplicate (command_moveToTargetTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_moveToTargetTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static command_moveToTargetTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_moveToTargetTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      command_moveToTargetTypeSupportInterface_ptr _this () { return this; }


   protected:
      command_moveToTargetTypeSupportInterface () {};
      ~command_moveToTargetTypeSupportInterface () {};
   private:
      command_moveToTargetTypeSupportInterface (const command_moveToTargetTypeSupportInterface &);
      command_moveToTargetTypeSupportInterface & operator = (const command_moveToTargetTypeSupportInterface &);
   };

   class command_moveToTargetDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef command_moveToTargetDataWriter_ptr _ptr_type;
      typedef command_moveToTargetDataWriter_var _var_type;

      static command_moveToTargetDataWriter_ptr _duplicate (command_moveToTargetDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_moveToTargetDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static command_moveToTargetDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_moveToTargetDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      command_moveToTargetDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const command_moveToTarget& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const command_moveToTarget& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const command_moveToTarget& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const command_moveToTarget& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const command_moveToTarget& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const command_moveToTarget& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const command_moveToTarget& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const command_moveToTarget& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const command_moveToTarget& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const command_moveToTarget& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (command_moveToTarget& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_moveToTarget& instance_data) = 0;

   protected:
      command_moveToTargetDataWriter () {};
      ~command_moveToTargetDataWriter () {};
   private:
      command_moveToTargetDataWriter (const command_moveToTargetDataWriter &);
      command_moveToTargetDataWriter & operator = (const command_moveToTargetDataWriter &);
   };

   class command_moveToTargetDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef command_moveToTargetDataReader_ptr _ptr_type;
      typedef command_moveToTargetDataReader_var _var_type;

      static command_moveToTargetDataReader_ptr _duplicate (command_moveToTargetDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_moveToTargetDataReader_ptr _narrow (DDS::Object_ptr obj);
      static command_moveToTargetDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_moveToTargetDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      command_moveToTargetDataReader_ptr _this () { return this; }

      virtual DDS::Long read (command_moveToTargetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_moveToTargetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_moveToTargetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_moveToTargetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_moveToTarget& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_moveToTarget& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_moveToTargetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_moveToTargetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_moveToTargetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_moveToTargetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_moveToTargetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_moveToTargetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_moveToTargetSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_moveToTarget& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_moveToTarget& instance) = 0;

   protected:
      command_moveToTargetDataReader () {};
      ~command_moveToTargetDataReader () {};
   private:
      command_moveToTargetDataReader (const command_moveToTargetDataReader &);
      command_moveToTargetDataReader & operator = (const command_moveToTargetDataReader &);
   };

   class command_moveToTargetDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef command_moveToTargetDataReaderView_ptr _ptr_type;
      typedef command_moveToTargetDataReaderView_var _var_type;

      static command_moveToTargetDataReaderView_ptr _duplicate (command_moveToTargetDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_moveToTargetDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static command_moveToTargetDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_moveToTargetDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      command_moveToTargetDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (command_moveToTargetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_moveToTargetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_moveToTargetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_moveToTargetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_moveToTarget& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_moveToTarget& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_moveToTargetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_moveToTargetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_moveToTargetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_moveToTargetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_moveToTargetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_moveToTargetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_moveToTargetSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_moveToTarget& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_moveToTarget& instance) = 0;

   protected:
      command_moveToTargetDataReaderView () {};
      ~command_moveToTargetDataReaderView () {};
   private:
      command_moveToTargetDataReaderView (const command_moveToTargetDataReaderView &);
      command_moveToTargetDataReaderView & operator = (const command_moveToTargetDataReaderView &);
   };

   struct command_testSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < command_test, struct command_testSeq_uniq_> command_testSeq;
   typedef DDS_DCPSSequence_var < command_testSeq> command_testSeq_var;
   typedef DDS_DCPSSequence_out < command_testSeq> command_testSeq_out;
   class command_testTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef command_testTypeSupportInterface_ptr _ptr_type;
      typedef command_testTypeSupportInterface_var _var_type;

      static command_testTypeSupportInterface_ptr _duplicate (command_testTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_testTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static command_testTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_testTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      command_testTypeSupportInterface_ptr _this () { return this; }


   protected:
      command_testTypeSupportInterface () {};
      ~command_testTypeSupportInterface () {};
   private:
      command_testTypeSupportInterface (const command_testTypeSupportInterface &);
      command_testTypeSupportInterface & operator = (const command_testTypeSupportInterface &);
   };

   class command_testDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef command_testDataWriter_ptr _ptr_type;
      typedef command_testDataWriter_var _var_type;

      static command_testDataWriter_ptr _duplicate (command_testDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_testDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static command_testDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_testDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      command_testDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const command_test& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const command_test& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const command_test& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const command_test& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const command_test& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const command_test& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const command_test& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const command_test& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const command_test& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const command_test& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (command_test& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_test& instance_data) = 0;

   protected:
      command_testDataWriter () {};
      ~command_testDataWriter () {};
   private:
      command_testDataWriter (const command_testDataWriter &);
      command_testDataWriter & operator = (const command_testDataWriter &);
   };

   class command_testDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef command_testDataReader_ptr _ptr_type;
      typedef command_testDataReader_var _var_type;

      static command_testDataReader_ptr _duplicate (command_testDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_testDataReader_ptr _narrow (DDS::Object_ptr obj);
      static command_testDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_testDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      command_testDataReader_ptr _this () { return this; }

      virtual DDS::Long read (command_testSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_testSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_testSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_testSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_test& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_test& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_testSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_testSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_testSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_testSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_testSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_testSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_testSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_test& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_test& instance) = 0;

   protected:
      command_testDataReader () {};
      ~command_testDataReader () {};
   private:
      command_testDataReader (const command_testDataReader &);
      command_testDataReader & operator = (const command_testDataReader &);
   };

   class command_testDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef command_testDataReaderView_ptr _ptr_type;
      typedef command_testDataReaderView_var _var_type;

      static command_testDataReaderView_ptr _duplicate (command_testDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_testDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static command_testDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_testDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      command_testDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (command_testSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_testSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_testSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_testSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_test& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_test& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_testSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_testSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_testSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_testSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_testSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_testSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_testSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_test& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_test& instance) = 0;

   protected:
      command_testDataReaderView () {};
      ~command_testDataReaderView () {};
   private:
      command_testDataReaderView (const command_testDataReaderView &);
      command_testDataReaderView & operator = (const command_testDataReaderView &);
   };

   struct logevent_accLimitSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < logevent_accLimit, struct logevent_accLimitSeq_uniq_> logevent_accLimitSeq;
   typedef DDS_DCPSSequence_var < logevent_accLimitSeq> logevent_accLimitSeq_var;
   typedef DDS_DCPSSequence_out < logevent_accLimitSeq> logevent_accLimitSeq_out;
   class logevent_accLimitTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef logevent_accLimitTypeSupportInterface_ptr _ptr_type;
      typedef logevent_accLimitTypeSupportInterface_var _var_type;

      static logevent_accLimitTypeSupportInterface_ptr _duplicate (logevent_accLimitTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_accLimitTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static logevent_accLimitTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_accLimitTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_accLimitTypeSupportInterface_ptr _this () { return this; }


   protected:
      logevent_accLimitTypeSupportInterface () {};
      ~logevent_accLimitTypeSupportInterface () {};
   private:
      logevent_accLimitTypeSupportInterface (const logevent_accLimitTypeSupportInterface &);
      logevent_accLimitTypeSupportInterface & operator = (const logevent_accLimitTypeSupportInterface &);
   };

   class logevent_accLimitDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef logevent_accLimitDataWriter_ptr _ptr_type;
      typedef logevent_accLimitDataWriter_var _var_type;

      static logevent_accLimitDataWriter_ptr _duplicate (logevent_accLimitDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_accLimitDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static logevent_accLimitDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_accLimitDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_accLimitDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const logevent_accLimit& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const logevent_accLimit& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const logevent_accLimit& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const logevent_accLimit& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const logevent_accLimit& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const logevent_accLimit& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const logevent_accLimit& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const logevent_accLimit& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const logevent_accLimit& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const logevent_accLimit& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (logevent_accLimit& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_accLimit& instance_data) = 0;

   protected:
      logevent_accLimitDataWriter () {};
      ~logevent_accLimitDataWriter () {};
   private:
      logevent_accLimitDataWriter (const logevent_accLimitDataWriter &);
      logevent_accLimitDataWriter & operator = (const logevent_accLimitDataWriter &);
   };

   class logevent_accLimitDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef logevent_accLimitDataReader_ptr _ptr_type;
      typedef logevent_accLimitDataReader_var _var_type;

      static logevent_accLimitDataReader_ptr _duplicate (logevent_accLimitDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_accLimitDataReader_ptr _narrow (DDS::Object_ptr obj);
      static logevent_accLimitDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_accLimitDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_accLimitDataReader_ptr _this () { return this; }

      virtual DDS::Long read (logevent_accLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_accLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_accLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_accLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_accLimit& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_accLimit& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_accLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_accLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_accLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_accLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_accLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_accLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_accLimitSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_accLimit& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_accLimit& instance) = 0;

   protected:
      logevent_accLimitDataReader () {};
      ~logevent_accLimitDataReader () {};
   private:
      logevent_accLimitDataReader (const logevent_accLimitDataReader &);
      logevent_accLimitDataReader & operator = (const logevent_accLimitDataReader &);
   };

   class logevent_accLimitDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef logevent_accLimitDataReaderView_ptr _ptr_type;
      typedef logevent_accLimitDataReaderView_var _var_type;

      static logevent_accLimitDataReaderView_ptr _duplicate (logevent_accLimitDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_accLimitDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static logevent_accLimitDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_accLimitDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_accLimitDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (logevent_accLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_accLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_accLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_accLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_accLimit& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_accLimit& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_accLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_accLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_accLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_accLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_accLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_accLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_accLimitSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_accLimit& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_accLimit& instance) = 0;

   protected:
      logevent_accLimitDataReaderView () {};
      ~logevent_accLimitDataReaderView () {};
   private:
      logevent_accLimitDataReaderView (const logevent_accLimitDataReaderView &);
      logevent_accLimitDataReaderView & operator = (const logevent_accLimitDataReaderView &);
   };

   struct logevent_altLimitSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < logevent_altLimit, struct logevent_altLimitSeq_uniq_> logevent_altLimitSeq;
   typedef DDS_DCPSSequence_var < logevent_altLimitSeq> logevent_altLimitSeq_var;
   typedef DDS_DCPSSequence_out < logevent_altLimitSeq> logevent_altLimitSeq_out;
   class logevent_altLimitTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef logevent_altLimitTypeSupportInterface_ptr _ptr_type;
      typedef logevent_altLimitTypeSupportInterface_var _var_type;

      static logevent_altLimitTypeSupportInterface_ptr _duplicate (logevent_altLimitTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_altLimitTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static logevent_altLimitTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_altLimitTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_altLimitTypeSupportInterface_ptr _this () { return this; }


   protected:
      logevent_altLimitTypeSupportInterface () {};
      ~logevent_altLimitTypeSupportInterface () {};
   private:
      logevent_altLimitTypeSupportInterface (const logevent_altLimitTypeSupportInterface &);
      logevent_altLimitTypeSupportInterface & operator = (const logevent_altLimitTypeSupportInterface &);
   };

   class logevent_altLimitDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef logevent_altLimitDataWriter_ptr _ptr_type;
      typedef logevent_altLimitDataWriter_var _var_type;

      static logevent_altLimitDataWriter_ptr _duplicate (logevent_altLimitDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_altLimitDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static logevent_altLimitDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_altLimitDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_altLimitDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const logevent_altLimit& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const logevent_altLimit& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const logevent_altLimit& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const logevent_altLimit& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const logevent_altLimit& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const logevent_altLimit& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const logevent_altLimit& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const logevent_altLimit& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const logevent_altLimit& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const logevent_altLimit& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (logevent_altLimit& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_altLimit& instance_data) = 0;

   protected:
      logevent_altLimitDataWriter () {};
      ~logevent_altLimitDataWriter () {};
   private:
      logevent_altLimitDataWriter (const logevent_altLimitDataWriter &);
      logevent_altLimitDataWriter & operator = (const logevent_altLimitDataWriter &);
   };

   class logevent_altLimitDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef logevent_altLimitDataReader_ptr _ptr_type;
      typedef logevent_altLimitDataReader_var _var_type;

      static logevent_altLimitDataReader_ptr _duplicate (logevent_altLimitDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_altLimitDataReader_ptr _narrow (DDS::Object_ptr obj);
      static logevent_altLimitDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_altLimitDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_altLimitDataReader_ptr _this () { return this; }

      virtual DDS::Long read (logevent_altLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_altLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_altLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_altLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_altLimit& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_altLimit& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_altLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_altLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_altLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_altLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_altLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_altLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_altLimitSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_altLimit& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_altLimit& instance) = 0;

   protected:
      logevent_altLimitDataReader () {};
      ~logevent_altLimitDataReader () {};
   private:
      logevent_altLimitDataReader (const logevent_altLimitDataReader &);
      logevent_altLimitDataReader & operator = (const logevent_altLimitDataReader &);
   };

   class logevent_altLimitDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef logevent_altLimitDataReaderView_ptr _ptr_type;
      typedef logevent_altLimitDataReaderView_var _var_type;

      static logevent_altLimitDataReaderView_ptr _duplicate (logevent_altLimitDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_altLimitDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static logevent_altLimitDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_altLimitDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_altLimitDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (logevent_altLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_altLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_altLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_altLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_altLimit& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_altLimit& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_altLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_altLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_altLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_altLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_altLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_altLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_altLimitSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_altLimit& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_altLimit& instance) = 0;

   protected:
      logevent_altLimitDataReaderView () {};
      ~logevent_altLimitDataReaderView () {};
   private:
      logevent_altLimitDataReaderView (const logevent_altLimitDataReaderView &);
      logevent_altLimitDataReaderView & operator = (const logevent_altLimitDataReaderView &);
   };

   struct logevent_interlockSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < logevent_interlock, struct logevent_interlockSeq_uniq_> logevent_interlockSeq;
   typedef DDS_DCPSSequence_var < logevent_interlockSeq> logevent_interlockSeq_var;
   typedef DDS_DCPSSequence_out < logevent_interlockSeq> logevent_interlockSeq_out;
   class logevent_interlockTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef logevent_interlockTypeSupportInterface_ptr _ptr_type;
      typedef logevent_interlockTypeSupportInterface_var _var_type;

      static logevent_interlockTypeSupportInterface_ptr _duplicate (logevent_interlockTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_interlockTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static logevent_interlockTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_interlockTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_interlockTypeSupportInterface_ptr _this () { return this; }


   protected:
      logevent_interlockTypeSupportInterface () {};
      ~logevent_interlockTypeSupportInterface () {};
   private:
      logevent_interlockTypeSupportInterface (const logevent_interlockTypeSupportInterface &);
      logevent_interlockTypeSupportInterface & operator = (const logevent_interlockTypeSupportInterface &);
   };

   class logevent_interlockDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef logevent_interlockDataWriter_ptr _ptr_type;
      typedef logevent_interlockDataWriter_var _var_type;

      static logevent_interlockDataWriter_ptr _duplicate (logevent_interlockDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_interlockDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static logevent_interlockDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_interlockDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_interlockDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const logevent_interlock& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const logevent_interlock& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const logevent_interlock& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const logevent_interlock& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const logevent_interlock& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const logevent_interlock& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const logevent_interlock& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const logevent_interlock& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const logevent_interlock& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const logevent_interlock& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (logevent_interlock& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_interlock& instance_data) = 0;

   protected:
      logevent_interlockDataWriter () {};
      ~logevent_interlockDataWriter () {};
   private:
      logevent_interlockDataWriter (const logevent_interlockDataWriter &);
      logevent_interlockDataWriter & operator = (const logevent_interlockDataWriter &);
   };

   class logevent_interlockDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef logevent_interlockDataReader_ptr _ptr_type;
      typedef logevent_interlockDataReader_var _var_type;

      static logevent_interlockDataReader_ptr _duplicate (logevent_interlockDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_interlockDataReader_ptr _narrow (DDS::Object_ptr obj);
      static logevent_interlockDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_interlockDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_interlockDataReader_ptr _this () { return this; }

      virtual DDS::Long read (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_interlock& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_interlock& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_interlock& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_interlock& instance) = 0;

   protected:
      logevent_interlockDataReader () {};
      ~logevent_interlockDataReader () {};
   private:
      logevent_interlockDataReader (const logevent_interlockDataReader &);
      logevent_interlockDataReader & operator = (const logevent_interlockDataReader &);
   };

   class logevent_interlockDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef logevent_interlockDataReaderView_ptr _ptr_type;
      typedef logevent_interlockDataReaderView_var _var_type;

      static logevent_interlockDataReaderView_ptr _duplicate (logevent_interlockDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_interlockDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static logevent_interlockDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_interlockDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_interlockDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_interlock& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_interlock& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_interlock& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_interlock& instance) = 0;

   protected:
      logevent_interlockDataReaderView () {};
      ~logevent_interlockDataReaderView () {};
   private:
      logevent_interlockDataReaderView (const logevent_interlockDataReaderView &);
      logevent_interlockDataReaderView & operator = (const logevent_interlockDataReaderView &);
   };

   struct logevent_powerErrorSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < logevent_powerError, struct logevent_powerErrorSeq_uniq_> logevent_powerErrorSeq;
   typedef DDS_DCPSSequence_var < logevent_powerErrorSeq> logevent_powerErrorSeq_var;
   typedef DDS_DCPSSequence_out < logevent_powerErrorSeq> logevent_powerErrorSeq_out;
   class logevent_powerErrorTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef logevent_powerErrorTypeSupportInterface_ptr _ptr_type;
      typedef logevent_powerErrorTypeSupportInterface_var _var_type;

      static logevent_powerErrorTypeSupportInterface_ptr _duplicate (logevent_powerErrorTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_powerErrorTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static logevent_powerErrorTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_powerErrorTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_powerErrorTypeSupportInterface_ptr _this () { return this; }


   protected:
      logevent_powerErrorTypeSupportInterface () {};
      ~logevent_powerErrorTypeSupportInterface () {};
   private:
      logevent_powerErrorTypeSupportInterface (const logevent_powerErrorTypeSupportInterface &);
      logevent_powerErrorTypeSupportInterface & operator = (const logevent_powerErrorTypeSupportInterface &);
   };

   class logevent_powerErrorDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef logevent_powerErrorDataWriter_ptr _ptr_type;
      typedef logevent_powerErrorDataWriter_var _var_type;

      static logevent_powerErrorDataWriter_ptr _duplicate (logevent_powerErrorDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_powerErrorDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static logevent_powerErrorDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_powerErrorDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_powerErrorDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const logevent_powerError& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const logevent_powerError& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const logevent_powerError& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const logevent_powerError& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const logevent_powerError& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const logevent_powerError& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const logevent_powerError& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const logevent_powerError& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const logevent_powerError& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const logevent_powerError& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (logevent_powerError& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_powerError& instance_data) = 0;

   protected:
      logevent_powerErrorDataWriter () {};
      ~logevent_powerErrorDataWriter () {};
   private:
      logevent_powerErrorDataWriter (const logevent_powerErrorDataWriter &);
      logevent_powerErrorDataWriter & operator = (const logevent_powerErrorDataWriter &);
   };

   class logevent_powerErrorDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef logevent_powerErrorDataReader_ptr _ptr_type;
      typedef logevent_powerErrorDataReader_var _var_type;

      static logevent_powerErrorDataReader_ptr _duplicate (logevent_powerErrorDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_powerErrorDataReader_ptr _narrow (DDS::Object_ptr obj);
      static logevent_powerErrorDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_powerErrorDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_powerErrorDataReader_ptr _this () { return this; }

      virtual DDS::Long read (logevent_powerErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_powerErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_powerErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_powerErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_powerError& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_powerError& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_powerErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_powerErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_powerErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_powerErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_powerErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_powerErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_powerErrorSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_powerError& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_powerError& instance) = 0;

   protected:
      logevent_powerErrorDataReader () {};
      ~logevent_powerErrorDataReader () {};
   private:
      logevent_powerErrorDataReader (const logevent_powerErrorDataReader &);
      logevent_powerErrorDataReader & operator = (const logevent_powerErrorDataReader &);
   };

   class logevent_powerErrorDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef logevent_powerErrorDataReaderView_ptr _ptr_type;
      typedef logevent_powerErrorDataReaderView_var _var_type;

      static logevent_powerErrorDataReaderView_ptr _duplicate (logevent_powerErrorDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_powerErrorDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static logevent_powerErrorDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_powerErrorDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_powerErrorDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (logevent_powerErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_powerErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_powerErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_powerErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_powerError& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_powerError& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_powerErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_powerErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_powerErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_powerErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_powerErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_powerErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_powerErrorSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_powerError& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_powerError& instance) = 0;

   protected:
      logevent_powerErrorDataReaderView () {};
      ~logevent_powerErrorDataReaderView () {};
   private:
      logevent_powerErrorDataReaderView (const logevent_powerErrorDataReaderView &);
      logevent_powerErrorDataReaderView & operator = (const logevent_powerErrorDataReaderView &);
   };

   struct logevent_slewErrorSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < logevent_slewError, struct logevent_slewErrorSeq_uniq_> logevent_slewErrorSeq;
   typedef DDS_DCPSSequence_var < logevent_slewErrorSeq> logevent_slewErrorSeq_var;
   typedef DDS_DCPSSequence_out < logevent_slewErrorSeq> logevent_slewErrorSeq_out;
   class logevent_slewErrorTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef logevent_slewErrorTypeSupportInterface_ptr _ptr_type;
      typedef logevent_slewErrorTypeSupportInterface_var _var_type;

      static logevent_slewErrorTypeSupportInterface_ptr _duplicate (logevent_slewErrorTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_slewErrorTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static logevent_slewErrorTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_slewErrorTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_slewErrorTypeSupportInterface_ptr _this () { return this; }


   protected:
      logevent_slewErrorTypeSupportInterface () {};
      ~logevent_slewErrorTypeSupportInterface () {};
   private:
      logevent_slewErrorTypeSupportInterface (const logevent_slewErrorTypeSupportInterface &);
      logevent_slewErrorTypeSupportInterface & operator = (const logevent_slewErrorTypeSupportInterface &);
   };

   class logevent_slewErrorDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef logevent_slewErrorDataWriter_ptr _ptr_type;
      typedef logevent_slewErrorDataWriter_var _var_type;

      static logevent_slewErrorDataWriter_ptr _duplicate (logevent_slewErrorDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_slewErrorDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static logevent_slewErrorDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_slewErrorDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_slewErrorDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const logevent_slewError& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const logevent_slewError& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const logevent_slewError& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const logevent_slewError& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const logevent_slewError& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const logevent_slewError& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const logevent_slewError& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const logevent_slewError& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const logevent_slewError& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const logevent_slewError& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (logevent_slewError& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_slewError& instance_data) = 0;

   protected:
      logevent_slewErrorDataWriter () {};
      ~logevent_slewErrorDataWriter () {};
   private:
      logevent_slewErrorDataWriter (const logevent_slewErrorDataWriter &);
      logevent_slewErrorDataWriter & operator = (const logevent_slewErrorDataWriter &);
   };

   class logevent_slewErrorDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef logevent_slewErrorDataReader_ptr _ptr_type;
      typedef logevent_slewErrorDataReader_var _var_type;

      static logevent_slewErrorDataReader_ptr _duplicate (logevent_slewErrorDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_slewErrorDataReader_ptr _narrow (DDS::Object_ptr obj);
      static logevent_slewErrorDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_slewErrorDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_slewErrorDataReader_ptr _this () { return this; }

      virtual DDS::Long read (logevent_slewErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_slewErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_slewErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_slewErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_slewError& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_slewError& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_slewErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_slewErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_slewErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_slewErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_slewErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_slewErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_slewErrorSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_slewError& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_slewError& instance) = 0;

   protected:
      logevent_slewErrorDataReader () {};
      ~logevent_slewErrorDataReader () {};
   private:
      logevent_slewErrorDataReader (const logevent_slewErrorDataReader &);
      logevent_slewErrorDataReader & operator = (const logevent_slewErrorDataReader &);
   };

   class logevent_slewErrorDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef logevent_slewErrorDataReaderView_ptr _ptr_type;
      typedef logevent_slewErrorDataReaderView_var _var_type;

      static logevent_slewErrorDataReaderView_ptr _duplicate (logevent_slewErrorDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_slewErrorDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static logevent_slewErrorDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_slewErrorDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_slewErrorDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (logevent_slewErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_slewErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_slewErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_slewErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_slewError& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_slewError& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_slewErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_slewErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_slewErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_slewErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_slewErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_slewErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_slewErrorSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_slewError& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_slewError& instance) = 0;

   protected:
      logevent_slewErrorDataReaderView () {};
      ~logevent_slewErrorDataReaderView () {};
   private:
      logevent_slewErrorDataReaderView (const logevent_slewErrorDataReaderView &);
      logevent_slewErrorDataReaderView & operator = (const logevent_slewErrorDataReaderView &);
   };

   struct logevent_slewOKSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < logevent_slewOK, struct logevent_slewOKSeq_uniq_> logevent_slewOKSeq;
   typedef DDS_DCPSSequence_var < logevent_slewOKSeq> logevent_slewOKSeq_var;
   typedef DDS_DCPSSequence_out < logevent_slewOKSeq> logevent_slewOKSeq_out;
   class logevent_slewOKTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef logevent_slewOKTypeSupportInterface_ptr _ptr_type;
      typedef logevent_slewOKTypeSupportInterface_var _var_type;

      static logevent_slewOKTypeSupportInterface_ptr _duplicate (logevent_slewOKTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_slewOKTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static logevent_slewOKTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_slewOKTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_slewOKTypeSupportInterface_ptr _this () { return this; }


   protected:
      logevent_slewOKTypeSupportInterface () {};
      ~logevent_slewOKTypeSupportInterface () {};
   private:
      logevent_slewOKTypeSupportInterface (const logevent_slewOKTypeSupportInterface &);
      logevent_slewOKTypeSupportInterface & operator = (const logevent_slewOKTypeSupportInterface &);
   };

   class logevent_slewOKDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef logevent_slewOKDataWriter_ptr _ptr_type;
      typedef logevent_slewOKDataWriter_var _var_type;

      static logevent_slewOKDataWriter_ptr _duplicate (logevent_slewOKDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_slewOKDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static logevent_slewOKDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_slewOKDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_slewOKDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const logevent_slewOK& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const logevent_slewOK& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const logevent_slewOK& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const logevent_slewOK& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const logevent_slewOK& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const logevent_slewOK& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const logevent_slewOK& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const logevent_slewOK& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const logevent_slewOK& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const logevent_slewOK& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (logevent_slewOK& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_slewOK& instance_data) = 0;

   protected:
      logevent_slewOKDataWriter () {};
      ~logevent_slewOKDataWriter () {};
   private:
      logevent_slewOKDataWriter (const logevent_slewOKDataWriter &);
      logevent_slewOKDataWriter & operator = (const logevent_slewOKDataWriter &);
   };

   class logevent_slewOKDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef logevent_slewOKDataReader_ptr _ptr_type;
      typedef logevent_slewOKDataReader_var _var_type;

      static logevent_slewOKDataReader_ptr _duplicate (logevent_slewOKDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_slewOKDataReader_ptr _narrow (DDS::Object_ptr obj);
      static logevent_slewOKDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_slewOKDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_slewOKDataReader_ptr _this () { return this; }

      virtual DDS::Long read (logevent_slewOKSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_slewOKSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_slewOKSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_slewOKSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_slewOK& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_slewOK& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_slewOKSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_slewOKSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_slewOKSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_slewOKSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_slewOKSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_slewOKSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_slewOKSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_slewOK& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_slewOK& instance) = 0;

   protected:
      logevent_slewOKDataReader () {};
      ~logevent_slewOKDataReader () {};
   private:
      logevent_slewOKDataReader (const logevent_slewOKDataReader &);
      logevent_slewOKDataReader & operator = (const logevent_slewOKDataReader &);
   };

   class logevent_slewOKDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef logevent_slewOKDataReaderView_ptr _ptr_type;
      typedef logevent_slewOKDataReaderView_var _var_type;

      static logevent_slewOKDataReaderView_ptr _duplicate (logevent_slewOKDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_slewOKDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static logevent_slewOKDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_slewOKDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_slewOKDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (logevent_slewOKSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_slewOKSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_slewOKSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_slewOKSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_slewOK& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_slewOK& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_slewOKSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_slewOKSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_slewOKSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_slewOKSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_slewOKSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_slewOKSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_slewOKSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_slewOK& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_slewOK& instance) = 0;

   protected:
      logevent_slewOKDataReaderView () {};
      ~logevent_slewOKDataReaderView () {};
   private:
      logevent_slewOKDataReaderView (const logevent_slewOKDataReaderView &);
      logevent_slewOKDataReaderView & operator = (const logevent_slewOKDataReaderView &);
   };

   struct logevent_slewReadySeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < logevent_slewReady, struct logevent_slewReadySeq_uniq_> logevent_slewReadySeq;
   typedef DDS_DCPSSequence_var < logevent_slewReadySeq> logevent_slewReadySeq_var;
   typedef DDS_DCPSSequence_out < logevent_slewReadySeq> logevent_slewReadySeq_out;
   class logevent_slewReadyTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef logevent_slewReadyTypeSupportInterface_ptr _ptr_type;
      typedef logevent_slewReadyTypeSupportInterface_var _var_type;

      static logevent_slewReadyTypeSupportInterface_ptr _duplicate (logevent_slewReadyTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_slewReadyTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static logevent_slewReadyTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_slewReadyTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_slewReadyTypeSupportInterface_ptr _this () { return this; }


   protected:
      logevent_slewReadyTypeSupportInterface () {};
      ~logevent_slewReadyTypeSupportInterface () {};
   private:
      logevent_slewReadyTypeSupportInterface (const logevent_slewReadyTypeSupportInterface &);
      logevent_slewReadyTypeSupportInterface & operator = (const logevent_slewReadyTypeSupportInterface &);
   };

   class logevent_slewReadyDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef logevent_slewReadyDataWriter_ptr _ptr_type;
      typedef logevent_slewReadyDataWriter_var _var_type;

      static logevent_slewReadyDataWriter_ptr _duplicate (logevent_slewReadyDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_slewReadyDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static logevent_slewReadyDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_slewReadyDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_slewReadyDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const logevent_slewReady& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const logevent_slewReady& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const logevent_slewReady& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const logevent_slewReady& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const logevent_slewReady& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const logevent_slewReady& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const logevent_slewReady& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const logevent_slewReady& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const logevent_slewReady& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const logevent_slewReady& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (logevent_slewReady& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_slewReady& instance_data) = 0;

   protected:
      logevent_slewReadyDataWriter () {};
      ~logevent_slewReadyDataWriter () {};
   private:
      logevent_slewReadyDataWriter (const logevent_slewReadyDataWriter &);
      logevent_slewReadyDataWriter & operator = (const logevent_slewReadyDataWriter &);
   };

   class logevent_slewReadyDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef logevent_slewReadyDataReader_ptr _ptr_type;
      typedef logevent_slewReadyDataReader_var _var_type;

      static logevent_slewReadyDataReader_ptr _duplicate (logevent_slewReadyDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_slewReadyDataReader_ptr _narrow (DDS::Object_ptr obj);
      static logevent_slewReadyDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_slewReadyDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_slewReadyDataReader_ptr _this () { return this; }

      virtual DDS::Long read (logevent_slewReadySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_slewReadySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_slewReadySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_slewReadySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_slewReady& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_slewReady& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_slewReadySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_slewReadySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_slewReadySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_slewReadySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_slewReadySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_slewReadySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_slewReadySeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_slewReady& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_slewReady& instance) = 0;

   protected:
      logevent_slewReadyDataReader () {};
      ~logevent_slewReadyDataReader () {};
   private:
      logevent_slewReadyDataReader (const logevent_slewReadyDataReader &);
      logevent_slewReadyDataReader & operator = (const logevent_slewReadyDataReader &);
   };

   class logevent_slewReadyDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef logevent_slewReadyDataReaderView_ptr _ptr_type;
      typedef logevent_slewReadyDataReaderView_var _var_type;

      static logevent_slewReadyDataReaderView_ptr _duplicate (logevent_slewReadyDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_slewReadyDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static logevent_slewReadyDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_slewReadyDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_slewReadyDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (logevent_slewReadySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_slewReadySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_slewReadySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_slewReadySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_slewReady& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_slewReady& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_slewReadySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_slewReadySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_slewReadySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_slewReadySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_slewReadySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_slewReadySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_slewReadySeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_slewReady& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_slewReady& instance) = 0;

   protected:
      logevent_slewReadyDataReaderView () {};
      ~logevent_slewReadyDataReaderView () {};
   private:
      logevent_slewReadyDataReaderView (const logevent_slewReadyDataReaderView &);
      logevent_slewReadyDataReaderView & operator = (const logevent_slewReadyDataReaderView &);
   };

   struct logevent_tempErrorSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < logevent_tempError, struct logevent_tempErrorSeq_uniq_> logevent_tempErrorSeq;
   typedef DDS_DCPSSequence_var < logevent_tempErrorSeq> logevent_tempErrorSeq_var;
   typedef DDS_DCPSSequence_out < logevent_tempErrorSeq> logevent_tempErrorSeq_out;
   class logevent_tempErrorTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef logevent_tempErrorTypeSupportInterface_ptr _ptr_type;
      typedef logevent_tempErrorTypeSupportInterface_var _var_type;

      static logevent_tempErrorTypeSupportInterface_ptr _duplicate (logevent_tempErrorTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_tempErrorTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static logevent_tempErrorTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_tempErrorTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_tempErrorTypeSupportInterface_ptr _this () { return this; }


   protected:
      logevent_tempErrorTypeSupportInterface () {};
      ~logevent_tempErrorTypeSupportInterface () {};
   private:
      logevent_tempErrorTypeSupportInterface (const logevent_tempErrorTypeSupportInterface &);
      logevent_tempErrorTypeSupportInterface & operator = (const logevent_tempErrorTypeSupportInterface &);
   };

   class logevent_tempErrorDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef logevent_tempErrorDataWriter_ptr _ptr_type;
      typedef logevent_tempErrorDataWriter_var _var_type;

      static logevent_tempErrorDataWriter_ptr _duplicate (logevent_tempErrorDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_tempErrorDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static logevent_tempErrorDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_tempErrorDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_tempErrorDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const logevent_tempError& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const logevent_tempError& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const logevent_tempError& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const logevent_tempError& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const logevent_tempError& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const logevent_tempError& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const logevent_tempError& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const logevent_tempError& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const logevent_tempError& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const logevent_tempError& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (logevent_tempError& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_tempError& instance_data) = 0;

   protected:
      logevent_tempErrorDataWriter () {};
      ~logevent_tempErrorDataWriter () {};
   private:
      logevent_tempErrorDataWriter (const logevent_tempErrorDataWriter &);
      logevent_tempErrorDataWriter & operator = (const logevent_tempErrorDataWriter &);
   };

   class logevent_tempErrorDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef logevent_tempErrorDataReader_ptr _ptr_type;
      typedef logevent_tempErrorDataReader_var _var_type;

      static logevent_tempErrorDataReader_ptr _duplicate (logevent_tempErrorDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_tempErrorDataReader_ptr _narrow (DDS::Object_ptr obj);
      static logevent_tempErrorDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_tempErrorDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_tempErrorDataReader_ptr _this () { return this; }

      virtual DDS::Long read (logevent_tempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_tempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_tempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_tempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_tempError& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_tempError& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_tempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_tempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_tempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_tempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_tempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_tempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_tempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_tempError& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_tempError& instance) = 0;

   protected:
      logevent_tempErrorDataReader () {};
      ~logevent_tempErrorDataReader () {};
   private:
      logevent_tempErrorDataReader (const logevent_tempErrorDataReader &);
      logevent_tempErrorDataReader & operator = (const logevent_tempErrorDataReader &);
   };

   class logevent_tempErrorDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef logevent_tempErrorDataReaderView_ptr _ptr_type;
      typedef logevent_tempErrorDataReaderView_var _var_type;

      static logevent_tempErrorDataReaderView_ptr _duplicate (logevent_tempErrorDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_tempErrorDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static logevent_tempErrorDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_tempErrorDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_tempErrorDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (logevent_tempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_tempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_tempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_tempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_tempError& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_tempError& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_tempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_tempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_tempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_tempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_tempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_tempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_tempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_tempError& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_tempError& instance) = 0;

   protected:
      logevent_tempErrorDataReaderView () {};
      ~logevent_tempErrorDataReaderView () {};
   private:
      logevent_tempErrorDataReaderView (const logevent_tempErrorDataReaderView &);
      logevent_tempErrorDataReaderView & operator = (const logevent_tempErrorDataReaderView &);
   };

   struct logevent_trackLostSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < logevent_trackLost, struct logevent_trackLostSeq_uniq_> logevent_trackLostSeq;
   typedef DDS_DCPSSequence_var < logevent_trackLostSeq> logevent_trackLostSeq_var;
   typedef DDS_DCPSSequence_out < logevent_trackLostSeq> logevent_trackLostSeq_out;
   class logevent_trackLostTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef logevent_trackLostTypeSupportInterface_ptr _ptr_type;
      typedef logevent_trackLostTypeSupportInterface_var _var_type;

      static logevent_trackLostTypeSupportInterface_ptr _duplicate (logevent_trackLostTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_trackLostTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static logevent_trackLostTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_trackLostTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_trackLostTypeSupportInterface_ptr _this () { return this; }


   protected:
      logevent_trackLostTypeSupportInterface () {};
      ~logevent_trackLostTypeSupportInterface () {};
   private:
      logevent_trackLostTypeSupportInterface (const logevent_trackLostTypeSupportInterface &);
      logevent_trackLostTypeSupportInterface & operator = (const logevent_trackLostTypeSupportInterface &);
   };

   class logevent_trackLostDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef logevent_trackLostDataWriter_ptr _ptr_type;
      typedef logevent_trackLostDataWriter_var _var_type;

      static logevent_trackLostDataWriter_ptr _duplicate (logevent_trackLostDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_trackLostDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static logevent_trackLostDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_trackLostDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_trackLostDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const logevent_trackLost& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const logevent_trackLost& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const logevent_trackLost& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const logevent_trackLost& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const logevent_trackLost& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const logevent_trackLost& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const logevent_trackLost& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const logevent_trackLost& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const logevent_trackLost& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const logevent_trackLost& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (logevent_trackLost& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_trackLost& instance_data) = 0;

   protected:
      logevent_trackLostDataWriter () {};
      ~logevent_trackLostDataWriter () {};
   private:
      logevent_trackLostDataWriter (const logevent_trackLostDataWriter &);
      logevent_trackLostDataWriter & operator = (const logevent_trackLostDataWriter &);
   };

   class logevent_trackLostDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef logevent_trackLostDataReader_ptr _ptr_type;
      typedef logevent_trackLostDataReader_var _var_type;

      static logevent_trackLostDataReader_ptr _duplicate (logevent_trackLostDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_trackLostDataReader_ptr _narrow (DDS::Object_ptr obj);
      static logevent_trackLostDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_trackLostDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_trackLostDataReader_ptr _this () { return this; }

      virtual DDS::Long read (logevent_trackLostSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_trackLostSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_trackLostSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_trackLostSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_trackLost& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_trackLost& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_trackLostSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_trackLostSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_trackLostSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_trackLostSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_trackLostSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_trackLostSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_trackLostSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_trackLost& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_trackLost& instance) = 0;

   protected:
      logevent_trackLostDataReader () {};
      ~logevent_trackLostDataReader () {};
   private:
      logevent_trackLostDataReader (const logevent_trackLostDataReader &);
      logevent_trackLostDataReader & operator = (const logevent_trackLostDataReader &);
   };

   class logevent_trackLostDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef logevent_trackLostDataReaderView_ptr _ptr_type;
      typedef logevent_trackLostDataReaderView_var _var_type;

      static logevent_trackLostDataReaderView_ptr _duplicate (logevent_trackLostDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_trackLostDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static logevent_trackLostDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_trackLostDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_trackLostDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (logevent_trackLostSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_trackLostSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_trackLostSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_trackLostSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_trackLost& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_trackLost& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_trackLostSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_trackLostSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_trackLostSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_trackLostSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_trackLostSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_trackLostSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_trackLostSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_trackLost& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_trackLost& instance) = 0;

   protected:
      logevent_trackLostDataReaderView () {};
      ~logevent_trackLostDataReaderView () {};
   private:
      logevent_trackLostDataReaderView (const logevent_trackLostDataReaderView &);
      logevent_trackLostDataReaderView & operator = (const logevent_trackLostDataReaderView &);
   };

   struct logevent_trackingSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < logevent_tracking, struct logevent_trackingSeq_uniq_> logevent_trackingSeq;
   typedef DDS_DCPSSequence_var < logevent_trackingSeq> logevent_trackingSeq_var;
   typedef DDS_DCPSSequence_out < logevent_trackingSeq> logevent_trackingSeq_out;
   class logevent_trackingTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef logevent_trackingTypeSupportInterface_ptr _ptr_type;
      typedef logevent_trackingTypeSupportInterface_var _var_type;

      static logevent_trackingTypeSupportInterface_ptr _duplicate (logevent_trackingTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_trackingTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static logevent_trackingTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_trackingTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_trackingTypeSupportInterface_ptr _this () { return this; }


   protected:
      logevent_trackingTypeSupportInterface () {};
      ~logevent_trackingTypeSupportInterface () {};
   private:
      logevent_trackingTypeSupportInterface (const logevent_trackingTypeSupportInterface &);
      logevent_trackingTypeSupportInterface & operator = (const logevent_trackingTypeSupportInterface &);
   };

   class logevent_trackingDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef logevent_trackingDataWriter_ptr _ptr_type;
      typedef logevent_trackingDataWriter_var _var_type;

      static logevent_trackingDataWriter_ptr _duplicate (logevent_trackingDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_trackingDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static logevent_trackingDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_trackingDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_trackingDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const logevent_tracking& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const logevent_tracking& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const logevent_tracking& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const logevent_tracking& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const logevent_tracking& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const logevent_tracking& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const logevent_tracking& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const logevent_tracking& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const logevent_tracking& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const logevent_tracking& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (logevent_tracking& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_tracking& instance_data) = 0;

   protected:
      logevent_trackingDataWriter () {};
      ~logevent_trackingDataWriter () {};
   private:
      logevent_trackingDataWriter (const logevent_trackingDataWriter &);
      logevent_trackingDataWriter & operator = (const logevent_trackingDataWriter &);
   };

   class logevent_trackingDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef logevent_trackingDataReader_ptr _ptr_type;
      typedef logevent_trackingDataReader_var _var_type;

      static logevent_trackingDataReader_ptr _duplicate (logevent_trackingDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_trackingDataReader_ptr _narrow (DDS::Object_ptr obj);
      static logevent_trackingDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_trackingDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_trackingDataReader_ptr _this () { return this; }

      virtual DDS::Long read (logevent_trackingSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_trackingSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_trackingSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_trackingSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_tracking& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_tracking& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_trackingSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_trackingSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_trackingSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_trackingSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_trackingSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_trackingSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_trackingSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_tracking& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_tracking& instance) = 0;

   protected:
      logevent_trackingDataReader () {};
      ~logevent_trackingDataReader () {};
   private:
      logevent_trackingDataReader (const logevent_trackingDataReader &);
      logevent_trackingDataReader & operator = (const logevent_trackingDataReader &);
   };

   class logevent_trackingDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef logevent_trackingDataReaderView_ptr _ptr_type;
      typedef logevent_trackingDataReaderView_var _var_type;

      static logevent_trackingDataReaderView_ptr _duplicate (logevent_trackingDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_trackingDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static logevent_trackingDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_trackingDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_trackingDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (logevent_trackingSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_trackingSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_trackingSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_trackingSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_tracking& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_tracking& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_trackingSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_trackingSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_trackingSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_trackingSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_trackingSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_trackingSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_trackingSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_tracking& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_tracking& instance) = 0;

   protected:
      logevent_trackingDataReaderView () {};
      ~logevent_trackingDataReaderView () {};
   private:
      logevent_trackingDataReaderView (const logevent_trackingDataReaderView &);
      logevent_trackingDataReaderView & operator = (const logevent_trackingDataReaderView &);
   };

   struct logevent_velLimitSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < logevent_velLimit, struct logevent_velLimitSeq_uniq_> logevent_velLimitSeq;
   typedef DDS_DCPSSequence_var < logevent_velLimitSeq> logevent_velLimitSeq_var;
   typedef DDS_DCPSSequence_out < logevent_velLimitSeq> logevent_velLimitSeq_out;
   class logevent_velLimitTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef logevent_velLimitTypeSupportInterface_ptr _ptr_type;
      typedef logevent_velLimitTypeSupportInterface_var _var_type;

      static logevent_velLimitTypeSupportInterface_ptr _duplicate (logevent_velLimitTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_velLimitTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static logevent_velLimitTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_velLimitTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_velLimitTypeSupportInterface_ptr _this () { return this; }


   protected:
      logevent_velLimitTypeSupportInterface () {};
      ~logevent_velLimitTypeSupportInterface () {};
   private:
      logevent_velLimitTypeSupportInterface (const logevent_velLimitTypeSupportInterface &);
      logevent_velLimitTypeSupportInterface & operator = (const logevent_velLimitTypeSupportInterface &);
   };

   class logevent_velLimitDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef logevent_velLimitDataWriter_ptr _ptr_type;
      typedef logevent_velLimitDataWriter_var _var_type;

      static logevent_velLimitDataWriter_ptr _duplicate (logevent_velLimitDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_velLimitDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static logevent_velLimitDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_velLimitDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_velLimitDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const logevent_velLimit& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const logevent_velLimit& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const logevent_velLimit& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const logevent_velLimit& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const logevent_velLimit& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const logevent_velLimit& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const logevent_velLimit& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const logevent_velLimit& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const logevent_velLimit& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const logevent_velLimit& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (logevent_velLimit& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_velLimit& instance_data) = 0;

   protected:
      logevent_velLimitDataWriter () {};
      ~logevent_velLimitDataWriter () {};
   private:
      logevent_velLimitDataWriter (const logevent_velLimitDataWriter &);
      logevent_velLimitDataWriter & operator = (const logevent_velLimitDataWriter &);
   };

   class logevent_velLimitDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef logevent_velLimitDataReader_ptr _ptr_type;
      typedef logevent_velLimitDataReader_var _var_type;

      static logevent_velLimitDataReader_ptr _duplicate (logevent_velLimitDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_velLimitDataReader_ptr _narrow (DDS::Object_ptr obj);
      static logevent_velLimitDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_velLimitDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_velLimitDataReader_ptr _this () { return this; }

      virtual DDS::Long read (logevent_velLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_velLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_velLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_velLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_velLimit& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_velLimit& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_velLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_velLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_velLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_velLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_velLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_velLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_velLimitSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_velLimit& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_velLimit& instance) = 0;

   protected:
      logevent_velLimitDataReader () {};
      ~logevent_velLimitDataReader () {};
   private:
      logevent_velLimitDataReader (const logevent_velLimitDataReader &);
      logevent_velLimitDataReader & operator = (const logevent_velLimitDataReader &);
   };

   class logevent_velLimitDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef logevent_velLimitDataReaderView_ptr _ptr_type;
      typedef logevent_velLimitDataReaderView_var _var_type;

      static logevent_velLimitDataReaderView_ptr _duplicate (logevent_velLimitDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_velLimitDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static logevent_velLimitDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_velLimitDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_velLimitDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (logevent_velLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_velLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_velLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_velLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_velLimit& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_velLimit& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_velLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_velLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_velLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_velLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_velLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_velLimitSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_velLimitSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_velLimit& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_velLimit& instance) = 0;

   protected:
      logevent_velLimitDataReaderView () {};
      ~logevent_velLimitDataReaderView () {};
   private:
      logevent_velLimitDataReaderView (const logevent_velLimitDataReaderView &);
      logevent_velLimitDataReaderView & operator = (const logevent_velLimitDataReaderView &);
   };

   struct commandSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < command, struct commandSeq_uniq_> commandSeq;
   typedef DDS_DCPSSequence_var < commandSeq> commandSeq_var;
   typedef DDS_DCPSSequence_out < commandSeq> commandSeq_out;
   class commandTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef commandTypeSupportInterface_ptr _ptr_type;
      typedef commandTypeSupportInterface_var _var_type;

      static commandTypeSupportInterface_ptr _duplicate (commandTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static commandTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static commandTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static commandTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      commandTypeSupportInterface_ptr _this () { return this; }


   protected:
      commandTypeSupportInterface () {};
      ~commandTypeSupportInterface () {};
   private:
      commandTypeSupportInterface (const commandTypeSupportInterface &);
      commandTypeSupportInterface & operator = (const commandTypeSupportInterface &);
   };

   class commandDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef commandDataWriter_ptr _ptr_type;
      typedef commandDataWriter_var _var_type;

      static commandDataWriter_ptr _duplicate (commandDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static commandDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static commandDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static commandDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      commandDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const command& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const command& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const command& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const command& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const command& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const command& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const command& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const command& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const command& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const command& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (command& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command& instance_data) = 0;

   protected:
      commandDataWriter () {};
      ~commandDataWriter () {};
   private:
      commandDataWriter (const commandDataWriter &);
      commandDataWriter & operator = (const commandDataWriter &);
   };

   class commandDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef commandDataReader_ptr _ptr_type;
      typedef commandDataReader_var _var_type;

      static commandDataReader_ptr _duplicate (commandDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static commandDataReader_ptr _narrow (DDS::Object_ptr obj);
      static commandDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static commandDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      commandDataReader_ptr _this () { return this; }

      virtual DDS::Long read (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (commandSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command& instance) = 0;

   protected:
      commandDataReader () {};
      ~commandDataReader () {};
   private:
      commandDataReader (const commandDataReader &);
      commandDataReader & operator = (const commandDataReader &);
   };

   class commandDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef commandDataReaderView_ptr _ptr_type;
      typedef commandDataReaderView_var _var_type;

      static commandDataReaderView_ptr _duplicate (commandDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static commandDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static commandDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static commandDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      commandDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (commandSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command& instance) = 0;

   protected:
      commandDataReaderView () {};
      ~commandDataReaderView () {};
   private:
      commandDataReaderView (const commandDataReaderView &);
      commandDataReaderView & operator = (const commandDataReaderView &);
   };

   struct ackcmdSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < ackcmd, struct ackcmdSeq_uniq_> ackcmdSeq;
   typedef DDS_DCPSSequence_var < ackcmdSeq> ackcmdSeq_var;
   typedef DDS_DCPSSequence_out < ackcmdSeq> ackcmdSeq_out;
   class ackcmdTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef ackcmdTypeSupportInterface_ptr _ptr_type;
      typedef ackcmdTypeSupportInterface_var _var_type;

      static ackcmdTypeSupportInterface_ptr _duplicate (ackcmdTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ackcmdTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static ackcmdTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ackcmdTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      ackcmdTypeSupportInterface_ptr _this () { return this; }


   protected:
      ackcmdTypeSupportInterface () {};
      ~ackcmdTypeSupportInterface () {};
   private:
      ackcmdTypeSupportInterface (const ackcmdTypeSupportInterface &);
      ackcmdTypeSupportInterface & operator = (const ackcmdTypeSupportInterface &);
   };

   class ackcmdDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef ackcmdDataWriter_ptr _ptr_type;
      typedef ackcmdDataWriter_var _var_type;

      static ackcmdDataWriter_ptr _duplicate (ackcmdDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ackcmdDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static ackcmdDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ackcmdDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      ackcmdDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const ackcmd& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const ackcmd& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const ackcmd& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const ackcmd& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const ackcmd& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const ackcmd& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const ackcmd& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const ackcmd& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const ackcmd& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const ackcmd& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (ackcmd& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const ackcmd& instance_data) = 0;

   protected:
      ackcmdDataWriter () {};
      ~ackcmdDataWriter () {};
   private:
      ackcmdDataWriter (const ackcmdDataWriter &);
      ackcmdDataWriter & operator = (const ackcmdDataWriter &);
   };

   class ackcmdDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef ackcmdDataReader_ptr _ptr_type;
      typedef ackcmdDataReader_var _var_type;

      static ackcmdDataReader_ptr _duplicate (ackcmdDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ackcmdDataReader_ptr _narrow (DDS::Object_ptr obj);
      static ackcmdDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ackcmdDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      ackcmdDataReader_ptr _this () { return this; }

      virtual DDS::Long read (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (ackcmd& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (ackcmd& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (ackcmd& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const ackcmd& instance) = 0;

   protected:
      ackcmdDataReader () {};
      ~ackcmdDataReader () {};
   private:
      ackcmdDataReader (const ackcmdDataReader &);
      ackcmdDataReader & operator = (const ackcmdDataReader &);
   };

   class ackcmdDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef ackcmdDataReaderView_ptr _ptr_type;
      typedef ackcmdDataReaderView_var _var_type;

      static ackcmdDataReaderView_ptr _duplicate (ackcmdDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ackcmdDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static ackcmdDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ackcmdDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      ackcmdDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (ackcmd& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (ackcmd& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (ackcmd& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const ackcmd& instance) = 0;

   protected:
      ackcmdDataReaderView () {};
      ~ackcmdDataReaderView () {};
   private:
      ackcmdDataReaderView (const ackcmdDataReaderView &);
      ackcmdDataReaderView & operator = (const ackcmdDataReaderView &);
   };

   struct logeventSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < logevent, struct logeventSeq_uniq_> logeventSeq;
   typedef DDS_DCPSSequence_var < logeventSeq> logeventSeq_var;
   typedef DDS_DCPSSequence_out < logeventSeq> logeventSeq_out;
   class logeventTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef logeventTypeSupportInterface_ptr _ptr_type;
      typedef logeventTypeSupportInterface_var _var_type;

      static logeventTypeSupportInterface_ptr _duplicate (logeventTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logeventTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static logeventTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logeventTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      logeventTypeSupportInterface_ptr _this () { return this; }


   protected:
      logeventTypeSupportInterface () {};
      ~logeventTypeSupportInterface () {};
   private:
      logeventTypeSupportInterface (const logeventTypeSupportInterface &);
      logeventTypeSupportInterface & operator = (const logeventTypeSupportInterface &);
   };

   class logeventDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef logeventDataWriter_ptr _ptr_type;
      typedef logeventDataWriter_var _var_type;

      static logeventDataWriter_ptr _duplicate (logeventDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logeventDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static logeventDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logeventDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      logeventDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const logevent& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const logevent& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const logevent& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const logevent& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const logevent& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const logevent& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const logevent& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const logevent& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const logevent& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const logevent& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (logevent& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent& instance_data) = 0;

   protected:
      logeventDataWriter () {};
      ~logeventDataWriter () {};
   private:
      logeventDataWriter (const logeventDataWriter &);
      logeventDataWriter & operator = (const logeventDataWriter &);
   };

   class logeventDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef logeventDataReader_ptr _ptr_type;
      typedef logeventDataReader_var _var_type;

      static logeventDataReader_ptr _duplicate (logeventDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logeventDataReader_ptr _narrow (DDS::Object_ptr obj);
      static logeventDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logeventDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      logeventDataReader_ptr _this () { return this; }

      virtual DDS::Long read (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent& instance) = 0;

   protected:
      logeventDataReader () {};
      ~logeventDataReader () {};
   private:
      logeventDataReader (const logeventDataReader &);
      logeventDataReader & operator = (const logeventDataReader &);
   };

   class logeventDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef logeventDataReaderView_ptr _ptr_type;
      typedef logeventDataReaderView_var _var_type;

      static logeventDataReaderView_ptr _duplicate (logeventDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logeventDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static logeventDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logeventDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      logeventDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent& instance) = 0;

   protected:
      logeventDataReaderView () {};
      ~logeventDataReaderView () {};
   private:
      logeventDataReaderView (const logeventDataReaderView &);
      logeventDataReaderView & operator = (const logeventDataReaderView &);
   };

}




#endif 
