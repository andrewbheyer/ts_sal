//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: sal_m2msDcps.h
//  Source: sal_m2msDcps.idl
//  Generated: Thu Apr  9 15:48:41 2015
//  OpenSplice V6.4.140320OSS
//  
//******************************************************************
#ifndef _SAL_M2MSDCPS_H_
#define _SAL_M2MSDCPS_H_

#include "sacpp_mapping.h"
#include "sacpp_DDS_DCPS.h"
#include "dds_dcps.h"
#include "sal_m2ms.h"


namespace m2ms
{

   class ActuatorsTypeSupportInterface;

   typedef ActuatorsTypeSupportInterface * ActuatorsTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < ActuatorsTypeSupportInterface> ActuatorsTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < ActuatorsTypeSupportInterface> ActuatorsTypeSupportInterface_out;


   class ActuatorsDataWriter;

   typedef ActuatorsDataWriter * ActuatorsDataWriter_ptr;
   typedef DDS_DCPSInterface_var < ActuatorsDataWriter> ActuatorsDataWriter_var;
   typedef DDS_DCPSInterface_out < ActuatorsDataWriter> ActuatorsDataWriter_out;


   class ActuatorsDataReader;

   typedef ActuatorsDataReader * ActuatorsDataReader_ptr;
   typedef DDS_DCPSInterface_var < ActuatorsDataReader> ActuatorsDataReader_var;
   typedef DDS_DCPSInterface_out < ActuatorsDataReader> ActuatorsDataReader_out;


   class ActuatorsDataReaderView;

   typedef ActuatorsDataReaderView * ActuatorsDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < ActuatorsDataReaderView> ActuatorsDataReaderView_var;
   typedef DDS_DCPSInterface_out < ActuatorsDataReaderView> ActuatorsDataReaderView_out;


   class ApplicationTypeSupportInterface;

   typedef ApplicationTypeSupportInterface * ApplicationTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < ApplicationTypeSupportInterface> ApplicationTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < ApplicationTypeSupportInterface> ApplicationTypeSupportInterface_out;


   class ApplicationDataWriter;

   typedef ApplicationDataWriter * ApplicationDataWriter_ptr;
   typedef DDS_DCPSInterface_var < ApplicationDataWriter> ApplicationDataWriter_var;
   typedef DDS_DCPSInterface_out < ApplicationDataWriter> ApplicationDataWriter_out;


   class ApplicationDataReader;

   typedef ApplicationDataReader * ApplicationDataReader_ptr;
   typedef DDS_DCPSInterface_var < ApplicationDataReader> ApplicationDataReader_var;
   typedef DDS_DCPSInterface_out < ApplicationDataReader> ApplicationDataReader_out;


   class ApplicationDataReaderView;

   typedef ApplicationDataReaderView * ApplicationDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < ApplicationDataReaderView> ApplicationDataReaderView_var;
   typedef DDS_DCPSInterface_out < ApplicationDataReaderView> ApplicationDataReaderView_out;


   class ElectricalTypeSupportInterface;

   typedef ElectricalTypeSupportInterface * ElectricalTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < ElectricalTypeSupportInterface> ElectricalTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < ElectricalTypeSupportInterface> ElectricalTypeSupportInterface_out;


   class ElectricalDataWriter;

   typedef ElectricalDataWriter * ElectricalDataWriter_ptr;
   typedef DDS_DCPSInterface_var < ElectricalDataWriter> ElectricalDataWriter_var;
   typedef DDS_DCPSInterface_out < ElectricalDataWriter> ElectricalDataWriter_out;


   class ElectricalDataReader;

   typedef ElectricalDataReader * ElectricalDataReader_ptr;
   typedef DDS_DCPSInterface_var < ElectricalDataReader> ElectricalDataReader_var;
   typedef DDS_DCPSInterface_out < ElectricalDataReader> ElectricalDataReader_out;


   class ElectricalDataReaderView;

   typedef ElectricalDataReaderView * ElectricalDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < ElectricalDataReaderView> ElectricalDataReaderView_var;
   typedef DDS_DCPSInterface_out < ElectricalDataReaderView> ElectricalDataReaderView_out;


   class LimitSensorsTypeSupportInterface;

   typedef LimitSensorsTypeSupportInterface * LimitSensorsTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < LimitSensorsTypeSupportInterface> LimitSensorsTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < LimitSensorsTypeSupportInterface> LimitSensorsTypeSupportInterface_out;


   class LimitSensorsDataWriter;

   typedef LimitSensorsDataWriter * LimitSensorsDataWriter_ptr;
   typedef DDS_DCPSInterface_var < LimitSensorsDataWriter> LimitSensorsDataWriter_var;
   typedef DDS_DCPSInterface_out < LimitSensorsDataWriter> LimitSensorsDataWriter_out;


   class LimitSensorsDataReader;

   typedef LimitSensorsDataReader * LimitSensorsDataReader_ptr;
   typedef DDS_DCPSInterface_var < LimitSensorsDataReader> LimitSensorsDataReader_var;
   typedef DDS_DCPSInterface_out < LimitSensorsDataReader> LimitSensorsDataReader_out;


   class LimitSensorsDataReaderView;

   typedef LimitSensorsDataReaderView * LimitSensorsDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < LimitSensorsDataReaderView> LimitSensorsDataReaderView_var;
   typedef DDS_DCPSInterface_out < LimitSensorsDataReaderView> LimitSensorsDataReaderView_out;


   class MetrologyTypeSupportInterface;

   typedef MetrologyTypeSupportInterface * MetrologyTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < MetrologyTypeSupportInterface> MetrologyTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < MetrologyTypeSupportInterface> MetrologyTypeSupportInterface_out;


   class MetrologyDataWriter;

   typedef MetrologyDataWriter * MetrologyDataWriter_ptr;
   typedef DDS_DCPSInterface_var < MetrologyDataWriter> MetrologyDataWriter_var;
   typedef DDS_DCPSInterface_out < MetrologyDataWriter> MetrologyDataWriter_out;


   class MetrologyDataReader;

   typedef MetrologyDataReader * MetrologyDataReader_ptr;
   typedef DDS_DCPSInterface_var < MetrologyDataReader> MetrologyDataReader_var;
   typedef DDS_DCPSInterface_out < MetrologyDataReader> MetrologyDataReader_out;


   class MetrologyDataReaderView;

   typedef MetrologyDataReaderView * MetrologyDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < MetrologyDataReaderView> MetrologyDataReaderView_var;
   typedef DDS_DCPSInterface_out < MetrologyDataReaderView> MetrologyDataReaderView_out;


   class SurfaceTypeSupportInterface;

   typedef SurfaceTypeSupportInterface * SurfaceTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < SurfaceTypeSupportInterface> SurfaceTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < SurfaceTypeSupportInterface> SurfaceTypeSupportInterface_out;


   class SurfaceDataWriter;

   typedef SurfaceDataWriter * SurfaceDataWriter_ptr;
   typedef DDS_DCPSInterface_var < SurfaceDataWriter> SurfaceDataWriter_var;
   typedef DDS_DCPSInterface_out < SurfaceDataWriter> SurfaceDataWriter_out;


   class SurfaceDataReader;

   typedef SurfaceDataReader * SurfaceDataReader_ptr;
   typedef DDS_DCPSInterface_var < SurfaceDataReader> SurfaceDataReader_var;
   typedef DDS_DCPSInterface_out < SurfaceDataReader> SurfaceDataReader_out;


   class SurfaceDataReaderView;

   typedef SurfaceDataReaderView * SurfaceDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < SurfaceDataReaderView> SurfaceDataReaderView_var;
   typedef DDS_DCPSInterface_out < SurfaceDataReaderView> SurfaceDataReaderView_out;


   class TCTypeSupportInterface;

   typedef TCTypeSupportInterface * TCTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < TCTypeSupportInterface> TCTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < TCTypeSupportInterface> TCTypeSupportInterface_out;


   class TCDataWriter;

   typedef TCDataWriter * TCDataWriter_ptr;
   typedef DDS_DCPSInterface_var < TCDataWriter> TCDataWriter_var;
   typedef DDS_DCPSInterface_out < TCDataWriter> TCDataWriter_out;


   class TCDataReader;

   typedef TCDataReader * TCDataReader_ptr;
   typedef DDS_DCPSInterface_var < TCDataReader> TCDataReader_var;
   typedef DDS_DCPSInterface_out < TCDataReader> TCDataReader_out;


   class TCDataReaderView;

   typedef TCDataReaderView * TCDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < TCDataReaderView> TCDataReaderView_var;
   typedef DDS_DCPSInterface_out < TCDataReaderView> TCDataReaderView_out;


   class command_abortTypeSupportInterface;

   typedef command_abortTypeSupportInterface * command_abortTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < command_abortTypeSupportInterface> command_abortTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < command_abortTypeSupportInterface> command_abortTypeSupportInterface_out;


   class command_abortDataWriter;

   typedef command_abortDataWriter * command_abortDataWriter_ptr;
   typedef DDS_DCPSInterface_var < command_abortDataWriter> command_abortDataWriter_var;
   typedef DDS_DCPSInterface_out < command_abortDataWriter> command_abortDataWriter_out;


   class command_abortDataReader;

   typedef command_abortDataReader * command_abortDataReader_ptr;
   typedef DDS_DCPSInterface_var < command_abortDataReader> command_abortDataReader_var;
   typedef DDS_DCPSInterface_out < command_abortDataReader> command_abortDataReader_out;


   class command_abortDataReaderView;

   typedef command_abortDataReaderView * command_abortDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < command_abortDataReaderView> command_abortDataReaderView_var;
   typedef DDS_DCPSInterface_out < command_abortDataReaderView> command_abortDataReaderView_out;


   class command_configureTypeSupportInterface;

   typedef command_configureTypeSupportInterface * command_configureTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < command_configureTypeSupportInterface> command_configureTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < command_configureTypeSupportInterface> command_configureTypeSupportInterface_out;


   class command_configureDataWriter;

   typedef command_configureDataWriter * command_configureDataWriter_ptr;
   typedef DDS_DCPSInterface_var < command_configureDataWriter> command_configureDataWriter_var;
   typedef DDS_DCPSInterface_out < command_configureDataWriter> command_configureDataWriter_out;


   class command_configureDataReader;

   typedef command_configureDataReader * command_configureDataReader_ptr;
   typedef DDS_DCPSInterface_var < command_configureDataReader> command_configureDataReader_var;
   typedef DDS_DCPSInterface_out < command_configureDataReader> command_configureDataReader_out;


   class command_configureDataReaderView;

   typedef command_configureDataReaderView * command_configureDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < command_configureDataReaderView> command_configureDataReaderView_var;
   typedef DDS_DCPSInterface_out < command_configureDataReaderView> command_configureDataReaderView_out;


   class command_statusTypeSupportInterface;

   typedef command_statusTypeSupportInterface * command_statusTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < command_statusTypeSupportInterface> command_statusTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < command_statusTypeSupportInterface> command_statusTypeSupportInterface_out;


   class command_statusDataWriter;

   typedef command_statusDataWriter * command_statusDataWriter_ptr;
   typedef DDS_DCPSInterface_var < command_statusDataWriter> command_statusDataWriter_var;
   typedef DDS_DCPSInterface_out < command_statusDataWriter> command_statusDataWriter_out;


   class command_statusDataReader;

   typedef command_statusDataReader * command_statusDataReader_ptr;
   typedef DDS_DCPSInterface_var < command_statusDataReader> command_statusDataReader_var;
   typedef DDS_DCPSInterface_out < command_statusDataReader> command_statusDataReader_out;


   class command_statusDataReaderView;

   typedef command_statusDataReaderView * command_statusDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < command_statusDataReaderView> command_statusDataReaderView_var;
   typedef DDS_DCPSInterface_out < command_statusDataReaderView> command_statusDataReaderView_out;


   class command_stopTypeSupportInterface;

   typedef command_stopTypeSupportInterface * command_stopTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < command_stopTypeSupportInterface> command_stopTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < command_stopTypeSupportInterface> command_stopTypeSupportInterface_out;


   class command_stopDataWriter;

   typedef command_stopDataWriter * command_stopDataWriter_ptr;
   typedef DDS_DCPSInterface_var < command_stopDataWriter> command_stopDataWriter_var;
   typedef DDS_DCPSInterface_out < command_stopDataWriter> command_stopDataWriter_out;


   class command_stopDataReader;

   typedef command_stopDataReader * command_stopDataReader_ptr;
   typedef DDS_DCPSInterface_var < command_stopDataReader> command_stopDataReader_var;
   typedef DDS_DCPSInterface_out < command_stopDataReader> command_stopDataReader_out;


   class command_stopDataReaderView;

   typedef command_stopDataReaderView * command_stopDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < command_stopDataReaderView> command_stopDataReaderView_var;
   typedef DDS_DCPSInterface_out < command_stopDataReaderView> command_stopDataReaderView_out;


   class command_targetTypeSupportInterface;

   typedef command_targetTypeSupportInterface * command_targetTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < command_targetTypeSupportInterface> command_targetTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < command_targetTypeSupportInterface> command_targetTypeSupportInterface_out;


   class command_targetDataWriter;

   typedef command_targetDataWriter * command_targetDataWriter_ptr;
   typedef DDS_DCPSInterface_var < command_targetDataWriter> command_targetDataWriter_var;
   typedef DDS_DCPSInterface_out < command_targetDataWriter> command_targetDataWriter_out;


   class command_targetDataReader;

   typedef command_targetDataReader * command_targetDataReader_ptr;
   typedef DDS_DCPSInterface_var < command_targetDataReader> command_targetDataReader_var;
   typedef DDS_DCPSInterface_out < command_targetDataReader> command_targetDataReader_out;


   class command_targetDataReaderView;

   typedef command_targetDataReaderView * command_targetDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < command_targetDataReaderView> command_targetDataReaderView_var;
   typedef DDS_DCPSInterface_out < command_targetDataReaderView> command_targetDataReaderView_out;


   class command_updateTypeSupportInterface;

   typedef command_updateTypeSupportInterface * command_updateTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < command_updateTypeSupportInterface> command_updateTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < command_updateTypeSupportInterface> command_updateTypeSupportInterface_out;


   class command_updateDataWriter;

   typedef command_updateDataWriter * command_updateDataWriter_ptr;
   typedef DDS_DCPSInterface_var < command_updateDataWriter> command_updateDataWriter_var;
   typedef DDS_DCPSInterface_out < command_updateDataWriter> command_updateDataWriter_out;


   class command_updateDataReader;

   typedef command_updateDataReader * command_updateDataReader_ptr;
   typedef DDS_DCPSInterface_var < command_updateDataReader> command_updateDataReader_var;
   typedef DDS_DCPSInterface_out < command_updateDataReader> command_updateDataReader_out;


   class command_updateDataReaderView;

   typedef command_updateDataReaderView * command_updateDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < command_updateDataReaderView> command_updateDataReaderView_var;
   typedef DDS_DCPSInterface_out < command_updateDataReaderView> command_updateDataReaderView_out;


   class logevent_interlockTypeSupportInterface;

   typedef logevent_interlockTypeSupportInterface * logevent_interlockTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < logevent_interlockTypeSupportInterface> logevent_interlockTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < logevent_interlockTypeSupportInterface> logevent_interlockTypeSupportInterface_out;


   class logevent_interlockDataWriter;

   typedef logevent_interlockDataWriter * logevent_interlockDataWriter_ptr;
   typedef DDS_DCPSInterface_var < logevent_interlockDataWriter> logevent_interlockDataWriter_var;
   typedef DDS_DCPSInterface_out < logevent_interlockDataWriter> logevent_interlockDataWriter_out;


   class logevent_interlockDataReader;

   typedef logevent_interlockDataReader * logevent_interlockDataReader_ptr;
   typedef DDS_DCPSInterface_var < logevent_interlockDataReader> logevent_interlockDataReader_var;
   typedef DDS_DCPSInterface_out < logevent_interlockDataReader> logevent_interlockDataReader_out;


   class logevent_interlockDataReaderView;

   typedef logevent_interlockDataReaderView * logevent_interlockDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < logevent_interlockDataReaderView> logevent_interlockDataReaderView_var;
   typedef DDS_DCPSInterface_out < logevent_interlockDataReaderView> logevent_interlockDataReaderView_out;


   class logevent_limitErrorTypeSupportInterface;

   typedef logevent_limitErrorTypeSupportInterface * logevent_limitErrorTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < logevent_limitErrorTypeSupportInterface> logevent_limitErrorTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < logevent_limitErrorTypeSupportInterface> logevent_limitErrorTypeSupportInterface_out;


   class logevent_limitErrorDataWriter;

   typedef logevent_limitErrorDataWriter * logevent_limitErrorDataWriter_ptr;
   typedef DDS_DCPSInterface_var < logevent_limitErrorDataWriter> logevent_limitErrorDataWriter_var;
   typedef DDS_DCPSInterface_out < logevent_limitErrorDataWriter> logevent_limitErrorDataWriter_out;


   class logevent_limitErrorDataReader;

   typedef logevent_limitErrorDataReader * logevent_limitErrorDataReader_ptr;
   typedef DDS_DCPSInterface_var < logevent_limitErrorDataReader> logevent_limitErrorDataReader_var;
   typedef DDS_DCPSInterface_out < logevent_limitErrorDataReader> logevent_limitErrorDataReader_out;


   class logevent_limitErrorDataReaderView;

   typedef logevent_limitErrorDataReaderView * logevent_limitErrorDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < logevent_limitErrorDataReaderView> logevent_limitErrorDataReaderView_var;
   typedef DDS_DCPSInterface_out < logevent_limitErrorDataReaderView> logevent_limitErrorDataReaderView_out;


   class logevent_targetDoneTypeSupportInterface;

   typedef logevent_targetDoneTypeSupportInterface * logevent_targetDoneTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < logevent_targetDoneTypeSupportInterface> logevent_targetDoneTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < logevent_targetDoneTypeSupportInterface> logevent_targetDoneTypeSupportInterface_out;


   class logevent_targetDoneDataWriter;

   typedef logevent_targetDoneDataWriter * logevent_targetDoneDataWriter_ptr;
   typedef DDS_DCPSInterface_var < logevent_targetDoneDataWriter> logevent_targetDoneDataWriter_var;
   typedef DDS_DCPSInterface_out < logevent_targetDoneDataWriter> logevent_targetDoneDataWriter_out;


   class logevent_targetDoneDataReader;

   typedef logevent_targetDoneDataReader * logevent_targetDoneDataReader_ptr;
   typedef DDS_DCPSInterface_var < logevent_targetDoneDataReader> logevent_targetDoneDataReader_var;
   typedef DDS_DCPSInterface_out < logevent_targetDoneDataReader> logevent_targetDoneDataReader_out;


   class logevent_targetDoneDataReaderView;

   typedef logevent_targetDoneDataReaderView * logevent_targetDoneDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < logevent_targetDoneDataReaderView> logevent_targetDoneDataReaderView_var;
   typedef DDS_DCPSInterface_out < logevent_targetDoneDataReaderView> logevent_targetDoneDataReaderView_out;


   class logevent_targetErrorTypeSupportInterface;

   typedef logevent_targetErrorTypeSupportInterface * logevent_targetErrorTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < logevent_targetErrorTypeSupportInterface> logevent_targetErrorTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < logevent_targetErrorTypeSupportInterface> logevent_targetErrorTypeSupportInterface_out;


   class logevent_targetErrorDataWriter;

   typedef logevent_targetErrorDataWriter * logevent_targetErrorDataWriter_ptr;
   typedef DDS_DCPSInterface_var < logevent_targetErrorDataWriter> logevent_targetErrorDataWriter_var;
   typedef DDS_DCPSInterface_out < logevent_targetErrorDataWriter> logevent_targetErrorDataWriter_out;


   class logevent_targetErrorDataReader;

   typedef logevent_targetErrorDataReader * logevent_targetErrorDataReader_ptr;
   typedef DDS_DCPSInterface_var < logevent_targetErrorDataReader> logevent_targetErrorDataReader_var;
   typedef DDS_DCPSInterface_out < logevent_targetErrorDataReader> logevent_targetErrorDataReader_out;


   class logevent_targetErrorDataReaderView;

   typedef logevent_targetErrorDataReaderView * logevent_targetErrorDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < logevent_targetErrorDataReaderView> logevent_targetErrorDataReaderView_var;
   typedef DDS_DCPSInterface_out < logevent_targetErrorDataReaderView> logevent_targetErrorDataReaderView_out;


   class logevent_tempErrorTypeSupportInterface;

   typedef logevent_tempErrorTypeSupportInterface * logevent_tempErrorTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < logevent_tempErrorTypeSupportInterface> logevent_tempErrorTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < logevent_tempErrorTypeSupportInterface> logevent_tempErrorTypeSupportInterface_out;


   class logevent_tempErrorDataWriter;

   typedef logevent_tempErrorDataWriter * logevent_tempErrorDataWriter_ptr;
   typedef DDS_DCPSInterface_var < logevent_tempErrorDataWriter> logevent_tempErrorDataWriter_var;
   typedef DDS_DCPSInterface_out < logevent_tempErrorDataWriter> logevent_tempErrorDataWriter_out;


   class logevent_tempErrorDataReader;

   typedef logevent_tempErrorDataReader * logevent_tempErrorDataReader_ptr;
   typedef DDS_DCPSInterface_var < logevent_tempErrorDataReader> logevent_tempErrorDataReader_var;
   typedef DDS_DCPSInterface_out < logevent_tempErrorDataReader> logevent_tempErrorDataReader_out;


   class logevent_tempErrorDataReaderView;

   typedef logevent_tempErrorDataReaderView * logevent_tempErrorDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < logevent_tempErrorDataReaderView> logevent_tempErrorDataReaderView_var;
   typedef DDS_DCPSInterface_out < logevent_tempErrorDataReaderView> logevent_tempErrorDataReaderView_out;


   class logevent_updateDoneTypeSupportInterface;

   typedef logevent_updateDoneTypeSupportInterface * logevent_updateDoneTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < logevent_updateDoneTypeSupportInterface> logevent_updateDoneTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < logevent_updateDoneTypeSupportInterface> logevent_updateDoneTypeSupportInterface_out;


   class logevent_updateDoneDataWriter;

   typedef logevent_updateDoneDataWriter * logevent_updateDoneDataWriter_ptr;
   typedef DDS_DCPSInterface_var < logevent_updateDoneDataWriter> logevent_updateDoneDataWriter_var;
   typedef DDS_DCPSInterface_out < logevent_updateDoneDataWriter> logevent_updateDoneDataWriter_out;


   class logevent_updateDoneDataReader;

   typedef logevent_updateDoneDataReader * logevent_updateDoneDataReader_ptr;
   typedef DDS_DCPSInterface_var < logevent_updateDoneDataReader> logevent_updateDoneDataReader_var;
   typedef DDS_DCPSInterface_out < logevent_updateDoneDataReader> logevent_updateDoneDataReader_out;


   class logevent_updateDoneDataReaderView;

   typedef logevent_updateDoneDataReaderView * logevent_updateDoneDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < logevent_updateDoneDataReaderView> logevent_updateDoneDataReaderView_var;
   typedef DDS_DCPSInterface_out < logevent_updateDoneDataReaderView> logevent_updateDoneDataReaderView_out;


   class logevent_updateErrorTypeSupportInterface;

   typedef logevent_updateErrorTypeSupportInterface * logevent_updateErrorTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < logevent_updateErrorTypeSupportInterface> logevent_updateErrorTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < logevent_updateErrorTypeSupportInterface> logevent_updateErrorTypeSupportInterface_out;


   class logevent_updateErrorDataWriter;

   typedef logevent_updateErrorDataWriter * logevent_updateErrorDataWriter_ptr;
   typedef DDS_DCPSInterface_var < logevent_updateErrorDataWriter> logevent_updateErrorDataWriter_var;
   typedef DDS_DCPSInterface_out < logevent_updateErrorDataWriter> logevent_updateErrorDataWriter_out;


   class logevent_updateErrorDataReader;

   typedef logevent_updateErrorDataReader * logevent_updateErrorDataReader_ptr;
   typedef DDS_DCPSInterface_var < logevent_updateErrorDataReader> logevent_updateErrorDataReader_var;
   typedef DDS_DCPSInterface_out < logevent_updateErrorDataReader> logevent_updateErrorDataReader_out;


   class logevent_updateErrorDataReaderView;

   typedef logevent_updateErrorDataReaderView * logevent_updateErrorDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < logevent_updateErrorDataReaderView> logevent_updateErrorDataReaderView_var;
   typedef DDS_DCPSInterface_out < logevent_updateErrorDataReaderView> logevent_updateErrorDataReaderView_out;


   class commandTypeSupportInterface;

   typedef commandTypeSupportInterface * commandTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < commandTypeSupportInterface> commandTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < commandTypeSupportInterface> commandTypeSupportInterface_out;


   class commandDataWriter;

   typedef commandDataWriter * commandDataWriter_ptr;
   typedef DDS_DCPSInterface_var < commandDataWriter> commandDataWriter_var;
   typedef DDS_DCPSInterface_out < commandDataWriter> commandDataWriter_out;


   class commandDataReader;

   typedef commandDataReader * commandDataReader_ptr;
   typedef DDS_DCPSInterface_var < commandDataReader> commandDataReader_var;
   typedef DDS_DCPSInterface_out < commandDataReader> commandDataReader_out;


   class commandDataReaderView;

   typedef commandDataReaderView * commandDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < commandDataReaderView> commandDataReaderView_var;
   typedef DDS_DCPSInterface_out < commandDataReaderView> commandDataReaderView_out;


   class ackcmdTypeSupportInterface;

   typedef ackcmdTypeSupportInterface * ackcmdTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < ackcmdTypeSupportInterface> ackcmdTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < ackcmdTypeSupportInterface> ackcmdTypeSupportInterface_out;


   class ackcmdDataWriter;

   typedef ackcmdDataWriter * ackcmdDataWriter_ptr;
   typedef DDS_DCPSInterface_var < ackcmdDataWriter> ackcmdDataWriter_var;
   typedef DDS_DCPSInterface_out < ackcmdDataWriter> ackcmdDataWriter_out;


   class ackcmdDataReader;

   typedef ackcmdDataReader * ackcmdDataReader_ptr;
   typedef DDS_DCPSInterface_var < ackcmdDataReader> ackcmdDataReader_var;
   typedef DDS_DCPSInterface_out < ackcmdDataReader> ackcmdDataReader_out;


   class ackcmdDataReaderView;

   typedef ackcmdDataReaderView * ackcmdDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < ackcmdDataReaderView> ackcmdDataReaderView_var;
   typedef DDS_DCPSInterface_out < ackcmdDataReaderView> ackcmdDataReaderView_out;


   class logeventTypeSupportInterface;

   typedef logeventTypeSupportInterface * logeventTypeSupportInterface_ptr;
   typedef DDS_DCPSInterface_var < logeventTypeSupportInterface> logeventTypeSupportInterface_var;
   typedef DDS_DCPSInterface_out < logeventTypeSupportInterface> logeventTypeSupportInterface_out;


   class logeventDataWriter;

   typedef logeventDataWriter * logeventDataWriter_ptr;
   typedef DDS_DCPSInterface_var < logeventDataWriter> logeventDataWriter_var;
   typedef DDS_DCPSInterface_out < logeventDataWriter> logeventDataWriter_out;


   class logeventDataReader;

   typedef logeventDataReader * logeventDataReader_ptr;
   typedef DDS_DCPSInterface_var < logeventDataReader> logeventDataReader_var;
   typedef DDS_DCPSInterface_out < logeventDataReader> logeventDataReader_out;


   class logeventDataReaderView;

   typedef logeventDataReaderView * logeventDataReaderView_ptr;
   typedef DDS_DCPSInterface_var < logeventDataReaderView> logeventDataReaderView_var;
   typedef DDS_DCPSInterface_out < logeventDataReaderView> logeventDataReaderView_out;

   struct ActuatorsSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < Actuators, struct ActuatorsSeq_uniq_> ActuatorsSeq;
   typedef DDS_DCPSSequence_var < ActuatorsSeq> ActuatorsSeq_var;
   typedef DDS_DCPSSequence_out < ActuatorsSeq> ActuatorsSeq_out;
   class ActuatorsTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef ActuatorsTypeSupportInterface_ptr _ptr_type;
      typedef ActuatorsTypeSupportInterface_var _var_type;

      static ActuatorsTypeSupportInterface_ptr _duplicate (ActuatorsTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ActuatorsTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static ActuatorsTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ActuatorsTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      ActuatorsTypeSupportInterface_ptr _this () { return this; }


   protected:
      ActuatorsTypeSupportInterface () {};
      ~ActuatorsTypeSupportInterface () {};
   private:
      ActuatorsTypeSupportInterface (const ActuatorsTypeSupportInterface &);
      ActuatorsTypeSupportInterface & operator = (const ActuatorsTypeSupportInterface &);
   };

   class ActuatorsDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef ActuatorsDataWriter_ptr _ptr_type;
      typedef ActuatorsDataWriter_var _var_type;

      static ActuatorsDataWriter_ptr _duplicate (ActuatorsDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ActuatorsDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static ActuatorsDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ActuatorsDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      ActuatorsDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const Actuators& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const Actuators& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const Actuators& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const Actuators& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const Actuators& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const Actuators& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const Actuators& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const Actuators& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const Actuators& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const Actuators& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (Actuators& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Actuators& instance_data) = 0;

   protected:
      ActuatorsDataWriter () {};
      ~ActuatorsDataWriter () {};
   private:
      ActuatorsDataWriter (const ActuatorsDataWriter &);
      ActuatorsDataWriter & operator = (const ActuatorsDataWriter &);
   };

   class ActuatorsDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef ActuatorsDataReader_ptr _ptr_type;
      typedef ActuatorsDataReader_var _var_type;

      static ActuatorsDataReader_ptr _duplicate (ActuatorsDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ActuatorsDataReader_ptr _narrow (DDS::Object_ptr obj);
      static ActuatorsDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ActuatorsDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      ActuatorsDataReader_ptr _this () { return this; }

      virtual DDS::Long read (ActuatorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (ActuatorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (ActuatorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (ActuatorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (Actuators& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (Actuators& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (ActuatorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (ActuatorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (ActuatorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (ActuatorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (ActuatorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (ActuatorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (ActuatorsSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (Actuators& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Actuators& instance) = 0;

   protected:
      ActuatorsDataReader () {};
      ~ActuatorsDataReader () {};
   private:
      ActuatorsDataReader (const ActuatorsDataReader &);
      ActuatorsDataReader & operator = (const ActuatorsDataReader &);
   };

   class ActuatorsDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef ActuatorsDataReaderView_ptr _ptr_type;
      typedef ActuatorsDataReaderView_var _var_type;

      static ActuatorsDataReaderView_ptr _duplicate (ActuatorsDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ActuatorsDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static ActuatorsDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ActuatorsDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      ActuatorsDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (ActuatorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (ActuatorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (ActuatorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (ActuatorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (Actuators& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (Actuators& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (ActuatorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (ActuatorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (ActuatorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (ActuatorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (ActuatorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (ActuatorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (ActuatorsSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (Actuators& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Actuators& instance) = 0;

   protected:
      ActuatorsDataReaderView () {};
      ~ActuatorsDataReaderView () {};
   private:
      ActuatorsDataReaderView (const ActuatorsDataReaderView &);
      ActuatorsDataReaderView & operator = (const ActuatorsDataReaderView &);
   };

   struct ApplicationSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < Application, struct ApplicationSeq_uniq_> ApplicationSeq;
   typedef DDS_DCPSSequence_var < ApplicationSeq> ApplicationSeq_var;
   typedef DDS_DCPSSequence_out < ApplicationSeq> ApplicationSeq_out;
   class ApplicationTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef ApplicationTypeSupportInterface_ptr _ptr_type;
      typedef ApplicationTypeSupportInterface_var _var_type;

      static ApplicationTypeSupportInterface_ptr _duplicate (ApplicationTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ApplicationTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static ApplicationTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ApplicationTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      ApplicationTypeSupportInterface_ptr _this () { return this; }


   protected:
      ApplicationTypeSupportInterface () {};
      ~ApplicationTypeSupportInterface () {};
   private:
      ApplicationTypeSupportInterface (const ApplicationTypeSupportInterface &);
      ApplicationTypeSupportInterface & operator = (const ApplicationTypeSupportInterface &);
   };

   class ApplicationDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef ApplicationDataWriter_ptr _ptr_type;
      typedef ApplicationDataWriter_var _var_type;

      static ApplicationDataWriter_ptr _duplicate (ApplicationDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ApplicationDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static ApplicationDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ApplicationDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      ApplicationDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const Application& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const Application& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const Application& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const Application& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const Application& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const Application& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const Application& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const Application& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const Application& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const Application& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (Application& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Application& instance_data) = 0;

   protected:
      ApplicationDataWriter () {};
      ~ApplicationDataWriter () {};
   private:
      ApplicationDataWriter (const ApplicationDataWriter &);
      ApplicationDataWriter & operator = (const ApplicationDataWriter &);
   };

   class ApplicationDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef ApplicationDataReader_ptr _ptr_type;
      typedef ApplicationDataReader_var _var_type;

      static ApplicationDataReader_ptr _duplicate (ApplicationDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ApplicationDataReader_ptr _narrow (DDS::Object_ptr obj);
      static ApplicationDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ApplicationDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      ApplicationDataReader_ptr _this () { return this; }

      virtual DDS::Long read (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (Application& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (Application& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (Application& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Application& instance) = 0;

   protected:
      ApplicationDataReader () {};
      ~ApplicationDataReader () {};
   private:
      ApplicationDataReader (const ApplicationDataReader &);
      ApplicationDataReader & operator = (const ApplicationDataReader &);
   };

   class ApplicationDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef ApplicationDataReaderView_ptr _ptr_type;
      typedef ApplicationDataReaderView_var _var_type;

      static ApplicationDataReaderView_ptr _duplicate (ApplicationDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ApplicationDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static ApplicationDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ApplicationDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      ApplicationDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (Application& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (Application& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (ApplicationSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (Application& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Application& instance) = 0;

   protected:
      ApplicationDataReaderView () {};
      ~ApplicationDataReaderView () {};
   private:
      ApplicationDataReaderView (const ApplicationDataReaderView &);
      ApplicationDataReaderView & operator = (const ApplicationDataReaderView &);
   };

   struct ElectricalSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < Electrical, struct ElectricalSeq_uniq_> ElectricalSeq;
   typedef DDS_DCPSSequence_var < ElectricalSeq> ElectricalSeq_var;
   typedef DDS_DCPSSequence_out < ElectricalSeq> ElectricalSeq_out;
   class ElectricalTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef ElectricalTypeSupportInterface_ptr _ptr_type;
      typedef ElectricalTypeSupportInterface_var _var_type;

      static ElectricalTypeSupportInterface_ptr _duplicate (ElectricalTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ElectricalTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static ElectricalTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ElectricalTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      ElectricalTypeSupportInterface_ptr _this () { return this; }


   protected:
      ElectricalTypeSupportInterface () {};
      ~ElectricalTypeSupportInterface () {};
   private:
      ElectricalTypeSupportInterface (const ElectricalTypeSupportInterface &);
      ElectricalTypeSupportInterface & operator = (const ElectricalTypeSupportInterface &);
   };

   class ElectricalDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef ElectricalDataWriter_ptr _ptr_type;
      typedef ElectricalDataWriter_var _var_type;

      static ElectricalDataWriter_ptr _duplicate (ElectricalDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ElectricalDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static ElectricalDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ElectricalDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      ElectricalDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const Electrical& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const Electrical& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const Electrical& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const Electrical& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const Electrical& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const Electrical& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const Electrical& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const Electrical& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const Electrical& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const Electrical& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (Electrical& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Electrical& instance_data) = 0;

   protected:
      ElectricalDataWriter () {};
      ~ElectricalDataWriter () {};
   private:
      ElectricalDataWriter (const ElectricalDataWriter &);
      ElectricalDataWriter & operator = (const ElectricalDataWriter &);
   };

   class ElectricalDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef ElectricalDataReader_ptr _ptr_type;
      typedef ElectricalDataReader_var _var_type;

      static ElectricalDataReader_ptr _duplicate (ElectricalDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ElectricalDataReader_ptr _narrow (DDS::Object_ptr obj);
      static ElectricalDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ElectricalDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      ElectricalDataReader_ptr _this () { return this; }

      virtual DDS::Long read (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (Electrical& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (Electrical& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (Electrical& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Electrical& instance) = 0;

   protected:
      ElectricalDataReader () {};
      ~ElectricalDataReader () {};
   private:
      ElectricalDataReader (const ElectricalDataReader &);
      ElectricalDataReader & operator = (const ElectricalDataReader &);
   };

   class ElectricalDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef ElectricalDataReaderView_ptr _ptr_type;
      typedef ElectricalDataReaderView_var _var_type;

      static ElectricalDataReaderView_ptr _duplicate (ElectricalDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ElectricalDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static ElectricalDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ElectricalDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      ElectricalDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (Electrical& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (Electrical& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (ElectricalSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (Electrical& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Electrical& instance) = 0;

   protected:
      ElectricalDataReaderView () {};
      ~ElectricalDataReaderView () {};
   private:
      ElectricalDataReaderView (const ElectricalDataReaderView &);
      ElectricalDataReaderView & operator = (const ElectricalDataReaderView &);
   };

   struct LimitSensorsSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < LimitSensors, struct LimitSensorsSeq_uniq_> LimitSensorsSeq;
   typedef DDS_DCPSSequence_var < LimitSensorsSeq> LimitSensorsSeq_var;
   typedef DDS_DCPSSequence_out < LimitSensorsSeq> LimitSensorsSeq_out;
   class LimitSensorsTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef LimitSensorsTypeSupportInterface_ptr _ptr_type;
      typedef LimitSensorsTypeSupportInterface_var _var_type;

      static LimitSensorsTypeSupportInterface_ptr _duplicate (LimitSensorsTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static LimitSensorsTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static LimitSensorsTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static LimitSensorsTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      LimitSensorsTypeSupportInterface_ptr _this () { return this; }


   protected:
      LimitSensorsTypeSupportInterface () {};
      ~LimitSensorsTypeSupportInterface () {};
   private:
      LimitSensorsTypeSupportInterface (const LimitSensorsTypeSupportInterface &);
      LimitSensorsTypeSupportInterface & operator = (const LimitSensorsTypeSupportInterface &);
   };

   class LimitSensorsDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef LimitSensorsDataWriter_ptr _ptr_type;
      typedef LimitSensorsDataWriter_var _var_type;

      static LimitSensorsDataWriter_ptr _duplicate (LimitSensorsDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static LimitSensorsDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static LimitSensorsDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static LimitSensorsDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      LimitSensorsDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const LimitSensors& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const LimitSensors& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const LimitSensors& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const LimitSensors& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const LimitSensors& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const LimitSensors& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const LimitSensors& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const LimitSensors& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const LimitSensors& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const LimitSensors& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (LimitSensors& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const LimitSensors& instance_data) = 0;

   protected:
      LimitSensorsDataWriter () {};
      ~LimitSensorsDataWriter () {};
   private:
      LimitSensorsDataWriter (const LimitSensorsDataWriter &);
      LimitSensorsDataWriter & operator = (const LimitSensorsDataWriter &);
   };

   class LimitSensorsDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef LimitSensorsDataReader_ptr _ptr_type;
      typedef LimitSensorsDataReader_var _var_type;

      static LimitSensorsDataReader_ptr _duplicate (LimitSensorsDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static LimitSensorsDataReader_ptr _narrow (DDS::Object_ptr obj);
      static LimitSensorsDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static LimitSensorsDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      LimitSensorsDataReader_ptr _this () { return this; }

      virtual DDS::Long read (LimitSensorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (LimitSensorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (LimitSensorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (LimitSensorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (LimitSensors& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (LimitSensors& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (LimitSensorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (LimitSensorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (LimitSensorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (LimitSensorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (LimitSensorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (LimitSensorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (LimitSensorsSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (LimitSensors& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const LimitSensors& instance) = 0;

   protected:
      LimitSensorsDataReader () {};
      ~LimitSensorsDataReader () {};
   private:
      LimitSensorsDataReader (const LimitSensorsDataReader &);
      LimitSensorsDataReader & operator = (const LimitSensorsDataReader &);
   };

   class LimitSensorsDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef LimitSensorsDataReaderView_ptr _ptr_type;
      typedef LimitSensorsDataReaderView_var _var_type;

      static LimitSensorsDataReaderView_ptr _duplicate (LimitSensorsDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static LimitSensorsDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static LimitSensorsDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static LimitSensorsDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      LimitSensorsDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (LimitSensorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (LimitSensorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (LimitSensorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (LimitSensorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (LimitSensors& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (LimitSensors& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (LimitSensorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (LimitSensorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (LimitSensorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (LimitSensorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (LimitSensorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (LimitSensorsSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (LimitSensorsSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (LimitSensors& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const LimitSensors& instance) = 0;

   protected:
      LimitSensorsDataReaderView () {};
      ~LimitSensorsDataReaderView () {};
   private:
      LimitSensorsDataReaderView (const LimitSensorsDataReaderView &);
      LimitSensorsDataReaderView & operator = (const LimitSensorsDataReaderView &);
   };

   struct MetrologySeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < Metrology, struct MetrologySeq_uniq_> MetrologySeq;
   typedef DDS_DCPSSequence_var < MetrologySeq> MetrologySeq_var;
   typedef DDS_DCPSSequence_out < MetrologySeq> MetrologySeq_out;
   class MetrologyTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef MetrologyTypeSupportInterface_ptr _ptr_type;
      typedef MetrologyTypeSupportInterface_var _var_type;

      static MetrologyTypeSupportInterface_ptr _duplicate (MetrologyTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static MetrologyTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static MetrologyTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static MetrologyTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      MetrologyTypeSupportInterface_ptr _this () { return this; }


   protected:
      MetrologyTypeSupportInterface () {};
      ~MetrologyTypeSupportInterface () {};
   private:
      MetrologyTypeSupportInterface (const MetrologyTypeSupportInterface &);
      MetrologyTypeSupportInterface & operator = (const MetrologyTypeSupportInterface &);
   };

   class MetrologyDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef MetrologyDataWriter_ptr _ptr_type;
      typedef MetrologyDataWriter_var _var_type;

      static MetrologyDataWriter_ptr _duplicate (MetrologyDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static MetrologyDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static MetrologyDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static MetrologyDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      MetrologyDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const Metrology& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const Metrology& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const Metrology& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const Metrology& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const Metrology& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const Metrology& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const Metrology& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const Metrology& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const Metrology& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const Metrology& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (Metrology& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Metrology& instance_data) = 0;

   protected:
      MetrologyDataWriter () {};
      ~MetrologyDataWriter () {};
   private:
      MetrologyDataWriter (const MetrologyDataWriter &);
      MetrologyDataWriter & operator = (const MetrologyDataWriter &);
   };

   class MetrologyDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef MetrologyDataReader_ptr _ptr_type;
      typedef MetrologyDataReader_var _var_type;

      static MetrologyDataReader_ptr _duplicate (MetrologyDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static MetrologyDataReader_ptr _narrow (DDS::Object_ptr obj);
      static MetrologyDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static MetrologyDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      MetrologyDataReader_ptr _this () { return this; }

      virtual DDS::Long read (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (Metrology& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (Metrology& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (Metrology& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Metrology& instance) = 0;

   protected:
      MetrologyDataReader () {};
      ~MetrologyDataReader () {};
   private:
      MetrologyDataReader (const MetrologyDataReader &);
      MetrologyDataReader & operator = (const MetrologyDataReader &);
   };

   class MetrologyDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef MetrologyDataReaderView_ptr _ptr_type;
      typedef MetrologyDataReaderView_var _var_type;

      static MetrologyDataReaderView_ptr _duplicate (MetrologyDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static MetrologyDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static MetrologyDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static MetrologyDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      MetrologyDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (Metrology& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (Metrology& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (MetrologySeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (Metrology& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Metrology& instance) = 0;

   protected:
      MetrologyDataReaderView () {};
      ~MetrologyDataReaderView () {};
   private:
      MetrologyDataReaderView (const MetrologyDataReaderView &);
      MetrologyDataReaderView & operator = (const MetrologyDataReaderView &);
   };

   struct SurfaceSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < Surface, struct SurfaceSeq_uniq_> SurfaceSeq;
   typedef DDS_DCPSSequence_var < SurfaceSeq> SurfaceSeq_var;
   typedef DDS_DCPSSequence_out < SurfaceSeq> SurfaceSeq_out;
   class SurfaceTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef SurfaceTypeSupportInterface_ptr _ptr_type;
      typedef SurfaceTypeSupportInterface_var _var_type;

      static SurfaceTypeSupportInterface_ptr _duplicate (SurfaceTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static SurfaceTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static SurfaceTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static SurfaceTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      SurfaceTypeSupportInterface_ptr _this () { return this; }


   protected:
      SurfaceTypeSupportInterface () {};
      ~SurfaceTypeSupportInterface () {};
   private:
      SurfaceTypeSupportInterface (const SurfaceTypeSupportInterface &);
      SurfaceTypeSupportInterface & operator = (const SurfaceTypeSupportInterface &);
   };

   class SurfaceDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef SurfaceDataWriter_ptr _ptr_type;
      typedef SurfaceDataWriter_var _var_type;

      static SurfaceDataWriter_ptr _duplicate (SurfaceDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static SurfaceDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static SurfaceDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static SurfaceDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      SurfaceDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const Surface& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const Surface& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const Surface& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const Surface& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const Surface& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const Surface& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const Surface& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const Surface& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const Surface& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const Surface& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (Surface& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Surface& instance_data) = 0;

   protected:
      SurfaceDataWriter () {};
      ~SurfaceDataWriter () {};
   private:
      SurfaceDataWriter (const SurfaceDataWriter &);
      SurfaceDataWriter & operator = (const SurfaceDataWriter &);
   };

   class SurfaceDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef SurfaceDataReader_ptr _ptr_type;
      typedef SurfaceDataReader_var _var_type;

      static SurfaceDataReader_ptr _duplicate (SurfaceDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static SurfaceDataReader_ptr _narrow (DDS::Object_ptr obj);
      static SurfaceDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static SurfaceDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      SurfaceDataReader_ptr _this () { return this; }

      virtual DDS::Long read (SurfaceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (SurfaceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (SurfaceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (SurfaceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (Surface& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (Surface& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (SurfaceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (SurfaceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (SurfaceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (SurfaceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (SurfaceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (SurfaceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (SurfaceSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (Surface& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Surface& instance) = 0;

   protected:
      SurfaceDataReader () {};
      ~SurfaceDataReader () {};
   private:
      SurfaceDataReader (const SurfaceDataReader &);
      SurfaceDataReader & operator = (const SurfaceDataReader &);
   };

   class SurfaceDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef SurfaceDataReaderView_ptr _ptr_type;
      typedef SurfaceDataReaderView_var _var_type;

      static SurfaceDataReaderView_ptr _duplicate (SurfaceDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static SurfaceDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static SurfaceDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static SurfaceDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      SurfaceDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (SurfaceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (SurfaceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (SurfaceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (SurfaceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (Surface& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (Surface& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (SurfaceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (SurfaceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (SurfaceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (SurfaceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (SurfaceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (SurfaceSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (SurfaceSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (Surface& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const Surface& instance) = 0;

   protected:
      SurfaceDataReaderView () {};
      ~SurfaceDataReaderView () {};
   private:
      SurfaceDataReaderView (const SurfaceDataReaderView &);
      SurfaceDataReaderView & operator = (const SurfaceDataReaderView &);
   };

   struct TCSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < TC, struct TCSeq_uniq_> TCSeq;
   typedef DDS_DCPSSequence_var < TCSeq> TCSeq_var;
   typedef DDS_DCPSSequence_out < TCSeq> TCSeq_out;
   class TCTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef TCTypeSupportInterface_ptr _ptr_type;
      typedef TCTypeSupportInterface_var _var_type;

      static TCTypeSupportInterface_ptr _duplicate (TCTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static TCTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static TCTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static TCTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      TCTypeSupportInterface_ptr _this () { return this; }


   protected:
      TCTypeSupportInterface () {};
      ~TCTypeSupportInterface () {};
   private:
      TCTypeSupportInterface (const TCTypeSupportInterface &);
      TCTypeSupportInterface & operator = (const TCTypeSupportInterface &);
   };

   class TCDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef TCDataWriter_ptr _ptr_type;
      typedef TCDataWriter_var _var_type;

      static TCDataWriter_ptr _duplicate (TCDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static TCDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static TCDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static TCDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      TCDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const TC& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const TC& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const TC& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const TC& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const TC& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const TC& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const TC& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const TC& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const TC& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const TC& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (TC& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const TC& instance_data) = 0;

   protected:
      TCDataWriter () {};
      ~TCDataWriter () {};
   private:
      TCDataWriter (const TCDataWriter &);
      TCDataWriter & operator = (const TCDataWriter &);
   };

   class TCDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef TCDataReader_ptr _ptr_type;
      typedef TCDataReader_var _var_type;

      static TCDataReader_ptr _duplicate (TCDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static TCDataReader_ptr _narrow (DDS::Object_ptr obj);
      static TCDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static TCDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      TCDataReader_ptr _this () { return this; }

      virtual DDS::Long read (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (TC& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (TC& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (TCSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (TC& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const TC& instance) = 0;

   protected:
      TCDataReader () {};
      ~TCDataReader () {};
   private:
      TCDataReader (const TCDataReader &);
      TCDataReader & operator = (const TCDataReader &);
   };

   class TCDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef TCDataReaderView_ptr _ptr_type;
      typedef TCDataReaderView_var _var_type;

      static TCDataReaderView_ptr _duplicate (TCDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static TCDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static TCDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static TCDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      TCDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (TC& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (TC& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (TCSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (TCSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (TC& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const TC& instance) = 0;

   protected:
      TCDataReaderView () {};
      ~TCDataReaderView () {};
   private:
      TCDataReaderView (const TCDataReaderView &);
      TCDataReaderView & operator = (const TCDataReaderView &);
   };

   struct command_abortSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < command_abort, struct command_abortSeq_uniq_> command_abortSeq;
   typedef DDS_DCPSSequence_var < command_abortSeq> command_abortSeq_var;
   typedef DDS_DCPSSequence_out < command_abortSeq> command_abortSeq_out;
   class command_abortTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef command_abortTypeSupportInterface_ptr _ptr_type;
      typedef command_abortTypeSupportInterface_var _var_type;

      static command_abortTypeSupportInterface_ptr _duplicate (command_abortTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_abortTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static command_abortTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_abortTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      command_abortTypeSupportInterface_ptr _this () { return this; }


   protected:
      command_abortTypeSupportInterface () {};
      ~command_abortTypeSupportInterface () {};
   private:
      command_abortTypeSupportInterface (const command_abortTypeSupportInterface &);
      command_abortTypeSupportInterface & operator = (const command_abortTypeSupportInterface &);
   };

   class command_abortDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef command_abortDataWriter_ptr _ptr_type;
      typedef command_abortDataWriter_var _var_type;

      static command_abortDataWriter_ptr _duplicate (command_abortDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_abortDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static command_abortDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_abortDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      command_abortDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const command_abort& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const command_abort& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const command_abort& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const command_abort& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const command_abort& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const command_abort& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const command_abort& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const command_abort& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const command_abort& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const command_abort& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (command_abort& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_abort& instance_data) = 0;

   protected:
      command_abortDataWriter () {};
      ~command_abortDataWriter () {};
   private:
      command_abortDataWriter (const command_abortDataWriter &);
      command_abortDataWriter & operator = (const command_abortDataWriter &);
   };

   class command_abortDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef command_abortDataReader_ptr _ptr_type;
      typedef command_abortDataReader_var _var_type;

      static command_abortDataReader_ptr _duplicate (command_abortDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_abortDataReader_ptr _narrow (DDS::Object_ptr obj);
      static command_abortDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_abortDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      command_abortDataReader_ptr _this () { return this; }

      virtual DDS::Long read (command_abortSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_abortSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_abortSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_abortSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_abort& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_abort& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_abortSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_abortSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_abortSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_abortSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_abortSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_abortSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_abortSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_abort& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_abort& instance) = 0;

   protected:
      command_abortDataReader () {};
      ~command_abortDataReader () {};
   private:
      command_abortDataReader (const command_abortDataReader &);
      command_abortDataReader & operator = (const command_abortDataReader &);
   };

   class command_abortDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef command_abortDataReaderView_ptr _ptr_type;
      typedef command_abortDataReaderView_var _var_type;

      static command_abortDataReaderView_ptr _duplicate (command_abortDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_abortDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static command_abortDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_abortDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      command_abortDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (command_abortSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_abortSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_abortSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_abortSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_abort& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_abort& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_abortSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_abortSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_abortSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_abortSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_abortSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_abortSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_abortSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_abort& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_abort& instance) = 0;

   protected:
      command_abortDataReaderView () {};
      ~command_abortDataReaderView () {};
   private:
      command_abortDataReaderView (const command_abortDataReaderView &);
      command_abortDataReaderView & operator = (const command_abortDataReaderView &);
   };

   struct command_configureSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < command_configure, struct command_configureSeq_uniq_> command_configureSeq;
   typedef DDS_DCPSSequence_var < command_configureSeq> command_configureSeq_var;
   typedef DDS_DCPSSequence_out < command_configureSeq> command_configureSeq_out;
   class command_configureTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef command_configureTypeSupportInterface_ptr _ptr_type;
      typedef command_configureTypeSupportInterface_var _var_type;

      static command_configureTypeSupportInterface_ptr _duplicate (command_configureTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_configureTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static command_configureTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_configureTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      command_configureTypeSupportInterface_ptr _this () { return this; }


   protected:
      command_configureTypeSupportInterface () {};
      ~command_configureTypeSupportInterface () {};
   private:
      command_configureTypeSupportInterface (const command_configureTypeSupportInterface &);
      command_configureTypeSupportInterface & operator = (const command_configureTypeSupportInterface &);
   };

   class command_configureDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef command_configureDataWriter_ptr _ptr_type;
      typedef command_configureDataWriter_var _var_type;

      static command_configureDataWriter_ptr _duplicate (command_configureDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_configureDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static command_configureDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_configureDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      command_configureDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const command_configure& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const command_configure& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const command_configure& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const command_configure& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const command_configure& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const command_configure& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const command_configure& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const command_configure& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const command_configure& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const command_configure& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (command_configure& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_configure& instance_data) = 0;

   protected:
      command_configureDataWriter () {};
      ~command_configureDataWriter () {};
   private:
      command_configureDataWriter (const command_configureDataWriter &);
      command_configureDataWriter & operator = (const command_configureDataWriter &);
   };

   class command_configureDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef command_configureDataReader_ptr _ptr_type;
      typedef command_configureDataReader_var _var_type;

      static command_configureDataReader_ptr _duplicate (command_configureDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_configureDataReader_ptr _narrow (DDS::Object_ptr obj);
      static command_configureDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_configureDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      command_configureDataReader_ptr _this () { return this; }

      virtual DDS::Long read (command_configureSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_configureSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_configureSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_configureSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_configure& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_configure& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_configureSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_configureSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_configureSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_configureSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_configureSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_configureSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_configureSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_configure& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_configure& instance) = 0;

   protected:
      command_configureDataReader () {};
      ~command_configureDataReader () {};
   private:
      command_configureDataReader (const command_configureDataReader &);
      command_configureDataReader & operator = (const command_configureDataReader &);
   };

   class command_configureDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef command_configureDataReaderView_ptr _ptr_type;
      typedef command_configureDataReaderView_var _var_type;

      static command_configureDataReaderView_ptr _duplicate (command_configureDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_configureDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static command_configureDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_configureDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      command_configureDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (command_configureSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_configureSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_configureSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_configureSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_configure& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_configure& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_configureSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_configureSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_configureSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_configureSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_configureSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_configureSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_configureSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_configure& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_configure& instance) = 0;

   protected:
      command_configureDataReaderView () {};
      ~command_configureDataReaderView () {};
   private:
      command_configureDataReaderView (const command_configureDataReaderView &);
      command_configureDataReaderView & operator = (const command_configureDataReaderView &);
   };

   struct command_statusSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < command_status, struct command_statusSeq_uniq_> command_statusSeq;
   typedef DDS_DCPSSequence_var < command_statusSeq> command_statusSeq_var;
   typedef DDS_DCPSSequence_out < command_statusSeq> command_statusSeq_out;
   class command_statusTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef command_statusTypeSupportInterface_ptr _ptr_type;
      typedef command_statusTypeSupportInterface_var _var_type;

      static command_statusTypeSupportInterface_ptr _duplicate (command_statusTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_statusTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static command_statusTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_statusTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      command_statusTypeSupportInterface_ptr _this () { return this; }


   protected:
      command_statusTypeSupportInterface () {};
      ~command_statusTypeSupportInterface () {};
   private:
      command_statusTypeSupportInterface (const command_statusTypeSupportInterface &);
      command_statusTypeSupportInterface & operator = (const command_statusTypeSupportInterface &);
   };

   class command_statusDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef command_statusDataWriter_ptr _ptr_type;
      typedef command_statusDataWriter_var _var_type;

      static command_statusDataWriter_ptr _duplicate (command_statusDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_statusDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static command_statusDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_statusDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      command_statusDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const command_status& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const command_status& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const command_status& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const command_status& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const command_status& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const command_status& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const command_status& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const command_status& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const command_status& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const command_status& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (command_status& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_status& instance_data) = 0;

   protected:
      command_statusDataWriter () {};
      ~command_statusDataWriter () {};
   private:
      command_statusDataWriter (const command_statusDataWriter &);
      command_statusDataWriter & operator = (const command_statusDataWriter &);
   };

   class command_statusDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef command_statusDataReader_ptr _ptr_type;
      typedef command_statusDataReader_var _var_type;

      static command_statusDataReader_ptr _duplicate (command_statusDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_statusDataReader_ptr _narrow (DDS::Object_ptr obj);
      static command_statusDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_statusDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      command_statusDataReader_ptr _this () { return this; }

      virtual DDS::Long read (command_statusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_statusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_statusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_statusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_status& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_status& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_statusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_statusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_statusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_statusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_statusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_statusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_statusSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_status& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_status& instance) = 0;

   protected:
      command_statusDataReader () {};
      ~command_statusDataReader () {};
   private:
      command_statusDataReader (const command_statusDataReader &);
      command_statusDataReader & operator = (const command_statusDataReader &);
   };

   class command_statusDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef command_statusDataReaderView_ptr _ptr_type;
      typedef command_statusDataReaderView_var _var_type;

      static command_statusDataReaderView_ptr _duplicate (command_statusDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_statusDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static command_statusDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_statusDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      command_statusDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (command_statusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_statusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_statusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_statusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_status& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_status& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_statusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_statusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_statusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_statusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_statusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_statusSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_statusSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_status& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_status& instance) = 0;

   protected:
      command_statusDataReaderView () {};
      ~command_statusDataReaderView () {};
   private:
      command_statusDataReaderView (const command_statusDataReaderView &);
      command_statusDataReaderView & operator = (const command_statusDataReaderView &);
   };

   struct command_stopSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < command_stop, struct command_stopSeq_uniq_> command_stopSeq;
   typedef DDS_DCPSSequence_var < command_stopSeq> command_stopSeq_var;
   typedef DDS_DCPSSequence_out < command_stopSeq> command_stopSeq_out;
   class command_stopTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef command_stopTypeSupportInterface_ptr _ptr_type;
      typedef command_stopTypeSupportInterface_var _var_type;

      static command_stopTypeSupportInterface_ptr _duplicate (command_stopTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_stopTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static command_stopTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_stopTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      command_stopTypeSupportInterface_ptr _this () { return this; }


   protected:
      command_stopTypeSupportInterface () {};
      ~command_stopTypeSupportInterface () {};
   private:
      command_stopTypeSupportInterface (const command_stopTypeSupportInterface &);
      command_stopTypeSupportInterface & operator = (const command_stopTypeSupportInterface &);
   };

   class command_stopDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef command_stopDataWriter_ptr _ptr_type;
      typedef command_stopDataWriter_var _var_type;

      static command_stopDataWriter_ptr _duplicate (command_stopDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_stopDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static command_stopDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_stopDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      command_stopDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const command_stop& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const command_stop& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const command_stop& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const command_stop& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const command_stop& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const command_stop& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const command_stop& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const command_stop& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const command_stop& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const command_stop& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (command_stop& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_stop& instance_data) = 0;

   protected:
      command_stopDataWriter () {};
      ~command_stopDataWriter () {};
   private:
      command_stopDataWriter (const command_stopDataWriter &);
      command_stopDataWriter & operator = (const command_stopDataWriter &);
   };

   class command_stopDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef command_stopDataReader_ptr _ptr_type;
      typedef command_stopDataReader_var _var_type;

      static command_stopDataReader_ptr _duplicate (command_stopDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_stopDataReader_ptr _narrow (DDS::Object_ptr obj);
      static command_stopDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_stopDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      command_stopDataReader_ptr _this () { return this; }

      virtual DDS::Long read (command_stopSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_stopSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_stopSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_stopSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_stop& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_stop& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_stopSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_stopSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_stopSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_stopSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_stopSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_stopSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_stopSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_stop& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_stop& instance) = 0;

   protected:
      command_stopDataReader () {};
      ~command_stopDataReader () {};
   private:
      command_stopDataReader (const command_stopDataReader &);
      command_stopDataReader & operator = (const command_stopDataReader &);
   };

   class command_stopDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef command_stopDataReaderView_ptr _ptr_type;
      typedef command_stopDataReaderView_var _var_type;

      static command_stopDataReaderView_ptr _duplicate (command_stopDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_stopDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static command_stopDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_stopDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      command_stopDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (command_stopSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_stopSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_stopSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_stopSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_stop& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_stop& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_stopSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_stopSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_stopSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_stopSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_stopSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_stopSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_stopSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_stop& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_stop& instance) = 0;

   protected:
      command_stopDataReaderView () {};
      ~command_stopDataReaderView () {};
   private:
      command_stopDataReaderView (const command_stopDataReaderView &);
      command_stopDataReaderView & operator = (const command_stopDataReaderView &);
   };

   struct command_targetSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < command_target, struct command_targetSeq_uniq_> command_targetSeq;
   typedef DDS_DCPSSequence_var < command_targetSeq> command_targetSeq_var;
   typedef DDS_DCPSSequence_out < command_targetSeq> command_targetSeq_out;
   class command_targetTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef command_targetTypeSupportInterface_ptr _ptr_type;
      typedef command_targetTypeSupportInterface_var _var_type;

      static command_targetTypeSupportInterface_ptr _duplicate (command_targetTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_targetTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static command_targetTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_targetTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      command_targetTypeSupportInterface_ptr _this () { return this; }


   protected:
      command_targetTypeSupportInterface () {};
      ~command_targetTypeSupportInterface () {};
   private:
      command_targetTypeSupportInterface (const command_targetTypeSupportInterface &);
      command_targetTypeSupportInterface & operator = (const command_targetTypeSupportInterface &);
   };

   class command_targetDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef command_targetDataWriter_ptr _ptr_type;
      typedef command_targetDataWriter_var _var_type;

      static command_targetDataWriter_ptr _duplicate (command_targetDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_targetDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static command_targetDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_targetDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      command_targetDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const command_target& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const command_target& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const command_target& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const command_target& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const command_target& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const command_target& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const command_target& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const command_target& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const command_target& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const command_target& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (command_target& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_target& instance_data) = 0;

   protected:
      command_targetDataWriter () {};
      ~command_targetDataWriter () {};
   private:
      command_targetDataWriter (const command_targetDataWriter &);
      command_targetDataWriter & operator = (const command_targetDataWriter &);
   };

   class command_targetDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef command_targetDataReader_ptr _ptr_type;
      typedef command_targetDataReader_var _var_type;

      static command_targetDataReader_ptr _duplicate (command_targetDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_targetDataReader_ptr _narrow (DDS::Object_ptr obj);
      static command_targetDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_targetDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      command_targetDataReader_ptr _this () { return this; }

      virtual DDS::Long read (command_targetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_targetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_targetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_targetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_target& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_target& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_targetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_targetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_targetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_targetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_targetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_targetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_targetSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_target& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_target& instance) = 0;

   protected:
      command_targetDataReader () {};
      ~command_targetDataReader () {};
   private:
      command_targetDataReader (const command_targetDataReader &);
      command_targetDataReader & operator = (const command_targetDataReader &);
   };

   class command_targetDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef command_targetDataReaderView_ptr _ptr_type;
      typedef command_targetDataReaderView_var _var_type;

      static command_targetDataReaderView_ptr _duplicate (command_targetDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_targetDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static command_targetDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_targetDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      command_targetDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (command_targetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_targetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_targetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_targetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_target& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_target& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_targetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_targetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_targetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_targetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_targetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_targetSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_targetSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_target& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_target& instance) = 0;

   protected:
      command_targetDataReaderView () {};
      ~command_targetDataReaderView () {};
   private:
      command_targetDataReaderView (const command_targetDataReaderView &);
      command_targetDataReaderView & operator = (const command_targetDataReaderView &);
   };

   struct command_updateSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < command_update, struct command_updateSeq_uniq_> command_updateSeq;
   typedef DDS_DCPSSequence_var < command_updateSeq> command_updateSeq_var;
   typedef DDS_DCPSSequence_out < command_updateSeq> command_updateSeq_out;
   class command_updateTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef command_updateTypeSupportInterface_ptr _ptr_type;
      typedef command_updateTypeSupportInterface_var _var_type;

      static command_updateTypeSupportInterface_ptr _duplicate (command_updateTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_updateTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static command_updateTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_updateTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      command_updateTypeSupportInterface_ptr _this () { return this; }


   protected:
      command_updateTypeSupportInterface () {};
      ~command_updateTypeSupportInterface () {};
   private:
      command_updateTypeSupportInterface (const command_updateTypeSupportInterface &);
      command_updateTypeSupportInterface & operator = (const command_updateTypeSupportInterface &);
   };

   class command_updateDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef command_updateDataWriter_ptr _ptr_type;
      typedef command_updateDataWriter_var _var_type;

      static command_updateDataWriter_ptr _duplicate (command_updateDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_updateDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static command_updateDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_updateDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      command_updateDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const command_update& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const command_update& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const command_update& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const command_update& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const command_update& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const command_update& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const command_update& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const command_update& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const command_update& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const command_update& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (command_update& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_update& instance_data) = 0;

   protected:
      command_updateDataWriter () {};
      ~command_updateDataWriter () {};
   private:
      command_updateDataWriter (const command_updateDataWriter &);
      command_updateDataWriter & operator = (const command_updateDataWriter &);
   };

   class command_updateDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef command_updateDataReader_ptr _ptr_type;
      typedef command_updateDataReader_var _var_type;

      static command_updateDataReader_ptr _duplicate (command_updateDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_updateDataReader_ptr _narrow (DDS::Object_ptr obj);
      static command_updateDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_updateDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      command_updateDataReader_ptr _this () { return this; }

      virtual DDS::Long read (command_updateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_updateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_updateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_updateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_update& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_update& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_updateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_updateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_updateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_updateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_updateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_updateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_updateSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_update& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_update& instance) = 0;

   protected:
      command_updateDataReader () {};
      ~command_updateDataReader () {};
   private:
      command_updateDataReader (const command_updateDataReader &);
      command_updateDataReader & operator = (const command_updateDataReader &);
   };

   class command_updateDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef command_updateDataReaderView_ptr _ptr_type;
      typedef command_updateDataReaderView_var _var_type;

      static command_updateDataReaderView_ptr _duplicate (command_updateDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static command_updateDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static command_updateDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static command_updateDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      command_updateDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (command_updateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (command_updateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (command_updateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (command_updateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command_update& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command_update& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (command_updateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (command_updateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (command_updateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (command_updateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (command_updateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (command_updateSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (command_updateSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command_update& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command_update& instance) = 0;

   protected:
      command_updateDataReaderView () {};
      ~command_updateDataReaderView () {};
   private:
      command_updateDataReaderView (const command_updateDataReaderView &);
      command_updateDataReaderView & operator = (const command_updateDataReaderView &);
   };

   struct logevent_interlockSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < logevent_interlock, struct logevent_interlockSeq_uniq_> logevent_interlockSeq;
   typedef DDS_DCPSSequence_var < logevent_interlockSeq> logevent_interlockSeq_var;
   typedef DDS_DCPSSequence_out < logevent_interlockSeq> logevent_interlockSeq_out;
   class logevent_interlockTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef logevent_interlockTypeSupportInterface_ptr _ptr_type;
      typedef logevent_interlockTypeSupportInterface_var _var_type;

      static logevent_interlockTypeSupportInterface_ptr _duplicate (logevent_interlockTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_interlockTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static logevent_interlockTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_interlockTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_interlockTypeSupportInterface_ptr _this () { return this; }


   protected:
      logevent_interlockTypeSupportInterface () {};
      ~logevent_interlockTypeSupportInterface () {};
   private:
      logevent_interlockTypeSupportInterface (const logevent_interlockTypeSupportInterface &);
      logevent_interlockTypeSupportInterface & operator = (const logevent_interlockTypeSupportInterface &);
   };

   class logevent_interlockDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef logevent_interlockDataWriter_ptr _ptr_type;
      typedef logevent_interlockDataWriter_var _var_type;

      static logevent_interlockDataWriter_ptr _duplicate (logevent_interlockDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_interlockDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static logevent_interlockDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_interlockDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_interlockDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const logevent_interlock& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const logevent_interlock& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const logevent_interlock& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const logevent_interlock& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const logevent_interlock& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const logevent_interlock& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const logevent_interlock& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const logevent_interlock& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const logevent_interlock& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const logevent_interlock& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (logevent_interlock& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_interlock& instance_data) = 0;

   protected:
      logevent_interlockDataWriter () {};
      ~logevent_interlockDataWriter () {};
   private:
      logevent_interlockDataWriter (const logevent_interlockDataWriter &);
      logevent_interlockDataWriter & operator = (const logevent_interlockDataWriter &);
   };

   class logevent_interlockDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef logevent_interlockDataReader_ptr _ptr_type;
      typedef logevent_interlockDataReader_var _var_type;

      static logevent_interlockDataReader_ptr _duplicate (logevent_interlockDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_interlockDataReader_ptr _narrow (DDS::Object_ptr obj);
      static logevent_interlockDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_interlockDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_interlockDataReader_ptr _this () { return this; }

      virtual DDS::Long read (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_interlock& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_interlock& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_interlock& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_interlock& instance) = 0;

   protected:
      logevent_interlockDataReader () {};
      ~logevent_interlockDataReader () {};
   private:
      logevent_interlockDataReader (const logevent_interlockDataReader &);
      logevent_interlockDataReader & operator = (const logevent_interlockDataReader &);
   };

   class logevent_interlockDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef logevent_interlockDataReaderView_ptr _ptr_type;
      typedef logevent_interlockDataReaderView_var _var_type;

      static logevent_interlockDataReaderView_ptr _duplicate (logevent_interlockDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_interlockDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static logevent_interlockDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_interlockDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_interlockDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_interlock& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_interlock& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_interlockSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_interlock& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_interlock& instance) = 0;

   protected:
      logevent_interlockDataReaderView () {};
      ~logevent_interlockDataReaderView () {};
   private:
      logevent_interlockDataReaderView (const logevent_interlockDataReaderView &);
      logevent_interlockDataReaderView & operator = (const logevent_interlockDataReaderView &);
   };

   struct logevent_limitErrorSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < logevent_limitError, struct logevent_limitErrorSeq_uniq_> logevent_limitErrorSeq;
   typedef DDS_DCPSSequence_var < logevent_limitErrorSeq> logevent_limitErrorSeq_var;
   typedef DDS_DCPSSequence_out < logevent_limitErrorSeq> logevent_limitErrorSeq_out;
   class logevent_limitErrorTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef logevent_limitErrorTypeSupportInterface_ptr _ptr_type;
      typedef logevent_limitErrorTypeSupportInterface_var _var_type;

      static logevent_limitErrorTypeSupportInterface_ptr _duplicate (logevent_limitErrorTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_limitErrorTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static logevent_limitErrorTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_limitErrorTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_limitErrorTypeSupportInterface_ptr _this () { return this; }


   protected:
      logevent_limitErrorTypeSupportInterface () {};
      ~logevent_limitErrorTypeSupportInterface () {};
   private:
      logevent_limitErrorTypeSupportInterface (const logevent_limitErrorTypeSupportInterface &);
      logevent_limitErrorTypeSupportInterface & operator = (const logevent_limitErrorTypeSupportInterface &);
   };

   class logevent_limitErrorDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef logevent_limitErrorDataWriter_ptr _ptr_type;
      typedef logevent_limitErrorDataWriter_var _var_type;

      static logevent_limitErrorDataWriter_ptr _duplicate (logevent_limitErrorDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_limitErrorDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static logevent_limitErrorDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_limitErrorDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_limitErrorDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const logevent_limitError& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const logevent_limitError& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const logevent_limitError& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const logevent_limitError& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const logevent_limitError& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const logevent_limitError& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const logevent_limitError& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const logevent_limitError& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const logevent_limitError& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const logevent_limitError& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (logevent_limitError& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_limitError& instance_data) = 0;

   protected:
      logevent_limitErrorDataWriter () {};
      ~logevent_limitErrorDataWriter () {};
   private:
      logevent_limitErrorDataWriter (const logevent_limitErrorDataWriter &);
      logevent_limitErrorDataWriter & operator = (const logevent_limitErrorDataWriter &);
   };

   class logevent_limitErrorDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef logevent_limitErrorDataReader_ptr _ptr_type;
      typedef logevent_limitErrorDataReader_var _var_type;

      static logevent_limitErrorDataReader_ptr _duplicate (logevent_limitErrorDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_limitErrorDataReader_ptr _narrow (DDS::Object_ptr obj);
      static logevent_limitErrorDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_limitErrorDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_limitErrorDataReader_ptr _this () { return this; }

      virtual DDS::Long read (logevent_limitErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_limitErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_limitErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_limitErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_limitError& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_limitError& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_limitErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_limitErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_limitErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_limitErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_limitErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_limitErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_limitErrorSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_limitError& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_limitError& instance) = 0;

   protected:
      logevent_limitErrorDataReader () {};
      ~logevent_limitErrorDataReader () {};
   private:
      logevent_limitErrorDataReader (const logevent_limitErrorDataReader &);
      logevent_limitErrorDataReader & operator = (const logevent_limitErrorDataReader &);
   };

   class logevent_limitErrorDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef logevent_limitErrorDataReaderView_ptr _ptr_type;
      typedef logevent_limitErrorDataReaderView_var _var_type;

      static logevent_limitErrorDataReaderView_ptr _duplicate (logevent_limitErrorDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_limitErrorDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static logevent_limitErrorDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_limitErrorDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_limitErrorDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (logevent_limitErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_limitErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_limitErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_limitErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_limitError& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_limitError& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_limitErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_limitErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_limitErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_limitErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_limitErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_limitErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_limitErrorSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_limitError& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_limitError& instance) = 0;

   protected:
      logevent_limitErrorDataReaderView () {};
      ~logevent_limitErrorDataReaderView () {};
   private:
      logevent_limitErrorDataReaderView (const logevent_limitErrorDataReaderView &);
      logevent_limitErrorDataReaderView & operator = (const logevent_limitErrorDataReaderView &);
   };

   struct logevent_targetDoneSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < logevent_targetDone, struct logevent_targetDoneSeq_uniq_> logevent_targetDoneSeq;
   typedef DDS_DCPSSequence_var < logevent_targetDoneSeq> logevent_targetDoneSeq_var;
   typedef DDS_DCPSSequence_out < logevent_targetDoneSeq> logevent_targetDoneSeq_out;
   class logevent_targetDoneTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef logevent_targetDoneTypeSupportInterface_ptr _ptr_type;
      typedef logevent_targetDoneTypeSupportInterface_var _var_type;

      static logevent_targetDoneTypeSupportInterface_ptr _duplicate (logevent_targetDoneTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_targetDoneTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static logevent_targetDoneTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_targetDoneTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_targetDoneTypeSupportInterface_ptr _this () { return this; }


   protected:
      logevent_targetDoneTypeSupportInterface () {};
      ~logevent_targetDoneTypeSupportInterface () {};
   private:
      logevent_targetDoneTypeSupportInterface (const logevent_targetDoneTypeSupportInterface &);
      logevent_targetDoneTypeSupportInterface & operator = (const logevent_targetDoneTypeSupportInterface &);
   };

   class logevent_targetDoneDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef logevent_targetDoneDataWriter_ptr _ptr_type;
      typedef logevent_targetDoneDataWriter_var _var_type;

      static logevent_targetDoneDataWriter_ptr _duplicate (logevent_targetDoneDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_targetDoneDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static logevent_targetDoneDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_targetDoneDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_targetDoneDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const logevent_targetDone& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const logevent_targetDone& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const logevent_targetDone& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const logevent_targetDone& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const logevent_targetDone& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const logevent_targetDone& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const logevent_targetDone& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const logevent_targetDone& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const logevent_targetDone& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const logevent_targetDone& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (logevent_targetDone& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_targetDone& instance_data) = 0;

   protected:
      logevent_targetDoneDataWriter () {};
      ~logevent_targetDoneDataWriter () {};
   private:
      logevent_targetDoneDataWriter (const logevent_targetDoneDataWriter &);
      logevent_targetDoneDataWriter & operator = (const logevent_targetDoneDataWriter &);
   };

   class logevent_targetDoneDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef logevent_targetDoneDataReader_ptr _ptr_type;
      typedef logevent_targetDoneDataReader_var _var_type;

      static logevent_targetDoneDataReader_ptr _duplicate (logevent_targetDoneDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_targetDoneDataReader_ptr _narrow (DDS::Object_ptr obj);
      static logevent_targetDoneDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_targetDoneDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_targetDoneDataReader_ptr _this () { return this; }

      virtual DDS::Long read (logevent_targetDoneSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_targetDoneSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_targetDoneSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_targetDoneSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_targetDone& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_targetDone& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_targetDoneSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_targetDoneSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_targetDoneSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_targetDoneSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_targetDoneSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_targetDoneSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_targetDoneSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_targetDone& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_targetDone& instance) = 0;

   protected:
      logevent_targetDoneDataReader () {};
      ~logevent_targetDoneDataReader () {};
   private:
      logevent_targetDoneDataReader (const logevent_targetDoneDataReader &);
      logevent_targetDoneDataReader & operator = (const logevent_targetDoneDataReader &);
   };

   class logevent_targetDoneDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef logevent_targetDoneDataReaderView_ptr _ptr_type;
      typedef logevent_targetDoneDataReaderView_var _var_type;

      static logevent_targetDoneDataReaderView_ptr _duplicate (logevent_targetDoneDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_targetDoneDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static logevent_targetDoneDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_targetDoneDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_targetDoneDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (logevent_targetDoneSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_targetDoneSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_targetDoneSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_targetDoneSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_targetDone& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_targetDone& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_targetDoneSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_targetDoneSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_targetDoneSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_targetDoneSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_targetDoneSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_targetDoneSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_targetDoneSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_targetDone& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_targetDone& instance) = 0;

   protected:
      logevent_targetDoneDataReaderView () {};
      ~logevent_targetDoneDataReaderView () {};
   private:
      logevent_targetDoneDataReaderView (const logevent_targetDoneDataReaderView &);
      logevent_targetDoneDataReaderView & operator = (const logevent_targetDoneDataReaderView &);
   };

   struct logevent_targetErrorSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < logevent_targetError, struct logevent_targetErrorSeq_uniq_> logevent_targetErrorSeq;
   typedef DDS_DCPSSequence_var < logevent_targetErrorSeq> logevent_targetErrorSeq_var;
   typedef DDS_DCPSSequence_out < logevent_targetErrorSeq> logevent_targetErrorSeq_out;
   class logevent_targetErrorTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef logevent_targetErrorTypeSupportInterface_ptr _ptr_type;
      typedef logevent_targetErrorTypeSupportInterface_var _var_type;

      static logevent_targetErrorTypeSupportInterface_ptr _duplicate (logevent_targetErrorTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_targetErrorTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static logevent_targetErrorTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_targetErrorTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_targetErrorTypeSupportInterface_ptr _this () { return this; }


   protected:
      logevent_targetErrorTypeSupportInterface () {};
      ~logevent_targetErrorTypeSupportInterface () {};
   private:
      logevent_targetErrorTypeSupportInterface (const logevent_targetErrorTypeSupportInterface &);
      logevent_targetErrorTypeSupportInterface & operator = (const logevent_targetErrorTypeSupportInterface &);
   };

   class logevent_targetErrorDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef logevent_targetErrorDataWriter_ptr _ptr_type;
      typedef logevent_targetErrorDataWriter_var _var_type;

      static logevent_targetErrorDataWriter_ptr _duplicate (logevent_targetErrorDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_targetErrorDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static logevent_targetErrorDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_targetErrorDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_targetErrorDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const logevent_targetError& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const logevent_targetError& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const logevent_targetError& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const logevent_targetError& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const logevent_targetError& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const logevent_targetError& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const logevent_targetError& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const logevent_targetError& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const logevent_targetError& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const logevent_targetError& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (logevent_targetError& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_targetError& instance_data) = 0;

   protected:
      logevent_targetErrorDataWriter () {};
      ~logevent_targetErrorDataWriter () {};
   private:
      logevent_targetErrorDataWriter (const logevent_targetErrorDataWriter &);
      logevent_targetErrorDataWriter & operator = (const logevent_targetErrorDataWriter &);
   };

   class logevent_targetErrorDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef logevent_targetErrorDataReader_ptr _ptr_type;
      typedef logevent_targetErrorDataReader_var _var_type;

      static logevent_targetErrorDataReader_ptr _duplicate (logevent_targetErrorDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_targetErrorDataReader_ptr _narrow (DDS::Object_ptr obj);
      static logevent_targetErrorDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_targetErrorDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_targetErrorDataReader_ptr _this () { return this; }

      virtual DDS::Long read (logevent_targetErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_targetErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_targetErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_targetErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_targetError& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_targetError& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_targetErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_targetErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_targetErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_targetErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_targetErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_targetErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_targetErrorSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_targetError& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_targetError& instance) = 0;

   protected:
      logevent_targetErrorDataReader () {};
      ~logevent_targetErrorDataReader () {};
   private:
      logevent_targetErrorDataReader (const logevent_targetErrorDataReader &);
      logevent_targetErrorDataReader & operator = (const logevent_targetErrorDataReader &);
   };

   class logevent_targetErrorDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef logevent_targetErrorDataReaderView_ptr _ptr_type;
      typedef logevent_targetErrorDataReaderView_var _var_type;

      static logevent_targetErrorDataReaderView_ptr _duplicate (logevent_targetErrorDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_targetErrorDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static logevent_targetErrorDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_targetErrorDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_targetErrorDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (logevent_targetErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_targetErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_targetErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_targetErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_targetError& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_targetError& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_targetErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_targetErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_targetErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_targetErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_targetErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_targetErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_targetErrorSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_targetError& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_targetError& instance) = 0;

   protected:
      logevent_targetErrorDataReaderView () {};
      ~logevent_targetErrorDataReaderView () {};
   private:
      logevent_targetErrorDataReaderView (const logevent_targetErrorDataReaderView &);
      logevent_targetErrorDataReaderView & operator = (const logevent_targetErrorDataReaderView &);
   };

   struct logevent_tempErrorSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < logevent_tempError, struct logevent_tempErrorSeq_uniq_> logevent_tempErrorSeq;
   typedef DDS_DCPSSequence_var < logevent_tempErrorSeq> logevent_tempErrorSeq_var;
   typedef DDS_DCPSSequence_out < logevent_tempErrorSeq> logevent_tempErrorSeq_out;
   class logevent_tempErrorTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef logevent_tempErrorTypeSupportInterface_ptr _ptr_type;
      typedef logevent_tempErrorTypeSupportInterface_var _var_type;

      static logevent_tempErrorTypeSupportInterface_ptr _duplicate (logevent_tempErrorTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_tempErrorTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static logevent_tempErrorTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_tempErrorTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_tempErrorTypeSupportInterface_ptr _this () { return this; }


   protected:
      logevent_tempErrorTypeSupportInterface () {};
      ~logevent_tempErrorTypeSupportInterface () {};
   private:
      logevent_tempErrorTypeSupportInterface (const logevent_tempErrorTypeSupportInterface &);
      logevent_tempErrorTypeSupportInterface & operator = (const logevent_tempErrorTypeSupportInterface &);
   };

   class logevent_tempErrorDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef logevent_tempErrorDataWriter_ptr _ptr_type;
      typedef logevent_tempErrorDataWriter_var _var_type;

      static logevent_tempErrorDataWriter_ptr _duplicate (logevent_tempErrorDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_tempErrorDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static logevent_tempErrorDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_tempErrorDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_tempErrorDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const logevent_tempError& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const logevent_tempError& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const logevent_tempError& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const logevent_tempError& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const logevent_tempError& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const logevent_tempError& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const logevent_tempError& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const logevent_tempError& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const logevent_tempError& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const logevent_tempError& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (logevent_tempError& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_tempError& instance_data) = 0;

   protected:
      logevent_tempErrorDataWriter () {};
      ~logevent_tempErrorDataWriter () {};
   private:
      logevent_tempErrorDataWriter (const logevent_tempErrorDataWriter &);
      logevent_tempErrorDataWriter & operator = (const logevent_tempErrorDataWriter &);
   };

   class logevent_tempErrorDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef logevent_tempErrorDataReader_ptr _ptr_type;
      typedef logevent_tempErrorDataReader_var _var_type;

      static logevent_tempErrorDataReader_ptr _duplicate (logevent_tempErrorDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_tempErrorDataReader_ptr _narrow (DDS::Object_ptr obj);
      static logevent_tempErrorDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_tempErrorDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_tempErrorDataReader_ptr _this () { return this; }

      virtual DDS::Long read (logevent_tempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_tempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_tempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_tempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_tempError& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_tempError& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_tempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_tempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_tempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_tempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_tempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_tempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_tempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_tempError& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_tempError& instance) = 0;

   protected:
      logevent_tempErrorDataReader () {};
      ~logevent_tempErrorDataReader () {};
   private:
      logevent_tempErrorDataReader (const logevent_tempErrorDataReader &);
      logevent_tempErrorDataReader & operator = (const logevent_tempErrorDataReader &);
   };

   class logevent_tempErrorDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef logevent_tempErrorDataReaderView_ptr _ptr_type;
      typedef logevent_tempErrorDataReaderView_var _var_type;

      static logevent_tempErrorDataReaderView_ptr _duplicate (logevent_tempErrorDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_tempErrorDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static logevent_tempErrorDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_tempErrorDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_tempErrorDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (logevent_tempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_tempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_tempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_tempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_tempError& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_tempError& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_tempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_tempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_tempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_tempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_tempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_tempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_tempErrorSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_tempError& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_tempError& instance) = 0;

   protected:
      logevent_tempErrorDataReaderView () {};
      ~logevent_tempErrorDataReaderView () {};
   private:
      logevent_tempErrorDataReaderView (const logevent_tempErrorDataReaderView &);
      logevent_tempErrorDataReaderView & operator = (const logevent_tempErrorDataReaderView &);
   };

   struct logevent_updateDoneSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < logevent_updateDone, struct logevent_updateDoneSeq_uniq_> logevent_updateDoneSeq;
   typedef DDS_DCPSSequence_var < logevent_updateDoneSeq> logevent_updateDoneSeq_var;
   typedef DDS_DCPSSequence_out < logevent_updateDoneSeq> logevent_updateDoneSeq_out;
   class logevent_updateDoneTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef logevent_updateDoneTypeSupportInterface_ptr _ptr_type;
      typedef logevent_updateDoneTypeSupportInterface_var _var_type;

      static logevent_updateDoneTypeSupportInterface_ptr _duplicate (logevent_updateDoneTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_updateDoneTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static logevent_updateDoneTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_updateDoneTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_updateDoneTypeSupportInterface_ptr _this () { return this; }


   protected:
      logevent_updateDoneTypeSupportInterface () {};
      ~logevent_updateDoneTypeSupportInterface () {};
   private:
      logevent_updateDoneTypeSupportInterface (const logevent_updateDoneTypeSupportInterface &);
      logevent_updateDoneTypeSupportInterface & operator = (const logevent_updateDoneTypeSupportInterface &);
   };

   class logevent_updateDoneDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef logevent_updateDoneDataWriter_ptr _ptr_type;
      typedef logevent_updateDoneDataWriter_var _var_type;

      static logevent_updateDoneDataWriter_ptr _duplicate (logevent_updateDoneDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_updateDoneDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static logevent_updateDoneDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_updateDoneDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_updateDoneDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const logevent_updateDone& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const logevent_updateDone& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const logevent_updateDone& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const logevent_updateDone& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const logevent_updateDone& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const logevent_updateDone& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const logevent_updateDone& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const logevent_updateDone& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const logevent_updateDone& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const logevent_updateDone& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (logevent_updateDone& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_updateDone& instance_data) = 0;

   protected:
      logevent_updateDoneDataWriter () {};
      ~logevent_updateDoneDataWriter () {};
   private:
      logevent_updateDoneDataWriter (const logevent_updateDoneDataWriter &);
      logevent_updateDoneDataWriter & operator = (const logevent_updateDoneDataWriter &);
   };

   class logevent_updateDoneDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef logevent_updateDoneDataReader_ptr _ptr_type;
      typedef logevent_updateDoneDataReader_var _var_type;

      static logevent_updateDoneDataReader_ptr _duplicate (logevent_updateDoneDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_updateDoneDataReader_ptr _narrow (DDS::Object_ptr obj);
      static logevent_updateDoneDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_updateDoneDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_updateDoneDataReader_ptr _this () { return this; }

      virtual DDS::Long read (logevent_updateDoneSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_updateDoneSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_updateDoneSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_updateDoneSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_updateDone& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_updateDone& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_updateDoneSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_updateDoneSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_updateDoneSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_updateDoneSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_updateDoneSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_updateDoneSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_updateDoneSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_updateDone& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_updateDone& instance) = 0;

   protected:
      logevent_updateDoneDataReader () {};
      ~logevent_updateDoneDataReader () {};
   private:
      logevent_updateDoneDataReader (const logevent_updateDoneDataReader &);
      logevent_updateDoneDataReader & operator = (const logevent_updateDoneDataReader &);
   };

   class logevent_updateDoneDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef logevent_updateDoneDataReaderView_ptr _ptr_type;
      typedef logevent_updateDoneDataReaderView_var _var_type;

      static logevent_updateDoneDataReaderView_ptr _duplicate (logevent_updateDoneDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_updateDoneDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static logevent_updateDoneDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_updateDoneDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_updateDoneDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (logevent_updateDoneSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_updateDoneSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_updateDoneSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_updateDoneSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_updateDone& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_updateDone& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_updateDoneSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_updateDoneSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_updateDoneSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_updateDoneSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_updateDoneSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_updateDoneSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_updateDoneSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_updateDone& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_updateDone& instance) = 0;

   protected:
      logevent_updateDoneDataReaderView () {};
      ~logevent_updateDoneDataReaderView () {};
   private:
      logevent_updateDoneDataReaderView (const logevent_updateDoneDataReaderView &);
      logevent_updateDoneDataReaderView & operator = (const logevent_updateDoneDataReaderView &);
   };

   struct logevent_updateErrorSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < logevent_updateError, struct logevent_updateErrorSeq_uniq_> logevent_updateErrorSeq;
   typedef DDS_DCPSSequence_var < logevent_updateErrorSeq> logevent_updateErrorSeq_var;
   typedef DDS_DCPSSequence_out < logevent_updateErrorSeq> logevent_updateErrorSeq_out;
   class logevent_updateErrorTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef logevent_updateErrorTypeSupportInterface_ptr _ptr_type;
      typedef logevent_updateErrorTypeSupportInterface_var _var_type;

      static logevent_updateErrorTypeSupportInterface_ptr _duplicate (logevent_updateErrorTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_updateErrorTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static logevent_updateErrorTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_updateErrorTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_updateErrorTypeSupportInterface_ptr _this () { return this; }


   protected:
      logevent_updateErrorTypeSupportInterface () {};
      ~logevent_updateErrorTypeSupportInterface () {};
   private:
      logevent_updateErrorTypeSupportInterface (const logevent_updateErrorTypeSupportInterface &);
      logevent_updateErrorTypeSupportInterface & operator = (const logevent_updateErrorTypeSupportInterface &);
   };

   class logevent_updateErrorDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef logevent_updateErrorDataWriter_ptr _ptr_type;
      typedef logevent_updateErrorDataWriter_var _var_type;

      static logevent_updateErrorDataWriter_ptr _duplicate (logevent_updateErrorDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_updateErrorDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static logevent_updateErrorDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_updateErrorDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_updateErrorDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const logevent_updateError& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const logevent_updateError& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const logevent_updateError& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const logevent_updateError& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const logevent_updateError& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const logevent_updateError& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const logevent_updateError& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const logevent_updateError& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const logevent_updateError& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const logevent_updateError& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (logevent_updateError& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_updateError& instance_data) = 0;

   protected:
      logevent_updateErrorDataWriter () {};
      ~logevent_updateErrorDataWriter () {};
   private:
      logevent_updateErrorDataWriter (const logevent_updateErrorDataWriter &);
      logevent_updateErrorDataWriter & operator = (const logevent_updateErrorDataWriter &);
   };

   class logevent_updateErrorDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef logevent_updateErrorDataReader_ptr _ptr_type;
      typedef logevent_updateErrorDataReader_var _var_type;

      static logevent_updateErrorDataReader_ptr _duplicate (logevent_updateErrorDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_updateErrorDataReader_ptr _narrow (DDS::Object_ptr obj);
      static logevent_updateErrorDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_updateErrorDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_updateErrorDataReader_ptr _this () { return this; }

      virtual DDS::Long read (logevent_updateErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_updateErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_updateErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_updateErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_updateError& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_updateError& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_updateErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_updateErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_updateErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_updateErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_updateErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_updateErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_updateErrorSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_updateError& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_updateError& instance) = 0;

   protected:
      logevent_updateErrorDataReader () {};
      ~logevent_updateErrorDataReader () {};
   private:
      logevent_updateErrorDataReader (const logevent_updateErrorDataReader &);
      logevent_updateErrorDataReader & operator = (const logevent_updateErrorDataReader &);
   };

   class logevent_updateErrorDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef logevent_updateErrorDataReaderView_ptr _ptr_type;
      typedef logevent_updateErrorDataReaderView_var _var_type;

      static logevent_updateErrorDataReaderView_ptr _duplicate (logevent_updateErrorDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logevent_updateErrorDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static logevent_updateErrorDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logevent_updateErrorDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      logevent_updateErrorDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (logevent_updateErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logevent_updateErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logevent_updateErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logevent_updateErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent_updateError& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent_updateError& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logevent_updateErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logevent_updateErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logevent_updateErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logevent_updateErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logevent_updateErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logevent_updateErrorSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logevent_updateErrorSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent_updateError& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent_updateError& instance) = 0;

   protected:
      logevent_updateErrorDataReaderView () {};
      ~logevent_updateErrorDataReaderView () {};
   private:
      logevent_updateErrorDataReaderView (const logevent_updateErrorDataReaderView &);
      logevent_updateErrorDataReaderView & operator = (const logevent_updateErrorDataReaderView &);
   };

   struct commandSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < command, struct commandSeq_uniq_> commandSeq;
   typedef DDS_DCPSSequence_var < commandSeq> commandSeq_var;
   typedef DDS_DCPSSequence_out < commandSeq> commandSeq_out;
   class commandTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef commandTypeSupportInterface_ptr _ptr_type;
      typedef commandTypeSupportInterface_var _var_type;

      static commandTypeSupportInterface_ptr _duplicate (commandTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static commandTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static commandTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static commandTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      commandTypeSupportInterface_ptr _this () { return this; }


   protected:
      commandTypeSupportInterface () {};
      ~commandTypeSupportInterface () {};
   private:
      commandTypeSupportInterface (const commandTypeSupportInterface &);
      commandTypeSupportInterface & operator = (const commandTypeSupportInterface &);
   };

   class commandDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef commandDataWriter_ptr _ptr_type;
      typedef commandDataWriter_var _var_type;

      static commandDataWriter_ptr _duplicate (commandDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static commandDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static commandDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static commandDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      commandDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const command& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const command& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const command& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const command& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const command& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const command& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const command& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const command& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const command& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const command& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (command& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command& instance_data) = 0;

   protected:
      commandDataWriter () {};
      ~commandDataWriter () {};
   private:
      commandDataWriter (const commandDataWriter &);
      commandDataWriter & operator = (const commandDataWriter &);
   };

   class commandDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef commandDataReader_ptr _ptr_type;
      typedef commandDataReader_var _var_type;

      static commandDataReader_ptr _duplicate (commandDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static commandDataReader_ptr _narrow (DDS::Object_ptr obj);
      static commandDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static commandDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      commandDataReader_ptr _this () { return this; }

      virtual DDS::Long read (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (commandSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command& instance) = 0;

   protected:
      commandDataReader () {};
      ~commandDataReader () {};
   private:
      commandDataReader (const commandDataReader &);
      commandDataReader & operator = (const commandDataReader &);
   };

   class commandDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef commandDataReaderView_ptr _ptr_type;
      typedef commandDataReaderView_var _var_type;

      static commandDataReaderView_ptr _duplicate (commandDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static commandDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static commandDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static commandDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      commandDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (command& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (command& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (commandSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (commandSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (command& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const command& instance) = 0;

   protected:
      commandDataReaderView () {};
      ~commandDataReaderView () {};
   private:
      commandDataReaderView (const commandDataReaderView &);
      commandDataReaderView & operator = (const commandDataReaderView &);
   };

   struct ackcmdSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < ackcmd, struct ackcmdSeq_uniq_> ackcmdSeq;
   typedef DDS_DCPSSequence_var < ackcmdSeq> ackcmdSeq_var;
   typedef DDS_DCPSSequence_out < ackcmdSeq> ackcmdSeq_out;
   class ackcmdTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef ackcmdTypeSupportInterface_ptr _ptr_type;
      typedef ackcmdTypeSupportInterface_var _var_type;

      static ackcmdTypeSupportInterface_ptr _duplicate (ackcmdTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ackcmdTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static ackcmdTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ackcmdTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      ackcmdTypeSupportInterface_ptr _this () { return this; }


   protected:
      ackcmdTypeSupportInterface () {};
      ~ackcmdTypeSupportInterface () {};
   private:
      ackcmdTypeSupportInterface (const ackcmdTypeSupportInterface &);
      ackcmdTypeSupportInterface & operator = (const ackcmdTypeSupportInterface &);
   };

   class ackcmdDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef ackcmdDataWriter_ptr _ptr_type;
      typedef ackcmdDataWriter_var _var_type;

      static ackcmdDataWriter_ptr _duplicate (ackcmdDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ackcmdDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static ackcmdDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ackcmdDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      ackcmdDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const ackcmd& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const ackcmd& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const ackcmd& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const ackcmd& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const ackcmd& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const ackcmd& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const ackcmd& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const ackcmd& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const ackcmd& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const ackcmd& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (ackcmd& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const ackcmd& instance_data) = 0;

   protected:
      ackcmdDataWriter () {};
      ~ackcmdDataWriter () {};
   private:
      ackcmdDataWriter (const ackcmdDataWriter &);
      ackcmdDataWriter & operator = (const ackcmdDataWriter &);
   };

   class ackcmdDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef ackcmdDataReader_ptr _ptr_type;
      typedef ackcmdDataReader_var _var_type;

      static ackcmdDataReader_ptr _duplicate (ackcmdDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ackcmdDataReader_ptr _narrow (DDS::Object_ptr obj);
      static ackcmdDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ackcmdDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      ackcmdDataReader_ptr _this () { return this; }

      virtual DDS::Long read (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (ackcmd& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (ackcmd& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (ackcmd& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const ackcmd& instance) = 0;

   protected:
      ackcmdDataReader () {};
      ~ackcmdDataReader () {};
   private:
      ackcmdDataReader (const ackcmdDataReader &);
      ackcmdDataReader & operator = (const ackcmdDataReader &);
   };

   class ackcmdDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef ackcmdDataReaderView_ptr _ptr_type;
      typedef ackcmdDataReaderView_var _var_type;

      static ackcmdDataReaderView_ptr _duplicate (ackcmdDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static ackcmdDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static ackcmdDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static ackcmdDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      ackcmdDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (ackcmd& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (ackcmd& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (ackcmdSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (ackcmd& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const ackcmd& instance) = 0;

   protected:
      ackcmdDataReaderView () {};
      ~ackcmdDataReaderView () {};
   private:
      ackcmdDataReaderView (const ackcmdDataReaderView &);
      ackcmdDataReaderView & operator = (const ackcmdDataReaderView &);
   };

   struct logeventSeq_uniq_ {};
   typedef DDS_DCPSUVLSeq < logevent, struct logeventSeq_uniq_> logeventSeq;
   typedef DDS_DCPSSequence_var < logeventSeq> logeventSeq_var;
   typedef DDS_DCPSSequence_out < logeventSeq> logeventSeq_out;
   class logeventTypeSupportInterface
   :
      virtual public DDS::TypeSupport
   { 
   public:
      typedef logeventTypeSupportInterface_ptr _ptr_type;
      typedef logeventTypeSupportInterface_var _var_type;

      static logeventTypeSupportInterface_ptr _duplicate (logeventTypeSupportInterface_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logeventTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
      static logeventTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logeventTypeSupportInterface_ptr _nil () { return 0; }
      static const char * _local_id;
      logeventTypeSupportInterface_ptr _this () { return this; }


   protected:
      logeventTypeSupportInterface () {};
      ~logeventTypeSupportInterface () {};
   private:
      logeventTypeSupportInterface (const logeventTypeSupportInterface &);
      logeventTypeSupportInterface & operator = (const logeventTypeSupportInterface &);
   };

   class logeventDataWriter
   :
      virtual public DDS::DataWriter
   { 
   public:
      typedef logeventDataWriter_ptr _ptr_type;
      typedef logeventDataWriter_var _var_type;

      static logeventDataWriter_ptr _duplicate (logeventDataWriter_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logeventDataWriter_ptr _narrow (DDS::Object_ptr obj);
      static logeventDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logeventDataWriter_ptr _nil () { return 0; }
      static const char * _local_id;
      logeventDataWriter_ptr _this () { return this; }

      virtual DDS::LongLong register_instance (const logevent& instance_data) = 0;
      virtual DDS::LongLong register_instance_w_timestamp (const logevent& instance_data, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long unregister_instance (const logevent& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long unregister_instance_w_timestamp (const logevent& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long write (const logevent& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long write_w_timestamp (const logevent& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long dispose (const logevent& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long dispose_w_timestamp (const logevent& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long writedispose (const logevent& instance_data, DDS::LongLong handle) = 0;
      virtual DDS::Long writedispose_w_timestamp (const logevent& instance_data, DDS::LongLong handle, const DDS::Time_t& source_timestamp) = 0;
      virtual DDS::Long get_key_value (logevent& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent& instance_data) = 0;

   protected:
      logeventDataWriter () {};
      ~logeventDataWriter () {};
   private:
      logeventDataWriter (const logeventDataWriter &);
      logeventDataWriter & operator = (const logeventDataWriter &);
   };

   class logeventDataReader
   :
      virtual public DDS::DataReader
   { 
   public:
      typedef logeventDataReader_ptr _ptr_type;
      typedef logeventDataReader_var _var_type;

      static logeventDataReader_ptr _duplicate (logeventDataReader_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logeventDataReader_ptr _narrow (DDS::Object_ptr obj);
      static logeventDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logeventDataReader_ptr _nil () { return 0; }
      static const char * _local_id;
      logeventDataReader_ptr _this () { return this; }

      virtual DDS::Long read (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent& instance) = 0;

   protected:
      logeventDataReader () {};
      ~logeventDataReader () {};
   private:
      logeventDataReader (const logeventDataReader &);
      logeventDataReader & operator = (const logeventDataReader &);
   };

   class logeventDataReaderView
   :
      virtual public DDS::DataReaderView
   { 
   public:
      typedef logeventDataReaderView_ptr _ptr_type;
      typedef logeventDataReaderView_var _var_type;

      static logeventDataReaderView_ptr _duplicate (logeventDataReaderView_ptr obj);
      DDS::Boolean _local_is_a (const char * id);

      static logeventDataReaderView_ptr _narrow (DDS::Object_ptr obj);
      static logeventDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
      static logeventDataReaderView_ptr _nil () { return 0; }
      static const char * _local_id;
      logeventDataReaderView_ptr _this () { return this; }

      virtual DDS::Long read (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_w_condition (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_w_condition (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long read_next_sample (logevent& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long take_next_sample (logevent& received_data, DDS::SampleInfo& sample_info) = 0;
      virtual DDS::Long read_instance (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_instance (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long take_next_instance (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ULong sample_states, DDS::ULong view_states, DDS::ULong instance_states) = 0;
      virtual DDS::Long read_next_instance_w_condition (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long take_next_instance_w_condition (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::LongLong a_handle, DDS::ReadCondition_ptr a_condition) = 0;
      virtual DDS::Long return_loan (logeventSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
      virtual DDS::Long get_key_value (logevent& key_holder, DDS::LongLong handle) = 0;
      virtual DDS::LongLong lookup_instance (const logevent& instance) = 0;

   protected:
      logeventDataReaderView () {};
      ~logeventDataReaderView () {};
   private:
      logeventDataReaderView (const logeventDataReaderView &);
      logeventDataReaderView & operator = (const logeventDataReaderView &);
   };

}




#endif 
