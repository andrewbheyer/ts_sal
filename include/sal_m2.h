//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: sal_m2.h
//  Source: sal_m2.idl
//  Generated: Thu Apr  2 09:25:20 2015
//  OpenSplice V6.4.140320OSS
//  
//******************************************************************
#ifndef _SAL_M2_H_
#define _SAL_M2_H_

#include "sacpp_mapping.h"
#include "sacpp_DDS_DCPS.h"


namespace m2
{
   struct Actuators;
   struct Application;
   struct Electrical;
   struct LimitSensors;
   struct Metrology;
   struct Surface;
   struct TC;
   struct command_abort;
   struct command_configure;
   struct command_status;
   struct command_stop;
   struct command_target;
   struct command_update;
   struct logevent_interlock;
   struct logevent_limitError;
   struct logevent_targetDone;
   struct logevent_targetError;
   struct logevent_tempError;
   struct logevent_updateDone;
   struct logevent_updateError;
   struct command;
   struct ackcmd;
   struct logevent;

   struct Actuators
   {
         typedef DDS::Long _Raw_slice;
         typedef DDS::Long _Raw[15];
         typedef _Raw _Raw_out;
         static _Raw_slice * _Raw_alloc ();
         static void _Raw_free (_Raw_slice *);
         static void _Raw_copy (_Raw_slice* to, const _Raw_slice* from);
         static _Raw_slice *_Raw_dup (const _Raw_slice* from);

         struct _Raw_uniq_ {};
         typedef DDS_DCPS_FArray_var< _Raw, _Raw_slice, struct _Raw_uniq_> _Raw_var;
         typedef DDS_DCPS_Array_forany< _Raw, _Raw_slice, struct _Raw_uniq_> _Raw_forany;
         typedef DDS::Float _Calibrated_slice;
         typedef DDS::Float _Calibrated[31];
         typedef _Calibrated _Calibrated_out;
         static _Calibrated_slice * _Calibrated_alloc ();
         static void _Calibrated_free (_Calibrated_slice *);
         static void _Calibrated_copy (_Calibrated_slice* to, const _Calibrated_slice* from);
         static _Calibrated_slice *_Calibrated_dup (const _Calibrated_slice* from);

         struct _Calibrated_uniq_ {};
         typedef DDS_DCPS_FArray_var< _Calibrated, _Calibrated_slice, struct _Calibrated_uniq_> _Calibrated_var;
         typedef DDS_DCPS_Array_forany< _Calibrated, _Calibrated_slice, struct _Calibrated_uniq_> _Calibrated_forany;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         _Raw Raw;
         _Calibrated Calibrated;
   };

   typedef DDS_DCPSStruct_var < Actuators> Actuators_var;
   typedef DDS_DCPSStruct_out < Actuators> Actuators_out;

   struct Application
   {
         typedef DDS::Float _Demand_slice;
         typedef DDS::Float _Demand[2];
         typedef _Demand _Demand_out;
         static _Demand_slice * _Demand_alloc ();
         static void _Demand_free (_Demand_slice *);
         static void _Demand_copy (_Demand_slice* to, const _Demand_slice* from);
         static _Demand_slice *_Demand_dup (const _Demand_slice* from);

         struct _Demand_uniq_ {};
         typedef DDS_DCPS_FArray_var< _Demand, _Demand_slice, struct _Demand_uniq_> _Demand_var;
         typedef DDS_DCPS_Array_forany< _Demand, _Demand_slice, struct _Demand_uniq_> _Demand_forany;
         typedef DDS::Float _Position_slice;
         typedef DDS::Float _Position[2];
         typedef _Position _Position_out;
         static _Position_slice * _Position_alloc ();
         static void _Position_free (_Position_slice *);
         static void _Position_copy (_Position_slice* to, const _Position_slice* from);
         static _Position_slice *_Position_dup (const _Position_slice* from);

         struct _Position_uniq_ {};
         typedef DDS_DCPS_FArray_var< _Position, _Position_slice, struct _Position_uniq_> _Position_var;
         typedef DDS_DCPS_Array_forany< _Position, _Position_slice, struct _Position_uniq_> _Position_forany;
         typedef DDS::Float _Error_slice;
         typedef DDS::Float _Error[2];
         typedef _Error _Error_out;
         static _Error_slice * _Error_alloc ();
         static void _Error_free (_Error_slice *);
         static void _Error_copy (_Error_slice* to, const _Error_slice* from);
         static _Error_slice *_Error_dup (const _Error_slice* from);

         struct _Error_uniq_ {};
         typedef DDS_DCPS_FArray_var< _Error, _Error_slice, struct _Error_uniq_> _Error_var;
         typedef DDS_DCPS_Array_forany< _Error, _Error_slice, struct _Error_uniq_> _Error_forany;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         _Demand Demand;
         _Position Position;
         _Error Error;
   };

   typedef DDS_DCPSStruct_var < Application> Application_var;
   typedef DDS_DCPSStruct_out < Application> Application_out;

   struct Electrical
   {
         typedef DDS::Long _voltage_slice;
         typedef DDS::Long _voltage[16];
         typedef _voltage _voltage_out;
         static _voltage_slice * _voltage_alloc ();
         static void _voltage_free (_voltage_slice *);
         static void _voltage_copy (_voltage_slice* to, const _voltage_slice* from);
         static _voltage_slice *_voltage_dup (const _voltage_slice* from);

         struct _voltage_uniq_ {};
         typedef DDS_DCPS_FArray_var< _voltage, _voltage_slice, struct _voltage_uniq_> _voltage_var;
         typedef DDS_DCPS_Array_forany< _voltage, _voltage_slice, struct _voltage_uniq_> _voltage_forany;
         typedef DDS::Long _error_slice;
         typedef DDS::Long _error[16];
         typedef _error _error_out;
         static _error_slice * _error_alloc ();
         static void _error_free (_error_slice *);
         static void _error_copy (_error_slice* to, const _error_slice* from);
         static _error_slice *_error_dup (const _error_slice* from);

         struct _error_uniq_ {};
         typedef DDS_DCPS_FArray_var< _error, _error_slice, struct _error_uniq_> _error_var;
         typedef DDS_DCPS_Array_forany< _error, _error_slice, struct _error_uniq_> _error_forany;
         typedef DDS::Short _status_slice;
         typedef DDS::Short _status[16];
         typedef _status _status_out;
         static _status_slice * _status_alloc ();
         static void _status_free (_status_slice *);
         static void _status_copy (_status_slice* to, const _status_slice* from);
         static _status_slice *_status_dup (const _status_slice* from);

         struct _status_uniq_ {};
         typedef DDS_DCPS_FArray_var< _status, _status_slice, struct _status_uniq_> _status_var;
         typedef DDS_DCPS_Array_forany< _status, _status_slice, struct _status_uniq_> _status_forany;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         _voltage voltage;
         _error error;
         _status status;
   };

   typedef DDS_DCPSStruct_var < Electrical> Electrical_var;
   typedef DDS_DCPSStruct_out < Electrical> Electrical_out;

   struct LimitSensors
   {
         typedef DDS::Short _liftoff_slice;
         typedef DDS::Short _liftoff[64];
         typedef _liftoff _liftoff_out;
         static _liftoff_slice * _liftoff_alloc ();
         static void _liftoff_free (_liftoff_slice *);
         static void _liftoff_copy (_liftoff_slice* to, const _liftoff_slice* from);
         static _liftoff_slice *_liftoff_dup (const _liftoff_slice* from);

         struct _liftoff_uniq_ {};
         typedef DDS_DCPS_FArray_var< _liftoff, _liftoff_slice, struct _liftoff_uniq_> _liftoff_var;
         typedef DDS_DCPS_Array_forany< _liftoff, _liftoff_slice, struct _liftoff_uniq_> _liftoff_forany;
         typedef DDS::Short _limit_slice;
         typedef DDS::Short _limit[64];
         typedef _limit _limit_out;
         static _limit_slice * _limit_alloc ();
         static void _limit_free (_limit_slice *);
         static void _limit_copy (_limit_slice* to, const _limit_slice* from);
         static _limit_slice *_limit_dup (const _limit_slice* from);

         struct _limit_uniq_ {};
         typedef DDS_DCPS_FArray_var< _limit, _limit_slice, struct _limit_uniq_> _limit_var;
         typedef DDS_DCPS_Array_forany< _limit, _limit_slice, struct _limit_uniq_> _limit_forany;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         _liftoff liftoff;
         _limit limit;
   };

   typedef DDS_DCPSStruct_var < LimitSensors> LimitSensors_var;
   typedef DDS_DCPSStruct_out < LimitSensors> LimitSensors_out;

   struct Metrology
   {
         typedef DDS::Long _distance_slice;
         typedef DDS::Long _distance[16];
         typedef _distance _distance_out;
         static _distance_slice * _distance_alloc ();
         static void _distance_free (_distance_slice *);
         static void _distance_copy (_distance_slice* to, const _distance_slice* from);
         static _distance_slice *_distance_dup (const _distance_slice* from);

         struct _distance_uniq_ {};
         typedef DDS_DCPS_FArray_var< _distance, _distance_slice, struct _distance_uniq_> _distance_var;
         typedef DDS_DCPS_Array_forany< _distance, _distance_slice, struct _distance_uniq_> _distance_forany;
         typedef DDS::Long _error_slice;
         typedef DDS::Long _error[16];
         typedef _error _error_out;
         static _error_slice * _error_alloc ();
         static void _error_free (_error_slice *);
         static void _error_copy (_error_slice* to, const _error_slice* from);
         static _error_slice *_error_dup (const _error_slice* from);

         struct _error_uniq_ {};
         typedef DDS_DCPS_FArray_var< _error, _error_slice, struct _error_uniq_> _error_var;
         typedef DDS_DCPS_Array_forany< _error, _error_slice, struct _error_uniq_> _error_forany;
         typedef DDS::Short _status_slice;
         typedef DDS::Short _status[16];
         typedef _status _status_out;
         static _status_slice * _status_alloc ();
         static void _status_free (_status_slice *);
         static void _status_copy (_status_slice* to, const _status_slice* from);
         static _status_slice *_status_dup (const _status_slice* from);

         struct _status_uniq_ {};
         typedef DDS_DCPS_FArray_var< _status, _status_slice, struct _status_uniq_> _status_var;
         typedef DDS_DCPS_Array_forany< _status, _status_slice, struct _status_uniq_> _status_forany;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         _distance distance;
         _error error;
         _status status;
   };

   typedef DDS_DCPSStruct_var < Metrology> Metrology_var;
   typedef DDS_DCPSStruct_out < Metrology> Metrology_out;

   struct Surface
   {
         typedef DDS::Long _Raw_slice;
         typedef DDS::Long _Raw[200];
         typedef _Raw _Raw_out;
         static _Raw_slice * _Raw_alloc ();
         static void _Raw_free (_Raw_slice *);
         static void _Raw_copy (_Raw_slice* to, const _Raw_slice* from);
         static _Raw_slice *_Raw_dup (const _Raw_slice* from);

         struct _Raw_uniq_ {};
         typedef DDS_DCPS_FArray_var< _Raw, _Raw_slice, struct _Raw_uniq_> _Raw_var;
         typedef DDS_DCPS_Array_forany< _Raw, _Raw_slice, struct _Raw_uniq_> _Raw_forany;
         typedef DDS::Float _Calibrated_slice;
         typedef DDS::Float _Calibrated[200];
         typedef _Calibrated _Calibrated_out;
         static _Calibrated_slice * _Calibrated_alloc ();
         static void _Calibrated_free (_Calibrated_slice *);
         static void _Calibrated_copy (_Calibrated_slice* to, const _Calibrated_slice* from);
         static _Calibrated_slice *_Calibrated_dup (const _Calibrated_slice* from);

         struct _Calibrated_uniq_ {};
         typedef DDS_DCPS_FArray_var< _Calibrated, _Calibrated_slice, struct _Calibrated_uniq_> _Calibrated_var;
         typedef DDS_DCPS_Array_forany< _Calibrated, _Calibrated_slice, struct _Calibrated_uniq_> _Calibrated_forany;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         _Raw Raw;
         _Calibrated Calibrated;
   };

   typedef DDS_DCPSStruct_var < Surface> Surface_var;
   typedef DDS_DCPSStruct_out < Surface> Surface_out;

   struct TC
   {
         typedef DDS::Float _setpoint_slice;
         typedef DDS::Float _setpoint[16];
         typedef _setpoint _setpoint_out;
         static _setpoint_slice * _setpoint_alloc ();
         static void _setpoint_free (_setpoint_slice *);
         static void _setpoint_copy (_setpoint_slice* to, const _setpoint_slice* from);
         static _setpoint_slice *_setpoint_dup (const _setpoint_slice* from);

         struct _setpoint_uniq_ {};
         typedef DDS_DCPS_FArray_var< _setpoint, _setpoint_slice, struct _setpoint_uniq_> _setpoint_var;
         typedef DDS_DCPS_Array_forany< _setpoint, _setpoint_slice, struct _setpoint_uniq_> _setpoint_forany;
         typedef DDS::Float _temperature_slice;
         typedef DDS::Float _temperature[16];
         typedef _temperature _temperature_out;
         static _temperature_slice * _temperature_alloc ();
         static void _temperature_free (_temperature_slice *);
         static void _temperature_copy (_temperature_slice* to, const _temperature_slice* from);
         static _temperature_slice *_temperature_dup (const _temperature_slice* from);

         struct _temperature_uniq_ {};
         typedef DDS_DCPS_FArray_var< _temperature, _temperature_slice, struct _temperature_uniq_> _temperature_var;
         typedef DDS_DCPS_Array_forany< _temperature, _temperature_slice, struct _temperature_uniq_> _temperature_forany;
         typedef DDS::Float _error_slice;
         typedef DDS::Float _error[16];
         typedef _error _error_out;
         static _error_slice * _error_alloc ();
         static void _error_free (_error_slice *);
         static void _error_copy (_error_slice* to, const _error_slice* from);
         static _error_slice *_error_dup (const _error_slice* from);

         struct _error_uniq_ {};
         typedef DDS_DCPS_FArray_var< _error, _error_slice, struct _error_uniq_> _error_var;
         typedef DDS_DCPS_Array_forany< _error, _error_slice, struct _error_uniq_> _error_forany;
         typedef DDS::Short _status_slice;
         typedef DDS::Short _status[16];
         typedef _status _status_out;
         static _status_slice * _status_alloc ();
         static void _status_free (_status_slice *);
         static void _status_copy (_status_slice* to, const _status_slice* from);
         static _status_slice *_status_dup (const _status_slice* from);

         struct _status_uniq_ {};
         typedef DDS_DCPS_FArray_var< _status, _status_slice, struct _status_uniq_> _status_var;
         typedef DDS_DCPS_Array_forany< _status, _status_slice, struct _status_uniq_> _status_forany;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         _setpoint setpoint;
         _temperature temperature;
         _error error;
         _status status;
   };

   typedef DDS_DCPSStruct_var < TC> TC_var;
   typedef DDS_DCPSStruct_out < TC> TC_out;

   struct command_abort
   {
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::String_mgr device;
         DDS::String_mgr property;
         DDS::String_mgr action;
         DDS::String_mgr value;
   };

   typedef DDS_DCPSStruct_var < command_abort> command_abort_var;
   typedef DDS_DCPSStruct_out < command_abort> command_abort_out;

   struct command_configure
   {
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::String_mgr device;
         DDS::String_mgr property;
         DDS::String_mgr action;
         DDS::String_mgr value;
         DDS::String_mgr spec_id;
   };

   typedef DDS_DCPSStruct_var < command_configure> command_configure_var;
   typedef DDS_DCPSStruct_out < command_configure> command_configure_out;

   struct command_status
   {
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::String_mgr device;
         DDS::String_mgr property;
         DDS::String_mgr action;
         DDS::String_mgr value;
   };

   typedef DDS_DCPSStruct_var < command_status> command_status_var;
   typedef DDS_DCPSStruct_out < command_status> command_status_out;

   struct command_stop
   {
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::String_mgr device;
         DDS::String_mgr property;
         DDS::String_mgr action;
         DDS::String_mgr value;
   };

   typedef DDS_DCPSStruct_var < command_stop> command_stop_var;
   typedef DDS_DCPSStruct_out < command_stop> command_stop_out;

   struct command_target
   {
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::String_mgr device;
         DDS::String_mgr property;
         DDS::String_mgr action;
         DDS::String_mgr value;
         DDS::Double azimuth;
         DDS::Double elevation;
   };

   typedef DDS_DCPSStruct_var < command_target> command_target_var;
   typedef DDS_DCPSStruct_out < command_target> command_target_out;

   struct command_update
   {
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::String_mgr device;
         DDS::String_mgr property;
         DDS::String_mgr action;
         DDS::String_mgr value;
         DDS::String_mgr lut_id;
   };

   typedef DDS_DCPSStruct_var < command_update> command_update_var;
   typedef DDS_DCPSStruct_out < command_update> command_update_out;

   struct logevent_interlock
   {
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::Long priority;
         DDS::String_mgr detail;
   };

   typedef DDS_DCPSStruct_var < logevent_interlock> logevent_interlock_var;
   typedef DDS_DCPSStruct_out < logevent_interlock> logevent_interlock_out;

   struct logevent_limitError
   {
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::Long priority;
         DDS::String_mgr limit;
         DDS::String_mgr type;
   };

   typedef DDS_DCPSStruct_var < logevent_limitError> logevent_limitError_var;
   typedef DDS_DCPSStruct_out < logevent_limitError> logevent_limitError_out;

   struct logevent_targetDone
   {
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::Long priority;
   };

   typedef DDS_DCPSStruct_var < logevent_targetDone> logevent_targetDone_var;
   typedef DDS_DCPSStruct_out < logevent_targetDone> logevent_targetDone_out;

   struct logevent_targetError
   {
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::Long priority;
   };

   typedef DDS_DCPSStruct_var < logevent_targetError> logevent_targetError_var;
   typedef DDS_DCPSStruct_out < logevent_targetError> logevent_targetError_out;

   struct logevent_tempError
   {
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::Long priority;
         DDS::String_mgr device;
         DDS::Long severity;
         DDS::Double temp;
   };

   typedef DDS_DCPSStruct_var < logevent_tempError> logevent_tempError_var;
   typedef DDS_DCPSStruct_out < logevent_tempError> logevent_tempError_out;

   struct logevent_updateDone
   {
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::Long priority;
   };

   typedef DDS_DCPSStruct_var < logevent_updateDone> logevent_updateDone_var;
   typedef DDS_DCPSStruct_out < logevent_updateDone> logevent_updateDone_out;

   struct logevent_updateError
   {
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::Long priority;
   };

   typedef DDS_DCPSStruct_var < logevent_updateError> logevent_updateError_var;
   typedef DDS_DCPSStruct_out < logevent_updateError> logevent_updateError_out;

   struct command
   {
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::Long private_seqNum;
         DDS::String_mgr device;
         DDS::String_mgr property;
         DDS::String_mgr action;
         DDS::String_mgr value;
         DDS::String_mgr modifiers;
   };

   typedef DDS_DCPSStruct_var < command> command_var;
   typedef DDS_DCPSStruct_out < command> command_out;

   struct ackcmd
   {
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::Long private_seqNum;
         DDS::Long ack;
         DDS::Long error;
         DDS::String_mgr result;
   };

   typedef DDS_DCPSStruct_var < ackcmd> ackcmd_var;
   typedef DDS_DCPSStruct_out < ackcmd> ackcmd_out;

   struct logevent
   {
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::String_mgr message;
   };

   typedef DDS_DCPSStruct_var < logevent> logevent_var;
   typedef DDS_DCPSStruct_out < logevent> logevent_out;
}
template <>
m2::Actuators::_Raw_slice* DDS_DCPS_ArrayHelper < m2::Actuators::_Raw, m2::Actuators::_Raw_slice, m2::Actuators::_Raw_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < m2::Actuators::_Raw, m2::Actuators::_Raw_slice, m2::Actuators::_Raw_uniq_>::copy (m2::Actuators::_Raw_slice *to, const m2::Actuators::_Raw_slice* from);
template <>
void DDS_DCPS_ArrayHelper < m2::Actuators::_Raw, m2::Actuators::_Raw_slice, m2::Actuators::_Raw_uniq_>::free (m2::Actuators::_Raw_slice *ptr);
template <>
m2::Actuators::_Calibrated_slice* DDS_DCPS_ArrayHelper < m2::Actuators::_Calibrated, m2::Actuators::_Calibrated_slice, m2::Actuators::_Calibrated_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < m2::Actuators::_Calibrated, m2::Actuators::_Calibrated_slice, m2::Actuators::_Calibrated_uniq_>::copy (m2::Actuators::_Calibrated_slice *to, const m2::Actuators::_Calibrated_slice* from);
template <>
void DDS_DCPS_ArrayHelper < m2::Actuators::_Calibrated, m2::Actuators::_Calibrated_slice, m2::Actuators::_Calibrated_uniq_>::free (m2::Actuators::_Calibrated_slice *ptr);
template <>
m2::Application::_Demand_slice* DDS_DCPS_ArrayHelper < m2::Application::_Demand, m2::Application::_Demand_slice, m2::Application::_Demand_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < m2::Application::_Demand, m2::Application::_Demand_slice, m2::Application::_Demand_uniq_>::copy (m2::Application::_Demand_slice *to, const m2::Application::_Demand_slice* from);
template <>
void DDS_DCPS_ArrayHelper < m2::Application::_Demand, m2::Application::_Demand_slice, m2::Application::_Demand_uniq_>::free (m2::Application::_Demand_slice *ptr);
template <>
m2::Application::_Position_slice* DDS_DCPS_ArrayHelper < m2::Application::_Position, m2::Application::_Position_slice, m2::Application::_Position_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < m2::Application::_Position, m2::Application::_Position_slice, m2::Application::_Position_uniq_>::copy (m2::Application::_Position_slice *to, const m2::Application::_Position_slice* from);
template <>
void DDS_DCPS_ArrayHelper < m2::Application::_Position, m2::Application::_Position_slice, m2::Application::_Position_uniq_>::free (m2::Application::_Position_slice *ptr);
template <>
m2::Application::_Error_slice* DDS_DCPS_ArrayHelper < m2::Application::_Error, m2::Application::_Error_slice, m2::Application::_Error_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < m2::Application::_Error, m2::Application::_Error_slice, m2::Application::_Error_uniq_>::copy (m2::Application::_Error_slice *to, const m2::Application::_Error_slice* from);
template <>
void DDS_DCPS_ArrayHelper < m2::Application::_Error, m2::Application::_Error_slice, m2::Application::_Error_uniq_>::free (m2::Application::_Error_slice *ptr);
template <>
m2::Electrical::_voltage_slice* DDS_DCPS_ArrayHelper < m2::Electrical::_voltage, m2::Electrical::_voltage_slice, m2::Electrical::_voltage_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < m2::Electrical::_voltage, m2::Electrical::_voltage_slice, m2::Electrical::_voltage_uniq_>::copy (m2::Electrical::_voltage_slice *to, const m2::Electrical::_voltage_slice* from);
template <>
void DDS_DCPS_ArrayHelper < m2::Electrical::_voltage, m2::Electrical::_voltage_slice, m2::Electrical::_voltage_uniq_>::free (m2::Electrical::_voltage_slice *ptr);
template <>
m2::Electrical::_error_slice* DDS_DCPS_ArrayHelper < m2::Electrical::_error, m2::Electrical::_error_slice, m2::Electrical::_error_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < m2::Electrical::_error, m2::Electrical::_error_slice, m2::Electrical::_error_uniq_>::copy (m2::Electrical::_error_slice *to, const m2::Electrical::_error_slice* from);
template <>
void DDS_DCPS_ArrayHelper < m2::Electrical::_error, m2::Electrical::_error_slice, m2::Electrical::_error_uniq_>::free (m2::Electrical::_error_slice *ptr);
template <>
m2::Electrical::_status_slice* DDS_DCPS_ArrayHelper < m2::Electrical::_status, m2::Electrical::_status_slice, m2::Electrical::_status_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < m2::Electrical::_status, m2::Electrical::_status_slice, m2::Electrical::_status_uniq_>::copy (m2::Electrical::_status_slice *to, const m2::Electrical::_status_slice* from);
template <>
void DDS_DCPS_ArrayHelper < m2::Electrical::_status, m2::Electrical::_status_slice, m2::Electrical::_status_uniq_>::free (m2::Electrical::_status_slice *ptr);
template <>
m2::LimitSensors::_liftoff_slice* DDS_DCPS_ArrayHelper < m2::LimitSensors::_liftoff, m2::LimitSensors::_liftoff_slice, m2::LimitSensors::_liftoff_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < m2::LimitSensors::_liftoff, m2::LimitSensors::_liftoff_slice, m2::LimitSensors::_liftoff_uniq_>::copy (m2::LimitSensors::_liftoff_slice *to, const m2::LimitSensors::_liftoff_slice* from);
template <>
void DDS_DCPS_ArrayHelper < m2::LimitSensors::_liftoff, m2::LimitSensors::_liftoff_slice, m2::LimitSensors::_liftoff_uniq_>::free (m2::LimitSensors::_liftoff_slice *ptr);
template <>
m2::LimitSensors::_limit_slice* DDS_DCPS_ArrayHelper < m2::LimitSensors::_limit, m2::LimitSensors::_limit_slice, m2::LimitSensors::_limit_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < m2::LimitSensors::_limit, m2::LimitSensors::_limit_slice, m2::LimitSensors::_limit_uniq_>::copy (m2::LimitSensors::_limit_slice *to, const m2::LimitSensors::_limit_slice* from);
template <>
void DDS_DCPS_ArrayHelper < m2::LimitSensors::_limit, m2::LimitSensors::_limit_slice, m2::LimitSensors::_limit_uniq_>::free (m2::LimitSensors::_limit_slice *ptr);
template <>
m2::Metrology::_distance_slice* DDS_DCPS_ArrayHelper < m2::Metrology::_distance, m2::Metrology::_distance_slice, m2::Metrology::_distance_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < m2::Metrology::_distance, m2::Metrology::_distance_slice, m2::Metrology::_distance_uniq_>::copy (m2::Metrology::_distance_slice *to, const m2::Metrology::_distance_slice* from);
template <>
void DDS_DCPS_ArrayHelper < m2::Metrology::_distance, m2::Metrology::_distance_slice, m2::Metrology::_distance_uniq_>::free (m2::Metrology::_distance_slice *ptr);
template <>
m2::Metrology::_error_slice* DDS_DCPS_ArrayHelper < m2::Metrology::_error, m2::Metrology::_error_slice, m2::Metrology::_error_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < m2::Metrology::_error, m2::Metrology::_error_slice, m2::Metrology::_error_uniq_>::copy (m2::Metrology::_error_slice *to, const m2::Metrology::_error_slice* from);
template <>
void DDS_DCPS_ArrayHelper < m2::Metrology::_error, m2::Metrology::_error_slice, m2::Metrology::_error_uniq_>::free (m2::Metrology::_error_slice *ptr);
template <>
m2::Metrology::_status_slice* DDS_DCPS_ArrayHelper < m2::Metrology::_status, m2::Metrology::_status_slice, m2::Metrology::_status_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < m2::Metrology::_status, m2::Metrology::_status_slice, m2::Metrology::_status_uniq_>::copy (m2::Metrology::_status_slice *to, const m2::Metrology::_status_slice* from);
template <>
void DDS_DCPS_ArrayHelper < m2::Metrology::_status, m2::Metrology::_status_slice, m2::Metrology::_status_uniq_>::free (m2::Metrology::_status_slice *ptr);
template <>
m2::Surface::_Raw_slice* DDS_DCPS_ArrayHelper < m2::Surface::_Raw, m2::Surface::_Raw_slice, m2::Surface::_Raw_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < m2::Surface::_Raw, m2::Surface::_Raw_slice, m2::Surface::_Raw_uniq_>::copy (m2::Surface::_Raw_slice *to, const m2::Surface::_Raw_slice* from);
template <>
void DDS_DCPS_ArrayHelper < m2::Surface::_Raw, m2::Surface::_Raw_slice, m2::Surface::_Raw_uniq_>::free (m2::Surface::_Raw_slice *ptr);
template <>
m2::Surface::_Calibrated_slice* DDS_DCPS_ArrayHelper < m2::Surface::_Calibrated, m2::Surface::_Calibrated_slice, m2::Surface::_Calibrated_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < m2::Surface::_Calibrated, m2::Surface::_Calibrated_slice, m2::Surface::_Calibrated_uniq_>::copy (m2::Surface::_Calibrated_slice *to, const m2::Surface::_Calibrated_slice* from);
template <>
void DDS_DCPS_ArrayHelper < m2::Surface::_Calibrated, m2::Surface::_Calibrated_slice, m2::Surface::_Calibrated_uniq_>::free (m2::Surface::_Calibrated_slice *ptr);
template <>
m2::TC::_setpoint_slice* DDS_DCPS_ArrayHelper < m2::TC::_setpoint, m2::TC::_setpoint_slice, m2::TC::_setpoint_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < m2::TC::_setpoint, m2::TC::_setpoint_slice, m2::TC::_setpoint_uniq_>::copy (m2::TC::_setpoint_slice *to, const m2::TC::_setpoint_slice* from);
template <>
void DDS_DCPS_ArrayHelper < m2::TC::_setpoint, m2::TC::_setpoint_slice, m2::TC::_setpoint_uniq_>::free (m2::TC::_setpoint_slice *ptr);
template <>
m2::TC::_temperature_slice* DDS_DCPS_ArrayHelper < m2::TC::_temperature, m2::TC::_temperature_slice, m2::TC::_temperature_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < m2::TC::_temperature, m2::TC::_temperature_slice, m2::TC::_temperature_uniq_>::copy (m2::TC::_temperature_slice *to, const m2::TC::_temperature_slice* from);
template <>
void DDS_DCPS_ArrayHelper < m2::TC::_temperature, m2::TC::_temperature_slice, m2::TC::_temperature_uniq_>::free (m2::TC::_temperature_slice *ptr);
template <>
m2::TC::_error_slice* DDS_DCPS_ArrayHelper < m2::TC::_error, m2::TC::_error_slice, m2::TC::_error_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < m2::TC::_error, m2::TC::_error_slice, m2::TC::_error_uniq_>::copy (m2::TC::_error_slice *to, const m2::TC::_error_slice* from);
template <>
void DDS_DCPS_ArrayHelper < m2::TC::_error, m2::TC::_error_slice, m2::TC::_error_uniq_>::free (m2::TC::_error_slice *ptr);
template <>
m2::TC::_status_slice* DDS_DCPS_ArrayHelper < m2::TC::_status, m2::TC::_status_slice, m2::TC::_status_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < m2::TC::_status, m2::TC::_status_slice, m2::TC::_status_uniq_>::copy (m2::TC::_status_slice *to, const m2::TC::_status_slice* from);
template <>
void DDS_DCPS_ArrayHelper < m2::TC::_status, m2::TC::_status_slice, m2::TC::_status_uniq_>::free (m2::TC::_status_slice *ptr);




#endif 
