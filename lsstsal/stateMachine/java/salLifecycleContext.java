/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : salLifecycle.sm
 */


public class salLifecycleContext
    extends statemap.FSMContext
{
//---------------------------------------------------------------
// Member methods.
//

    public salLifecycleContext(salLifecycle owner)
    {
        this (owner, MainMap.Off);
    }

    public salLifecycleContext(salLifecycle owner, salLifecycleState initState)
    {
        super (initState);

        _owner = owner;
    }

    @Override
    public void enterStartState()
    {
        getState().entry(this);
        return;
    }

    public void configureError()
    {
        _transition = "configureError";
        getState().configureError(this);
        _transition = "";
        return;
    }

    public void disableError()
    {
        _transition = "disableError";
        getState().disableError(this);
        _transition = "";
        return;
    }

    public void enableError()
    {
        _transition = "enableError";
        getState().enableError(this);
        _transition = "";
        return;
    }

    public void ocsAbandon()
    {
        _transition = "ocsAbandon";
        getState().ocsAbandon(this);
        _transition = "";
        return;
    }

    public void ocsAbort()
    {
        _transition = "ocsAbort";
        getState().ocsAbort(this);
        _transition = "";
        return;
    }

    public void ocsBoot()
    {
        _transition = "ocsBoot";
        getState().ocsBoot(this);
        _transition = "";
        return;
    }

    public void ocsConfigure()
    {
        _transition = "ocsConfigure";
        getState().ocsConfigure(this);
        _transition = "";
        return;
    }

    public void ocsDisable()
    {
        _transition = "ocsDisable";
        getState().ocsDisable(this);
        _transition = "";
        return;
    }

    public void ocsEnable()
    {
        _transition = "ocsEnable";
        getState().ocsEnable(this);
        _transition = "";
        return;
    }

    public void ocsQuit()
    {
        _transition = "ocsQuit";
        getState().ocsQuit(this);
        _transition = "";
        return;
    }

    public void ocsReset()
    {
        _transition = "ocsReset";
        getState().ocsReset(this);
        _transition = "";
        return;
    }

    public void ocsSetValue()
    {
        _transition = "ocsSetValue";
        getState().ocsSetValue(this);
        _transition = "";
        return;
    }

    public void ocsStop()
    {
        _transition = "ocsStop";
        getState().ocsStop(this);
        _transition = "";
        return;
    }

    public void ocsUnConfigure()
    {
        _transition = "ocsUnConfigure";
        getState().ocsUnConfigure(this);
        _transition = "";
        return;
    }

    public salLifecycleState getState()
        throws statemap.StateUndefinedException
    {
        if (_state == null)
        {
            throw(
                new statemap.StateUndefinedException());
        }

        return ((salLifecycleState) _state);
    }

    protected salLifecycle getOwner()
    {
        return (_owner);
    }

    public void setOwner(salLifecycle owner)
    {
        if (owner == null)
        {
            throw (
                new NullPointerException(
                    "null owner"));
        }
        else
        {
            _owner = owner;
        }

        return;
    }

//---------------------------------------------------------------
// Member data.
//

    transient private salLifecycle _owner;

    //-----------------------------------------------------------
    // Constants.
    //

    private static final long serialVersionUID = 1L;

//---------------------------------------------------------------
// Inner classes.
//

    public static abstract class salLifecycleState
        extends statemap.State
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected salLifecycleState(String name, int id)
        {
            super (name, id);
        }

        protected void entry(salLifecycleContext context) {}
        protected void exit(salLifecycleContext context) {}

        protected void configureError(salLifecycleContext context)
        {
            Default(context);
        }

        protected void disableError(salLifecycleContext context)
        {
            Default(context);
        }

        protected void enableError(salLifecycleContext context)
        {
            Default(context);
        }

        protected void ocsAbandon(salLifecycleContext context)
        {
            Default(context);
        }

        protected void ocsAbort(salLifecycleContext context)
        {
            Default(context);
        }

        protected void ocsBoot(salLifecycleContext context)
        {
            Default(context);
        }

        protected void ocsConfigure(salLifecycleContext context)
        {
            Default(context);
        }

        protected void ocsDisable(salLifecycleContext context)
        {
            Default(context);
        }

        protected void ocsEnable(salLifecycleContext context)
        {
            Default(context);
        }

        protected void ocsQuit(salLifecycleContext context)
        {
            Default(context);
        }

        protected void ocsReset(salLifecycleContext context)
        {
            Default(context);
        }

        protected void ocsSetValue(salLifecycleContext context)
        {
            Default(context);
        }

        protected void ocsStop(salLifecycleContext context)
        {
            Default(context);
        }

        protected void ocsUnConfigure(salLifecycleContext context)
        {
            Default(context);
        }

        protected void Default(salLifecycleContext context)
        {
            throw (
                new statemap.TransitionUndefinedException(
                    "State: " +
                    context.getState().getName() +
                    ", Transition: " +
                    context.getTransition()));
        }

    //-----------------------------------------------------------
    // Member data.
    //
    }

    /* package */ static abstract class MainMap
    {
    //-----------------------------------------------------------
    // Member methods.
    //

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
        // Constants.
        //

        public static final MainMap_Off Off =
            new MainMap_Off("MainMap.Off", 0);
        public static final MainMap_STANDBY STANDBY =
            new MainMap_STANDBY("MainMap.STANDBY", 1);
        public static final MainMap_CONFIGURING CONFIGURING =
            new MainMap_CONFIGURING("MainMap.CONFIGURING", 2);
        public static final MainMap_DISABLED DISABLED =
            new MainMap_DISABLED("MainMap.DISABLED", 3);
        public static final MainMap_ENABLED ENABLED =
            new MainMap_ENABLED("MainMap.ENABLED", 4);
        public static final MainMap_ERROR ERROR =
            new MainMap_ERROR("MainMap.ERROR", 5);
    }

    protected static class MainMap_Default
        extends salLifecycleState
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected MainMap_Default(String name, int id)
        {
            super (name, id);
        }

    //-----------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class MainMap_Off
        extends MainMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private MainMap_Off(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void ocsBoot(salLifecycleContext context)
        {
            salLifecycle ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.boot();
            }
            finally
            {
                context.setState(MainMap.STANDBY);
                (context.getState()).entry(context);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class MainMap_STANDBY
        extends MainMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private MainMap_STANDBY(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void ocsConfigure(salLifecycleContext context)
        {
            salLifecycle ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.configureAck();
            }
            finally
            {
                context.setState(MainMap.CONFIGURING);
                (context.getState()).entry(context);
            }

            return;
        }

        @Override
        protected void ocsQuit(salLifecycleContext context)
        {
            salLifecycle ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.quit();
            }
            finally
            {
                context.setState(MainMap.Off);
                (context.getState()).entry(context);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class MainMap_CONFIGURING
        extends MainMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private MainMap_CONFIGURING(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void configureError(salLifecycleContext context)
        {
            salLifecycle ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.configureFailed();
            }
            finally
            {
                context.setState(MainMap.ERROR);
                (context.getState()).entry(context);
            }

            return;
        }

        @Override
        protected void ocsAbandon(salLifecycleContext context)
        {
            salLifecycle ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.abandon();
            }
            finally
            {
                context.setState(MainMap.STANDBY);
                (context.getState()).entry(context);
            }

            return;
        }

        @Override
        protected void ocsConfigure(salLifecycleContext context)
        {
            salLifecycle ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.configureDone();
            }
            finally
            {
                context.setState(MainMap.DISABLED);
                (context.getState()).entry(context);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class MainMap_DISABLED
        extends MainMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private MainMap_DISABLED(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void disableError(salLifecycleContext context)
        {
            salLifecycle ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.disableFailed();
            }
            finally
            {
                context.setState(MainMap.ERROR);
                (context.getState()).entry(context);
            }

            return;
        }

        @Override
        protected void ocsEnable(salLifecycleContext context)
        {
            salLifecycle ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.enableAck();
            }
            finally
            {
                context.setState(MainMap.ENABLED);
                (context.getState()).entry(context);
            }

            return;
        }

        @Override
        protected void ocsUnConfigure(salLifecycleContext context)
        {
            salLifecycle ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.unConfigureAck();
            }
            finally
            {
                context.setState(MainMap.STANDBY);
                (context.getState()).entry(context);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class MainMap_ENABLED
        extends MainMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private MainMap_ENABLED(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void enableError(salLifecycleContext context)
        {
            salLifecycle ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.enableFailed();
            }
            finally
            {
                context.setState(MainMap.ERROR);
                (context.getState()).entry(context);
            }

            return;
        }

        @Override
        protected void ocsAbort(salLifecycleContext context)
        {
            salLifecycle ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.enableFailed();
            }
            finally
            {
                context.setState(MainMap.ERROR);
                (context.getState()).entry(context);
            }

            return;
        }

        @Override
        protected void ocsDisable(salLifecycleContext context)
        {
            salLifecycle ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.disableDone();
            }
            finally
            {
                context.setState(MainMap.DISABLED);
                (context.getState()).entry(context);
            }

            return;
        }

        @Override
        protected void ocsEnable(salLifecycleContext context)
        {
            salLifecycle ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.enableDone();
            }
            finally
            {
                context.setState(MainMap.ENABLED);
                (context.getState()).entry(context);
            }

            return;
        }

        @Override
        protected void ocsSetValue(salLifecycleContext context)
        {
            salLifecycle ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.setValue();
            }
            finally
            {
                context.setState(MainMap.ENABLED);
                (context.getState()).entry(context);
            }

            return;
        }

        @Override
        protected void ocsStop(salLifecycleContext context)
        {
            salLifecycle ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.stopDone();
            }
            finally
            {
                context.setState(MainMap.ENABLED);
                (context.getState()).entry(context);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class MainMap_ERROR
        extends MainMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private MainMap_ERROR(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void ocsReset(salLifecycleContext context)
        {
            salLifecycle ctxt = context.getOwner();

            (context.getState()).exit(context);
            context.clearState();
            try
            {
                ctxt.reset();
            }
            finally
            {
                context.setState(MainMap.STANDBY);
                (context.getState()).entry(context);
            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
