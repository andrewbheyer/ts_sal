# ex: set ro:
# DO NOT EDIT.
# generated by smc (http://smc.sourceforge.net/)
# from file : salLifecycle.sm

import statemap


class salLifecycleState(statemap.State):

    def Entry(self, fsm):
        pass

    def Exit(self, fsm):
        pass

    def configureError(self, fsm):
        self.Default(fsm)

    def disableError(self, fsm):
        self.Default(fsm)

    def enableError(self, fsm):
        self.Default(fsm)

    def ocsAbandon(self, fsm):
        self.Default(fsm)

    def ocsAbort(self, fsm):
        self.Default(fsm)

    def ocsBoot(self, fsm):
        self.Default(fsm)

    def ocsConfigure(self, fsm):
        self.Default(fsm)

    def ocsDisable(self, fsm):
        self.Default(fsm)

    def ocsEnable(self, fsm):
        self.Default(fsm)

    def ocsQuit(self, fsm):
        self.Default(fsm)

    def ocsReset(self, fsm):
        self.Default(fsm)

    def ocsSetValue(self, fsm):
        self.Default(fsm)

    def ocsStop(self, fsm):
        self.Default(fsm)

    def ocsUnConfigure(self, fsm):
        self.Default(fsm)

    def Default(self, fsm):
        msg = "\n\tState: %s\n\tTransition: %s" % (
            fsm.getState().getName(), fsm.getTransition())
        raise statemap.TransitionUndefinedException(msg)

class MainMap_Default(salLifecycleState):
    pass

class MainMap_Off(MainMap_Default):

    def ocsBoot(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.boot()
        finally:
            fsm.setState(MainMap.STANDBY)
            fsm.getState().Entry(fsm)

class MainMap_STANDBY(MainMap_Default):

    def ocsConfigure(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.configureAck()
        finally:
            fsm.setState(MainMap.CONFIGURING)
            fsm.getState().Entry(fsm)

    def ocsQuit(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.quit()
        finally:
            fsm.setState(MainMap.Off)
            fsm.getState().Entry(fsm)

class MainMap_CONFIGURING(MainMap_Default):

    def configureError(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.configureFailed()
        finally:
            fsm.setState(MainMap.ERROR)
            fsm.getState().Entry(fsm)

    def ocsAbandon(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.abandon()
        finally:
            fsm.setState(MainMap.STANDBY)
            fsm.getState().Entry(fsm)

    def ocsConfigure(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.configureDone()
        finally:
            fsm.setState(MainMap.DISABLED)
            fsm.getState().Entry(fsm)

class MainMap_DISABLED(MainMap_Default):

    def disableError(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.disableFailed()
        finally:
            fsm.setState(MainMap.ERROR)
            fsm.getState().Entry(fsm)

    def ocsEnable(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.enableAck()
        finally:
            fsm.setState(MainMap.ENABLED)
            fsm.getState().Entry(fsm)

    def ocsUnConfigure(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.unConfigureAck()
        finally:
            fsm.setState(MainMap.STANDBY)
            fsm.getState().Entry(fsm)

class MainMap_ENABLED(MainMap_Default):

    def enableError(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.enableFailed()
        finally:
            fsm.setState(MainMap.ERROR)
            fsm.getState().Entry(fsm)

    def ocsAbort(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.enableFailed()
        finally:
            fsm.setState(MainMap.ERROR)
            fsm.getState().Entry(fsm)

    def ocsDisable(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.disableDone()
        finally:
            fsm.setState(MainMap.DISABLED)
            fsm.getState().Entry(fsm)

    def ocsEnable(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.enableDone()
        finally:
            fsm.setState(MainMap.ENABLED)
            fsm.getState().Entry(fsm)

    def ocsSetValue(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.setValue(par, val)
        finally:
            fsm.setState(MainMap.ENABLED)
            fsm.getState().Entry(fsm)

    def ocsStop(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.stopDone()
        finally:
            fsm.setState(MainMap.ENABLED)
            fsm.getState().Entry(fsm)

class MainMap_ERROR(MainMap_Default):

    def ocsReset(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.reset()
        finally:
            fsm.setState(MainMap.STANDBY)
            fsm.getState().Entry(fsm)

class MainMap(object):

    Off = MainMap_Off('MainMap.Off', 0)
    STANDBY = MainMap_STANDBY('MainMap.STANDBY', 1)
    CONFIGURING = MainMap_CONFIGURING('MainMap.CONFIGURING', 2)
    DISABLED = MainMap_DISABLED('MainMap.DISABLED', 3)
    ENABLED = MainMap_ENABLED('MainMap.ENABLED', 4)
    ERROR = MainMap_ERROR('MainMap.ERROR', 5)
    Default = MainMap_Default('MainMap.Default', -1)

class salLifecycle_sm(statemap.FSMContext):

    def __init__(self, owner):
        statemap.FSMContext.__init__(self, MainMap.Off)
        self._owner = owner

    def __getattr__(self, attrib):
        def trans_sm(*arglist):
            self._transition = attrib
            getattr(self.getState(), attrib)(self, *arglist)
            self._transition = None
        return trans_sm

    def enterStartState(self):
        self._state.Entry(self)

    def getOwner(self):
        return self._owner

# Local variables:
#  buffer-read-only: t
# End:
