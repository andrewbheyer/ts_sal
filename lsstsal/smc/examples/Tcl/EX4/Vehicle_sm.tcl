# ex: set ro:
# DO NOT EDIT.
# generated by smc (http://smc.sourceforge.net/)
# from file : Vehicle.sm


namespace eval tcl_ex4 {

    class VehicleContext {
        inherit ::statemap::FSMContext;

    # Member functions.

        constructor {owner} {
            ::statemap::FSMContext::constructor ${::tcl_ex4::VehicleMap::Stopped};
        } {
            set _owner $owner;
        }

        public method Continue {} {
            [getState] Continue $this;
            return -code ok;
        }

        public method KeepGoing {} {
            [getState] KeepGoing $this;
            return -code ok;
        }

        public method LightGreen {} {
            [getState] LightGreen $this;
            return -code ok;
        }

        public method LightRed {} {
            [getState] LightRed $this;
            return -code ok;
        }

        public method Pause {} {
            [getState] Pause $this;
            return -code ok;
        }

        public method Start {} {
            [getState] Start $this;
            return -code ok;
        }

        public method Stop {} {
            [getState] Stop $this;
            return -code ok;
        }

        public method TripDone {} {
            [getState] TripDone $this;
            return -code ok;
        }

        public method getOwner {} {
            return -code ok $_owner;
        }

    # Member data.

        private variable _owner;
    }

    class VehicleState {
        inherit ::statemap::State;

    # Member functions.

        constructor {name id} {
            ::statemap::State::constructor $name $id;
        } {}

        public method Entry {context} {};
        public method Exit {context} {};

        public method Continue {context} {
            Default $context;
            return -code ok;
        }

        public method KeepGoing {context} {
            Default $context;
            return -code ok;
        }

        public method LightGreen {context} {
            Default $context;
            return -code ok;
        }

        public method LightRed {context} {
            Default $context;
            return -code ok;
        }

        public method Pause {context} {
            Default $context;
            return -code ok;
        }

        public method Start {context} {
            Default $context;
            return -code ok;
        }

        public method Stop {context} {
            Default $context;
            return -code ok;
        }

        public method TripDone {context} {
            Default $context;
            return -code ok;
        }

        public method Default {context} {
            set transition [$context getTransition];
            return -code error "Transition \"$transition\" fell through to a non-existent default definition.";
        }
    }

    class VehicleMap {
    # Member data.

        public common Stopped "";
        public common Moving "";
        public common AtLight "";
        public common Done "";
    }

    class VehicleMap_Default {
        inherit VehicleState;

    # Member functions.

        constructor {name id} {
           VehicleState::constructor $name $id;
        } {}

        public method KeepGoing {context} {
            set _transition "KeepGoing";
            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "LEAVING STATE   : VehicleMap::Default";
            }

            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "ENTER TRANSITION: VehicleMap::Default KeepGoing()";
            }


            return -code ok;
        }

        public method LightGreen {context} {
            set _transition "LightGreen";
            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "LEAVING STATE   : VehicleMap::Default";
            }

            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "ENTER TRANSITION: VehicleMap::Default LightGreen()";
            }


            return -code ok;
        }

        public method LightRed {context} {
            set _transition "LightRed";
            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "LEAVING STATE   : VehicleMap::Default";
            }

            [$context getState] Exit $context;
            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "ENTER TRANSITION: VehicleMap::Default LightRed()";
            }

            $context setState ${::tcl_ex4::VehicleMap::Stopped};
            [$context getState] Entry $context;

            return -code ok;
        }

        public method TripDone {context} {
            set _transition "TripDone";
            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "LEAVING STATE   : VehicleMap::Default";
            }

            [$context getState] Exit $context;
            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "ENTER TRANSITION: VehicleMap::Default TripDone()";
            }

            $context setState ${::tcl_ex4::VehicleMap::Done};
            [$context getState] Entry $context;

            return -code ok;
        }

        public method Start {context} {
            set _transition "Start";
            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "LEAVING STATE   : VehicleMap::Default";
            }

            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "ENTER TRANSITION: VehicleMap::Default Start()";
            }


            return -code ok;
        }

        public method Pause {context} {
            set _transition "Pause";
            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "LEAVING STATE   : VehicleMap::Default";
            }

            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "ENTER TRANSITION: VehicleMap::Default Pause()";
            }

            $context pushState ${::tcl_ex4::PauseMap2::Paused};
            [$context getState] Entry $context;

            return -code ok;
        }

        public method Continue {context} {
            set _transition "Continue";
            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "LEAVING STATE   : VehicleMap::Default";
            }

            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "ENTER TRANSITION: VehicleMap::Default Continue()";
            }


            return -code ok;
        }

        public method Stop {context} {
            set ctxt [$context getOwner];
            set _transition "Stop";
            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "LEAVING STATE   : VehicleMap::Default";
            }

            [$context getState] Exit $context;
            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "ENTER TRANSITION: VehicleMap::Default Stop()";
            }

            $context clearState;
            if [catch {
                $ctxt StopTimer ;
                if {[$context getDebugFlag] != 0} {
                    puts [$context getDebugStream] "EXIT TRANSITION : VehicleMap::Default Stop()";
                }

            } result] {
                $context setState ${::tcl_ex4::VehicleMap::Stopped};
                error $result;
            } else {
                $context setState ${::tcl_ex4::VehicleMap::Stopped};
            }
            [$context getState] Entry $context;

            return -code ok;
        }
    }

    class VehicleMap_Stopped {
        inherit VehicleMap_Default;

        constructor {name id} {
            VehicleMap_Default::constructor $name $id;
        } {}

        public method Continue {context} {

            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "LEAVING STATE   : VehicleMap::Stopped";
            }

            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "ENTER TRANSITION: VehicleMap::Stopped Continue()";
            }


            return -code ok;
        }

        public method Pause {context} {

            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "LEAVING STATE   : VehicleMap::Stopped";
            }

            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "ENTER TRANSITION: VehicleMap::Stopped Pause()";
            }


            return -code ok;
        }

        public method Start {context} {
            set ctxt [$context getOwner];

            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "LEAVING STATE   : VehicleMap::Stopped";
            }

            [$context getState] Exit $context;
            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "ENTER TRANSITION: VehicleMap::Stopped Start()";
            }

            $context clearState;
            if [catch {
                $ctxt SetTimer ;
                if {[$context getDebugFlag] != 0} {
                    puts [$context getDebugStream] "EXIT TRANSITION : VehicleMap::Stopped Start()";
                }

            } result] {
                $context setState ${::tcl_ex4::VehicleMap::Moving};
                error $result;
            } else {
                $context setState ${::tcl_ex4::VehicleMap::Moving};
            }
            [$context getState] Entry $context;

            return -code ok;
        }

        public method Stop {context} {

            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "LEAVING STATE   : VehicleMap::Stopped";
            }

            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "ENTER TRANSITION: VehicleMap::Stopped Stop()";
            }


            return -code ok;
        }
    }

    class VehicleMap_Moving {
        inherit VehicleMap_Default;

        constructor {name id} {
            VehicleMap_Default::constructor $name $id;
        } {}

        public method KeepGoing {context} {
            set ctxt [$context getOwner];

            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "LEAVING STATE   : VehicleMap::Moving";
            }

            set EndStateName [$context getState];
            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "ENTER TRANSITION: VehicleMap::Moving KeepGoing()";
            }

            $context clearState;
            if [catch {
                $ctxt Move ;
                $ctxt SetTimer ;
                if {[$context getDebugFlag] != 0} {
                    puts [$context getDebugStream] "EXIT TRANSITION : VehicleMap::Moving KeepGoing()";
                }

            } result] {
                $context setState ${EndStateName};
                error $result;
            } else {
                $context setState ${EndStateName};
            }

            return -code ok;
        }

        public method LightRed {context} {
            set ctxt [$context getOwner];

            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "LEAVING STATE   : VehicleMap::Moving";
            }

            [$context getState] Exit $context;
            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "ENTER TRANSITION: VehicleMap::Moving LightRed()";
            }

            $context clearState;
            if [catch {
                $ctxt RegisterWithLight ;
                if {[$context getDebugFlag] != 0} {
                    puts [$context getDebugStream] "EXIT TRANSITION : VehicleMap::Moving LightRed()";
                }

            } result] {
                $context setState ${::tcl_ex4::VehicleMap::AtLight};
                error $result;
            } else {
                $context setState ${::tcl_ex4::VehicleMap::AtLight};
            }
            [$context getState] Entry $context;

            return -code ok;
        }

        public method TripDone {context} {
            set ctxt [$context getOwner];

            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "LEAVING STATE   : VehicleMap::Moving";
            }

            [$context getState] Exit $context;
            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "ENTER TRANSITION: VehicleMap::Moving TripDone()";
            }

            $context clearState;
            if [catch {
                $ctxt SelfDestruct ;
                if {[$context getDebugFlag] != 0} {
                    puts [$context getDebugStream] "EXIT TRANSITION : VehicleMap::Moving TripDone()";
                }

            } result] {
                $context setState ${::tcl_ex4::VehicleMap::Done};
                error $result;
            } else {
                $context setState ${::tcl_ex4::VehicleMap::Done};
            }
            [$context getState] Entry $context;

            return -code ok;
        }
    }

    class VehicleMap_AtLight {
        inherit VehicleMap_Default;

        constructor {name id} {
            VehicleMap_Default::constructor $name $id;
        } {}

        public method LightGreen {context} {
            set ctxt [$context getOwner];

            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "LEAVING STATE   : VehicleMap::AtLight";
            }

            [$context getState] Exit $context;
            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "ENTER TRANSITION: VehicleMap::AtLight LightGreen()";
            }

            $context clearState;
            if [catch {
                $ctxt Move ;
                $ctxt SetTimer ;
                if {[$context getDebugFlag] != 0} {
                    puts [$context getDebugStream] "EXIT TRANSITION : VehicleMap::AtLight LightGreen()";
                }

            } result] {
                $context setState ${::tcl_ex4::VehicleMap::Moving};
                error $result;
            } else {
                $context setState ${::tcl_ex4::VehicleMap::Moving};
            }
            [$context getState] Entry $context;

            return -code ok;
        }
    }

    class VehicleMap_Done {
        inherit VehicleMap_Default;

        constructor {name id} {
            VehicleMap_Default::constructor $name $id;
        } {}
    }


    class PauseMap2 {
    # Member data.

        public common Paused "";
        public common KeepGoing "";
        public common LightGreen "";
        public common LightRed "";
        public common TripDone "";
    }

    class PauseMap2_Default {
        inherit VehicleState;

    # Member functions.

        constructor {name id} {
           VehicleState::constructor $name $id;
        } {}

        public method Start {context} {
            set _transition "Start";
            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "LEAVING STATE   : PauseMap2::Default";
            }

            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "ENTER TRANSITION: PauseMap2::Default Start()";
            }


            return -code ok;
        }

        public method Pause {context} {
            set _transition "Pause";
            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "LEAVING STATE   : PauseMap2::Default";
            }

            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "ENTER TRANSITION: PauseMap2::Default Pause()";
            }


            return -code ok;
        }

        public method Stop {context} {
            set _transition "Stop";
            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "LEAVING STATE   : PauseMap2::Default";
            }

            [$context getState] Exit $context;
            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "ENTER TRANSITION: PauseMap2::Default Stop()";
            }

            $context popState;

            $context Stop;

            return -code ok;
        }

        public method KeepGoing {context} {
            set _transition "KeepGoing";
            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "LEAVING STATE   : PauseMap2::Default";
            }

            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "ENTER TRANSITION: PauseMap2::Default KeepGoing()";
            }


            return -code ok;
        }

        public method LightGreen {context} {
            set _transition "LightGreen";
            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "LEAVING STATE   : PauseMap2::Default";
            }

            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "ENTER TRANSITION: PauseMap2::Default LightGreen()";
            }


            return -code ok;
        }

        public method LightRed {context} {
            set _transition "LightRed";
            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "LEAVING STATE   : PauseMap2::Default";
            }

            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "ENTER TRANSITION: PauseMap2::Default LightRed()";
            }


            return -code ok;
        }

        public method TripDone {context} {
            set _transition "TripDone";
            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "LEAVING STATE   : PauseMap2::Default";
            }

            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "ENTER TRANSITION: PauseMap2::Default TripDone()";
            }


            return -code ok;
        }
    }

    class PauseMap2_Paused {
        inherit PauseMap2_Default;

        constructor {name id} {
            PauseMap2_Default::constructor $name $id;
        } {}

        public method Continue {context} {

            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "LEAVING STATE   : PauseMap2::Paused";
            }

            [$context getState] Exit $context;
            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "ENTER TRANSITION: PauseMap2::Paused Continue()";
            }

            $context popState;

            $context Continue;

            return -code ok;
        }

        public method KeepGoing {context} {

            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "LEAVING STATE   : PauseMap2::Paused";
            }

            [$context getState] Exit $context;
            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "ENTER TRANSITION: PauseMap2::Paused KeepGoing()";
            }

            $context setState ${::tcl_ex4::PauseMap2::KeepGoing};
            [$context getState] Entry $context;

            return -code ok;
        }

        public method LightGreen {context} {

            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "LEAVING STATE   : PauseMap2::Paused";
            }

            [$context getState] Exit $context;
            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "ENTER TRANSITION: PauseMap2::Paused LightGreen()";
            }

            $context setState ${::tcl_ex4::PauseMap2::LightGreen};
            [$context getState] Entry $context;

            return -code ok;
        }

        public method LightRed {context} {

            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "LEAVING STATE   : PauseMap2::Paused";
            }

            [$context getState] Exit $context;
            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "ENTER TRANSITION: PauseMap2::Paused LightRed()";
            }

            $context setState ${::tcl_ex4::PauseMap2::LightRed};
            [$context getState] Entry $context;

            return -code ok;
        }

        public method TripDone {context} {

            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "LEAVING STATE   : PauseMap2::Paused";
            }

            [$context getState] Exit $context;
            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "ENTER TRANSITION: PauseMap2::Paused TripDone()";
            }

            $context setState ${::tcl_ex4::PauseMap2::TripDone};
            [$context getState] Entry $context;

            return -code ok;
        }
    }

    class PauseMap2_KeepGoing {
        inherit PauseMap2_Default;

        constructor {name id} {
            PauseMap2_Default::constructor $name $id;
        } {}

        public method Continue {context} {

            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "LEAVING STATE   : PauseMap2::KeepGoing";
            }

            [$context getState] Exit $context;
            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "ENTER TRANSITION: PauseMap2::KeepGoing Continue()";
            }

            $context popState;

            $context KeepGoing;

            return -code ok;
        }
    }

    class PauseMap2_LightGreen {
        inherit PauseMap2_Default;

        constructor {name id} {
            PauseMap2_Default::constructor $name $id;
        } {}

        public method Continue {context} {

            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "LEAVING STATE   : PauseMap2::LightGreen";
            }

            [$context getState] Exit $context;
            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "ENTER TRANSITION: PauseMap2::LightGreen Continue()";
            }

            $context popState;

            $context LightGreen;

            return -code ok;
        }
    }

    class PauseMap2_LightRed {
        inherit PauseMap2_Default;

        constructor {name id} {
            PauseMap2_Default::constructor $name $id;
        } {}

        public method Continue {context} {

            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "LEAVING STATE   : PauseMap2::LightRed";
            }

            [$context getState] Exit $context;
            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "ENTER TRANSITION: PauseMap2::LightRed Continue()";
            }

            $context popState;

            $context LightRed;

            return -code ok;
        }
    }

    class PauseMap2_TripDone {
        inherit PauseMap2_Default;

        constructor {name id} {
            PauseMap2_Default::constructor $name $id;
        } {}

        public method Continue {context} {

            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "LEAVING STATE   : PauseMap2::TripDone";
            }

            [$context getState] Exit $context;
            if {[$context getDebugFlag] != 0} {
                puts [$context getDebugStream] "ENTER TRANSITION: PauseMap2::TripDone Continue()";
            }

            $context popState;

            $context TripDone;

            return -code ok;
        }
    }


    # Static state declarations.
    set VehicleMap::Stopped tcl_ex4::[VehicleMap_Stopped #auto "VehicleMap::Stopped" 0];
    set VehicleMap::Moving tcl_ex4::[VehicleMap_Moving #auto "VehicleMap::Moving" 1];
    set VehicleMap::AtLight tcl_ex4::[VehicleMap_AtLight #auto "VehicleMap::AtLight" 2];
    set VehicleMap::Done tcl_ex4::[VehicleMap_Done #auto "VehicleMap::Done" 3];
    set PauseMap2::Paused tcl_ex4::[PauseMap2_Paused #auto "PauseMap2::Paused" 4];
    set PauseMap2::KeepGoing tcl_ex4::[PauseMap2_KeepGoing #auto "PauseMap2::KeepGoing" 5];
    set PauseMap2::LightGreen tcl_ex4::[PauseMap2_LightGreen #auto "PauseMap2::LightGreen" 6];
    set PauseMap2::LightRed tcl_ex4::[PauseMap2_LightRed #auto "PauseMap2::LightRed" 7];
    set PauseMap2::TripDone tcl_ex4::[PauseMap2_TripDone #auto "PauseMap2::TripDone" 8];
}

# Local variables:
#  buffer-read-only: t
# End:
