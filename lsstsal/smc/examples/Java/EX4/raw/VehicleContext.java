/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : Vehicle.sm
 */


//
// The contents of this file are subject to the Mozilla Public
// License Version 1.1 (the "License"); you may not use this file
// except in compliance with the License. You may obtain a copy of
// the License at http://www.mozilla.org/MPL/
// 
// Software distributed under the License is distributed on an "AS
// IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
// implied. See the License for the specific language governing
// rights and limitations under the License.
// 
// The Original Code is State Machine Compiler (SMC).
// 
// The Initial Developer of the Original Code is Charles W. Rapp.
// Portions created by Charles W. Rapp are
// Copyright (C) 2000 - 2003 Charles W. Rapp.
// All Rights Reserved.
// 
// Contributor(s): 
//
// State Machine
// Vehicle
//
// Description
//  This state machine moves the vehicle along the road, obeying
//  the traffic light along the way.
//
// RCS ID
// $Id: Vehicle.sm,v 1.5 2005/05/28 13:51:24 cwrapp Exp $
//
// CHANGE LOG
// $Log: Vehicle.sm,v $
// Revision 1.5  2005/05/28 13:51:24  cwrapp
// Update Java examples 1 - 7.
//
// Revision 1.1  2004/05/31 13:42:16  charlesr
// Modified emacs comment.
//
// Revision 1.0  2003/12/14 20:05:05  charlesr
// Initial revision
//


package smc_ex4;


public class VehicleContext
    extends statemap.FSMContext
{
//---------------------------------------------------------------
// Member methods.
//

    public VehicleContext(Vehicle owner)
    {
        this (owner, VehicleMap.Stopped);
    }

    public VehicleContext(Vehicle owner, VehicleState initState)
    {
        super (initState);

        _owner = owner;
    }

    @Override
    public void enterStartState()
    {
        getState().entry(this);
        return;
    }

    public void Continue()
    {
        _transition = "Continue";
        getState().Continue(this);
        _transition = "";
        return;
    }

    public void LightGreen()
    {
        _transition = "LightGreen";
        getState().LightGreen(this);
        _transition = "";
        return;
    }

    public void Move()
    {
        _transition = "Move";
        getState().Move(this);
        _transition = "";
        return;
    }

    public void Pause()
    {
        _transition = "Pause";
        getState().Pause(this);
        _transition = "";
        return;
    }

    public void Start()
    {
        _transition = "Start";
        getState().Start(this);
        _transition = "";
        return;
    }

    public void Stop()
    {
        _transition = "Stop";
        getState().Stop(this);
        _transition = "";
        return;
    }

    public VehicleState getState()
        throws statemap.StateUndefinedException
    {
        if (_state == null)
        {
            throw(
                new statemap.StateUndefinedException());
        }

        return ((VehicleState) _state);
    }

    protected Vehicle getOwner()
    {
        return (_owner);
    }

    public void setOwner(Vehicle owner)
    {
        if (owner == null)
        {
            throw (
                new NullPointerException(
                    "null owner"));
        }
        else
        {
            _owner = owner;
        }

        return;
    }

//---------------------------------------------------------------
// Member data.
//

    transient private Vehicle _owner;

    //-----------------------------------------------------------
    // Constants.
    //

    private static final long serialVersionUID = 1L;

//---------------------------------------------------------------
// Inner classes.
//

    public static abstract class VehicleState
        extends statemap.State
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected VehicleState(String name, int id)
        {
            super (name, id);
        }

        protected void entry(VehicleContext context) {}
        protected void exit(VehicleContext context) {}

        protected void Continue(VehicleContext context)
        {
            Default(context);
        }

        protected void LightGreen(VehicleContext context)
        {
            Default(context);
        }

        protected void Move(VehicleContext context)
        {
            Default(context);
        }

        protected void Pause(VehicleContext context)
        {
            Default(context);
        }

        protected void Start(VehicleContext context)
        {
            Default(context);
        }

        protected void Stop(VehicleContext context)
        {
            Default(context);
        }

        protected void Default(VehicleContext context)
        {
            throw (
                new statemap.TransitionUndefinedException(
                    "State: " +
                    context.getState().getName() +
                    ", Transition: " +
                    context.getTransition()));
        }

    //-----------------------------------------------------------
    // Member data.
    //
    }

    /* package */ static abstract class VehicleMap
    {
    //-----------------------------------------------------------
    // Member methods.
    //

    //-----------------------------------------------------------
    // Member data.
    //

        //-------------------------------------------------------
        // Constants.
        //

        public static final VehicleMap_Stopped Stopped =
            new VehicleMap_Stopped("VehicleMap.Stopped", 0);
        public static final VehicleMap_Moving Moving =
            new VehicleMap_Moving("VehicleMap.Moving", 1);
        public static final VehicleMap_AtLight AtLight =
            new VehicleMap_AtLight("VehicleMap.AtLight", 2);
        public static final VehicleMap_Done Done =
            new VehicleMap_Done("VehicleMap.Done", 3);
    }

    protected static class VehicleMap_Default
        extends VehicleState
    {
    //-----------------------------------------------------------
    // Member methods.
    //

        protected VehicleMap_Default(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void Move(VehicleContext context)
        {

            return;
        }

        @Override
        protected void Start(VehicleContext context)
        {

            return;
        }

        @Override
        protected void Stop(VehicleContext context)
        {

            (context.getState()).exit(context);
            context.setState(VehicleMap.Stopped);
            (context.getState()).entry(context);
            return;
        }

    //-----------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class VehicleMap_Stopped
        extends VehicleMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private VehicleMap_Stopped(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void Continue(VehicleContext context)
        {

            return;
        }

        @Override
        protected void Move(VehicleContext context)
        {

            return;
        }

        @Override
        protected void Pause(VehicleContext context)
        {

            return;
        }

        @Override
        protected void Start(VehicleContext context)
        {

            (context.getState()).exit(context);
            context.setState(VehicleMap.Moving);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void Stop(VehicleContext context)
        {

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class VehicleMap_Moving
        extends VehicleMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private VehicleMap_Moving(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void Move(VehicleContext context)
        {
            Vehicle ctxt = context.getOwner();

            if (ctxt.getXPos() < ctxt.getMinX() ||
       ctxt.getXPos() > ctxt.getMaxX() ||
       ctxt.getYPos() < ctxt.getMinY() ||
       ctxt.getYPos() > ctxt.getMaxY())
            {
                (context.getState()).exit(context);
                context.clearState();
                try
                {
                    ctxt.EndTrip();
                }
                finally
                {
                    context.setState(VehicleMap.Done);
                    (context.getState()).entry(context);
                }

            }
            else if (ctxt.getLightsColor() != java.awt.Color.green &&
       ctxt.getDistanceToIntersection() >= 0 &&
       ctxt.getDistanceToIntersection() <= ctxt.getSpeed())
            {
                (context.getState()).exit(context);
                context.clearState();
                try
                {
                    ctxt.Advance();
                    ctxt.WatchLight();
                }
                finally
                {
                    context.setState(VehicleMap.AtLight);
                    (context.getState()).entry(context);
                }

            }
            else
            {
                VehicleState endState = context.getState();
                context.clearState();
                try
                {
                    ctxt.Advance();
                }
                finally
                {
                    context.setState(endState);
                }

            }

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class VehicleMap_AtLight
        extends VehicleMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private VehicleMap_AtLight(String name, int id)
        {
            super (name, id);
        }

        @Override
        protected void LightGreen(VehicleContext context)
        {

            (context.getState()).exit(context);
            context.setState(VehicleMap.Moving);
            (context.getState()).entry(context);
            return;
        }

        @Override
        protected void Move(VehicleContext context)
        {

            return;
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }

    private static final class VehicleMap_Done
        extends VehicleMap_Default
    {
    //-------------------------------------------------------
    // Member methods.
    //

        private VehicleMap_Done(String name, int id)
        {
            super (name, id);
        }

    //-------------------------------------------------------
    // Member data.
    //

        //---------------------------------------------------
        // Constants.
        //

        private static final long serialVersionUID = 1L;
    }
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
