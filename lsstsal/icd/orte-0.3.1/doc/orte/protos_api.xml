<refentry>
<refmeta>
<refentrytitle><phrase id="API-IPAddressToString">IPAddressToString</phrase></refentrytitle>
</refmeta>
<refnamediv>
 <refname>IPAddressToString</refname>
 <refpurpose>
   converts IP address IPAddress to its string representation
 </refpurpose>
</refnamediv>
<refsynopsisdiv>
 <title>Synopsis</title>
  <funcsynopsis><funcprototype>
   <funcdef>char* <function>IPAddressToString </function></funcdef>
   <paramdef>IPAddress <parameter>ipAddress</parameter></paramdef>
   <paramdef>char * <parameter>buff</parameter></paramdef>
  </funcprototype></funcsynopsis>
</refsynopsisdiv>
<refsect1>
 <title>Arguments</title>
 <variablelist>
  <varlistentry>
   <term><parameter>ipAddress</parameter></term>
   <listitem>
    <para>
      source IP address
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>buff</parameter></term>
   <listitem>
    <para>
      output buffer
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
</refsect1>
</refentry>

<refentry>
<refmeta>
<refentrytitle><phrase id="API-StringToIPAddress">StringToIPAddress</phrase></refentrytitle>
</refmeta>
<refnamediv>
 <refname>StringToIPAddress</refname>
 <refpurpose>
      converts IP address from string into IPAddress
 </refpurpose>
</refnamediv>
<refsynopsisdiv>
 <title>Synopsis</title>
  <funcsynopsis><funcprototype>
   <funcdef>IPAddress <function>StringToIPAddress </function></funcdef>
   <paramdef>const char * <parameter>string</parameter></paramdef>
  </funcprototype></funcsynopsis>
</refsynopsisdiv>
<refsect1>
 <title>Arguments</title>
 <variablelist>
  <varlistentry>
   <term><parameter>string</parameter></term>
   <listitem>
    <para>
      source string
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
</refsect1>
</refentry>

<refentry>
<refmeta>
<refentrytitle><phrase id="API-NtpTimeToStringMs">NtpTimeToStringMs</phrase></refentrytitle>
</refmeta>
<refnamediv>
 <refname>NtpTimeToStringMs</refname>
 <refpurpose>
      converts NtpTime to its text representation in miliseconds
 </refpurpose>
</refnamediv>
<refsynopsisdiv>
 <title>Synopsis</title>
  <funcsynopsis><funcprototype>
   <funcdef>char * <function>NtpTimeToStringMs </function></funcdef>
   <paramdef>NtpTime <parameter>time</parameter></paramdef>
   <paramdef>char * <parameter>buff</parameter></paramdef>
  </funcprototype></funcsynopsis>
</refsynopsisdiv>
<refsect1>
 <title>Arguments</title>
 <variablelist>
  <varlistentry>
   <term><parameter>time</parameter></term>
   <listitem>
    <para>
      time given in NtpTime structure
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>buff</parameter></term>
   <listitem>
    <para>
      output buffer
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
</refsect1>
</refentry>

<refentry>
<refmeta>
<refentrytitle><phrase id="API-NtpTimeToStringUs">NtpTimeToStringUs</phrase></refentrytitle>
</refmeta>
<refnamediv>
 <refname>NtpTimeToStringUs</refname>
 <refpurpose>
      converts NtpTime to its text representation in microseconds
 </refpurpose>
</refnamediv>
<refsynopsisdiv>
 <title>Synopsis</title>
  <funcsynopsis><funcprototype>
   <funcdef>char * <function>NtpTimeToStringUs </function></funcdef>
   <paramdef>NtpTime <parameter>time</parameter></paramdef>
   <paramdef>char * <parameter>buff</parameter></paramdef>
  </funcprototype></funcsynopsis>
</refsynopsisdiv>
<refsect1>
 <title>Arguments</title>
 <variablelist>
  <varlistentry>
   <term><parameter>time</parameter></term>
   <listitem>
    <para>
      time given in NtpTime structure
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>buff</parameter></term>
   <listitem>
    <para>
      output buffer
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
</refsect1>
</refentry>

<refentry>
<refmeta>
<refentrytitle><phrase id="API-ORTEDomainStart">ORTEDomainStart</phrase></refentrytitle>
</refmeta>
<refnamediv>
 <refname>ORTEDomainStart</refname>
 <refpurpose>
      start specific threads
 </refpurpose>
</refnamediv>
<refsynopsisdiv>
 <title>Synopsis</title>
  <funcsynopsis><funcprototype>
   <funcdef>void <function>ORTEDomainStart </function></funcdef>
   <paramdef>ORTEDomain * <parameter>d</parameter></paramdef>
   <paramdef>Boolean <parameter>recvUnicastMetatrafficThread</parameter></paramdef>
   <paramdef>Boolean <parameter>recvMulticastMetatrafficThread</parameter></paramdef>
   <paramdef>Boolean <parameter>recvUnicastUserdataThread</parameter></paramdef>
   <paramdef>Boolean <parameter>recvMulticastUserdataThread</parameter></paramdef>
   <paramdef>Boolean <parameter>sendThread</parameter></paramdef>
  </funcprototype></funcsynopsis>
</refsynopsisdiv>
<refsect1>
 <title>Arguments</title>
 <variablelist>
  <varlistentry>
   <term><parameter>d</parameter></term>
   <listitem>
    <para>
      domain object handle
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>recvUnicastMetatrafficThread</parameter></term>
   <listitem>
    <para>
      specifies whether recvUnicastMetatrafficThread should be started (ORTE_TRUE) or remain suspended (ORTE_FALSE).
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>recvMulticastMetatrafficThread</parameter></term>
   <listitem>
    <para>
      specifies whether recvMulticastMetatrafficThread should be started (ORTE_TRUE) or remain suspended (ORTE_FALSE).
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>recvUnicastUserdataThread</parameter></term>
   <listitem>
    <para>
      specifies whether recvUnicastUserdataThread should be started (ORTE_TRUE) or remain suspended (ORTE_FALSE).
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>recvMulticastUserdataThread</parameter></term>
   <listitem>
    <para>
      specifies whether recvMulticastUserdataThread should be started (ORTE_TRUE) or remain suspended (ORTE_FALSE).
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>sendThread</parameter></term>
   <listitem>
    <para>
      specifies whether sendThread should be started (ORTE_TRUE) or remain suspended (ORTE_FALSE).
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
</refsect1>
<refsect1>
 <title>Description</title>
 <para>
   Functions <parameter>ORTEDomainAppCreate</parameter> and <parameter>ORTEDomainMgrCreate</parameter> provide facility to create an object with its threads suspended. Use function <parameter>ORTEDomainStart</parameter> to resume those
   suspended threads.
 </para>
</refsect1>
</refentry>

<refentry>
<refmeta>
<refentrytitle><phrase id="API-ORTEDomainPropDefaultGet">ORTEDomainPropDefaultGet</phrase></refentrytitle>
</refmeta>
<refnamediv>
 <refname>ORTEDomainPropDefaultGet</refname>
 <refpurpose>
      returns default properties of a domain
 </refpurpose>
</refnamediv>
<refsynopsisdiv>
 <title>Synopsis</title>
  <funcsynopsis><funcprototype>
   <funcdef>Boolean <function>ORTEDomainPropDefaultGet </function></funcdef>
   <paramdef>ORTEDomainProp * <parameter>prop</parameter></paramdef>
  </funcprototype></funcsynopsis>
</refsynopsisdiv>
<refsect1>
 <title>Arguments</title>
 <variablelist>
  <varlistentry>
   <term><parameter>prop</parameter></term>
   <listitem>
    <para>
      pointer to struct ORTEDomainProp
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
</refsect1>
<refsect1>
 <title>Description</title>
 <para>
   Structure ORTEDomainProp referenced by <parameter>prop</parameter> will be filled by its default values. Returns ORTE_TRUE if successful or ORTE_FALSE in case of any error.
 </para>
</refsect1>
</refentry>

<refentry>
<refmeta>
<refentrytitle><phrase id="API-ORTEDomainInitEvents">ORTEDomainInitEvents</phrase></refentrytitle>
</refmeta>
<refnamediv>
 <refname>ORTEDomainInitEvents</refname>
 <refpurpose>
      initializes list of events
 </refpurpose>
</refnamediv>
<refsynopsisdiv>
 <title>Synopsis</title>
  <funcsynopsis><funcprototype>
   <funcdef>Boolean <function>ORTEDomainInitEvents </function></funcdef>
   <paramdef>ORTEDomainAppEvents * <parameter>events</parameter></paramdef>
  </funcprototype></funcsynopsis>
</refsynopsisdiv>
<refsect1>
 <title>Arguments</title>
 <variablelist>
  <varlistentry>
   <term><parameter>events</parameter></term>
   <listitem>
    <para>
      pointer to struct ORTEDomainAppEvents
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
</refsect1>
<refsect1>
 <title>Description</title>
 <para>
   Initializes structure pointed by <parameter>events</parameter>. Every member is set to NULL. Returns ORTE_TRUE if successful or ORTE_FALSE in case of any error.
 </para>
</refsect1>
</refentry>

<refentry>
<refmeta>
<refentrytitle><phrase id="API-ORTEDomainAppCreate">ORTEDomainAppCreate</phrase></refentrytitle>
</refmeta>
<refnamediv>
 <refname>ORTEDomainAppCreate</refname>
 <refpurpose>
      creates an application object within given domain
 </refpurpose>
</refnamediv>
<refsynopsisdiv>
 <title>Synopsis</title>
  <funcsynopsis><funcprototype>
   <funcdef>ORTEDomain * <function>ORTEDomainAppCreate </function></funcdef>
   <paramdef>int <parameter>domain</parameter></paramdef>
   <paramdef>ORTEDomainProp * <parameter>prop</parameter></paramdef>
   <paramdef>ORTEDomainAppEvents * <parameter>events</parameter></paramdef>
   <paramdef>Boolean <parameter>suspended</parameter></paramdef>
  </funcprototype></funcsynopsis>
</refsynopsisdiv>
<refsect1>
 <title>Arguments</title>
 <variablelist>
  <varlistentry>
   <term><parameter>domain</parameter></term>
   <listitem>
    <para>
      given domain
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>prop</parameter></term>
   <listitem>
    <para>
      properties of application
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>events</parameter></term>
   <listitem>
    <para>
      events associated with application or NULL 
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>suspended</parameter></term>
   <listitem>
    <para>
      specifies whether threads of this application should be started as well (ORTE_FALSE) or stay suspended (ORTE_TRUE). See <parameter>ORTEDomainStart</parameter> for details how to resume
     suspended threads
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
</refsect1>
<refsect1>
 <title>Description</title>
 <para>
   Creates new Application object and sets its properties and events. Return handle to created object or NULL in case of any error.
 </para>
</refsect1>
</refentry>

<refentry>
<refmeta>
<refentrytitle><phrase id="API-ORTEDomainAppDestroy">ORTEDomainAppDestroy</phrase></refentrytitle>
</refmeta>
<refnamediv>
 <refname>ORTEDomainAppDestroy</refname>
 <refpurpose>
      destroy Application object
 </refpurpose>
</refnamediv>
<refsynopsisdiv>
 <title>Synopsis</title>
  <funcsynopsis><funcprototype>
   <funcdef>Boolean <function>ORTEDomainAppDestroy </function></funcdef>
   <paramdef>ORTEDomain * <parameter>d</parameter></paramdef>
  </funcprototype></funcsynopsis>
</refsynopsisdiv>
<refsect1>
 <title>Arguments</title>
 <variablelist>
  <varlistentry>
   <term><parameter>d</parameter></term>
   <listitem>
    <para>
      domain
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
</refsect1>
<refsect1>
 <title>Description</title>
 <para>
   Destroys all application objects in specified domain. Returns ORTE_TRUE or ORTE_FALSE in case of any error.
 </para>
</refsect1>
</refentry>

<refentry>
<refmeta>
<refentrytitle><phrase id="API-ORTEDomainAppSubscriptionPatternAdd">ORTEDomainAppSubscriptionPatternAdd</phrase></refentrytitle>
</refmeta>
<refnamediv>
 <refname>ORTEDomainAppSubscriptionPatternAdd</refname>
 <refpurpose>
      create pattern-based subscription 
 </refpurpose>
</refnamediv>
<refsynopsisdiv>
 <title>Synopsis</title>
  <funcsynopsis><funcprototype>
   <funcdef>Boolean <function>ORTEDomainAppSubscriptionPatternAdd </function></funcdef>
   <paramdef>ORTEDomain * <parameter>d</parameter></paramdef>
   <paramdef>const char * <parameter>topic</parameter></paramdef>
   <paramdef>const char * <parameter>type</parameter></paramdef>
   <paramdef>ORTESubscriptionPatternCallBack <parameter>subscriptionCallBack</parameter></paramdef>
   <paramdef>void * <parameter>param</parameter></paramdef>
  </funcprototype></funcsynopsis>
</refsynopsisdiv>
<refsect1>
 <title>Arguments</title>
 <variablelist>
  <varlistentry>
   <term><parameter>d</parameter></term>
   <listitem>
    <para>
      domain object 
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>topic</parameter></term>
   <listitem>
    <para>
      pattern for topic
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>type</parameter></term>
   <listitem>
    <para>
      pattern for type 
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>subscriptionCallBack</parameter></term>
   <listitem>
    <para>
      pointer to callback function which will be called whenever any data are received through this subscription
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>param</parameter></term>
   <listitem>
    <para>
      user params for callback function
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
</refsect1>
<refsect1>
 <title>Description</title>
 <para>
   This function is intended to be used in application interesded in more published data from possibly more remote applications, which should be received through single 
   subscription. These different publications are specified by pattern given to <parameter>topic</parameter> and <parameter>type</parameter> parameters. 
   </para><para>

   For example suppose there are publications of topics like <parameter>temperatureEngine1</parameter>, <parameter>temperatureEngine2</parameter>, <parameter>temperatureEngine1Backup</parameter> and <parameter>temperatureEngine2Backup</parameter> 
   somewhere on our network. We can subscribe to each of Engine1 temperations by creating single subscription with pattern for topic set to <quote>temperatureEngine1*</quote>. 
   Or, if we are interested only in values from backup measurements, we can use pattern <quote>*Backup</quote>.
   </para><para>

   Syntax for patterns is the same as syntax for <parameter>fnmatch</parameter> function, which is employed for pattern recognition.  
   </para><para>

   Returns ORTE_TRUE if successful or ORTE_FALSE in case of any error.
 </para>
</refsect1>
</refentry>

<refentry>
<refmeta>
<refentrytitle><phrase id="API-ORTEDomainAppSubscriptionPatternRemove">ORTEDomainAppSubscriptionPatternRemove</phrase></refentrytitle>
</refmeta>
<refnamediv>
 <refname>ORTEDomainAppSubscriptionPatternRemove</refname>
 <refpurpose>
      remove subscription pattern
 </refpurpose>
</refnamediv>
<refsynopsisdiv>
 <title>Synopsis</title>
  <funcsynopsis><funcprototype>
   <funcdef>Boolean <function>ORTEDomainAppSubscriptionPatternRemove </function></funcdef>
   <paramdef>ORTEDomain * <parameter>d</parameter></paramdef>
   <paramdef>const char * <parameter>topic</parameter></paramdef>
   <paramdef>const char * <parameter>type</parameter></paramdef>
  </funcprototype></funcsynopsis>
</refsynopsisdiv>
<refsect1>
 <title>Arguments</title>
 <variablelist>
  <varlistentry>
   <term><parameter>d</parameter></term>
   <listitem>
    <para>
      domain handle
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>topic</parameter></term>
   <listitem>
    <para>
      pattern to be removed
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>type</parameter></term>
   <listitem>
    <para>
      pattern to be removed
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
</refsect1>
<refsect1>
 <title>Description</title>
 <para>
   Removes subscritions created by <parameter>ORTEDomainAppSubscriptionPatternAdd</parameter>. Patterns for <parameter>type</parameter> and <parameter>topic</parameter> must be exactly the same strings as when 
   <parameter>ORTEDomainAppSubscriptionPatternAdd</parameter> function was called.
   </para><para>

   Returns ORTE_TRUE if successful or ORTE_FALSE if none matching record was found
 </para>
</refsect1>
</refentry>

<refentry>
<refmeta>
<refentrytitle><phrase id="API-ORTEDomainAppSubscriptionPatternDestroy">ORTEDomainAppSubscriptionPatternDestroy</phrase></refentrytitle>
</refmeta>
<refnamediv>
 <refname>ORTEDomainAppSubscriptionPatternDestroy</refname>
 <refpurpose>
      destroys all subscription patterns
 </refpurpose>
</refnamediv>
<refsynopsisdiv>
 <title>Synopsis</title>
  <funcsynopsis><funcprototype>
   <funcdef>Boolean <function>ORTEDomainAppSubscriptionPatternDestroy </function></funcdef>
   <paramdef>ORTEDomain * <parameter>d</parameter></paramdef>
  </funcprototype></funcsynopsis>
</refsynopsisdiv>
<refsect1>
 <title>Arguments</title>
 <variablelist>
  <varlistentry>
   <term><parameter>d</parameter></term>
   <listitem>
    <para>
      domain handle
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
</refsect1>
<refsect1>
 <title>Description</title>
 <para>
   Destroys all subscription patterns which were specified previously by <parameter>ORTEDomainAppSubscriptionPatternAdd</parameter> function.
   </para><para>

   Returns ORTE_TRUE if successful or ORTE_FALSE in case of any error.
 </para>
</refsect1>
</refentry>

<refentry>
<refmeta>
<refentrytitle><phrase id="API-ORTEDomainMgrCreate">ORTEDomainMgrCreate</phrase></refentrytitle>
</refmeta>
<refnamediv>
 <refname>ORTEDomainMgrCreate</refname>
 <refpurpose>
      create manager object in given domain
 </refpurpose>
</refnamediv>
<refsynopsisdiv>
 <title>Synopsis</title>
  <funcsynopsis><funcprototype>
   <funcdef>ORTEDomain * <function>ORTEDomainMgrCreate </function></funcdef>
   <paramdef>int <parameter>domain</parameter></paramdef>
   <paramdef>ORTEDomainProp * <parameter>prop</parameter></paramdef>
   <paramdef>ORTEDomainAppEvents * <parameter>events</parameter></paramdef>
   <paramdef>Boolean <parameter>suspended</parameter></paramdef>
  </funcprototype></funcsynopsis>
</refsynopsisdiv>
<refsect1>
 <title>Arguments</title>
 <variablelist>
  <varlistentry>
   <term><parameter>domain</parameter></term>
   <listitem>
    <para>
      given domain
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>prop</parameter></term>
   <listitem>
    <para>
      desired manager's properties
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>events</parameter></term>
   <listitem>
    <para>
      manager's event handlers or NULL   
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>suspended</parameter></term>
   <listitem>
    <para>
      specifies whether threads of this manager should be started as well (ORTE_FALSE) or stay suspended (ORTE_TRUE). See <parameter>ORTEDomainStart</parameter> for details how to resume
     suspended threads 
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
</refsect1>
<refsect1>
 <title>Description</title>
 <para>
   Creates new manager object and sets its properties and events. Return handle to created object or NULL in case of any error.
 </para>
</refsect1>
</refentry>

<refentry>
<refmeta>
<refentrytitle><phrase id="API-ORTEDomainMgrDestroy">ORTEDomainMgrDestroy</phrase></refentrytitle>
</refmeta>
<refnamediv>
 <refname>ORTEDomainMgrDestroy</refname>
 <refpurpose>
      destroy manager object
 </refpurpose>
</refnamediv>
<refsynopsisdiv>
 <title>Synopsis</title>
  <funcsynopsis><funcprototype>
   <funcdef>Boolean <function>ORTEDomainMgrDestroy </function></funcdef>
   <paramdef>ORTEDomain * <parameter>d</parameter></paramdef>
  </funcprototype></funcsynopsis>
</refsynopsisdiv>
<refsect1>
 <title>Arguments</title>
 <variablelist>
  <varlistentry>
   <term><parameter>d</parameter></term>
   <listitem>
    <para>
      manager object to be destroyed
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
</refsect1>
<refsect1>
 <title>Description</title>
 <para>
   Returns ORTE_TRUE if successful or ORTE_FALSE in case of any error.
 </para>
</refsect1>
</refentry>

<refentry>
<refmeta>
<refentrytitle><phrase id="API-ORTEPublicationCreate">ORTEPublicationCreate</phrase></refentrytitle>
</refmeta>
<refnamediv>
 <refname>ORTEPublicationCreate</refname>
 <refpurpose>
      creates new publication
 </refpurpose>
</refnamediv>
<refsynopsisdiv>
 <title>Synopsis</title>
  <funcsynopsis><funcprototype>
   <funcdef>ORTEPublication * <function>ORTEPublicationCreate </function></funcdef>
   <paramdef>ORTEDomain * <parameter>d</parameter></paramdef>
   <paramdef>const char * <parameter>topic</parameter></paramdef>
   <paramdef>const char * <parameter>typeName</parameter></paramdef>
   <paramdef>void * <parameter>instance</parameter></paramdef>
   <paramdef>NtpTime * <parameter>persistence</parameter></paramdef>
   <paramdef>int <parameter>strength</parameter></paramdef>
   <paramdef>ORTESendCallBack <parameter>sendCallBack</parameter></paramdef>
   <paramdef>void * <parameter>sendCallBackParam</parameter></paramdef>
   <paramdef>NtpTime * <parameter>sendCallBackDelay</parameter></paramdef>
  </funcprototype></funcsynopsis>
</refsynopsisdiv>
<refsect1>
 <title>Arguments</title>
 <variablelist>
  <varlistentry>
   <term><parameter>d</parameter></term>
   <listitem>
    <para>
      pointer to application object 
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>topic</parameter></term>
   <listitem>
    <para>
      name of topic
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>typeName</parameter></term>
   <listitem>
    <para>
      data type description
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>instance</parameter></term>
   <listitem>
    <para>
      output buffer where application stores data for publication
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>persistence</parameter></term>
   <listitem>
    <para>
      persistence of publication
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>strength</parameter></term>
   <listitem>
    <para>
      strength of publication
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>sendCallBack</parameter></term>
   <listitem>
    <para>
      pointer to callback function 
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>sendCallBackParam</parameter></term>
   <listitem>
    <para>
      user parameters for callback function
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>sendCallBackDelay</parameter></term>
   <listitem>
    <para>
      periode for timer which issues callback function
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
</refsect1>
<refsect1>
 <title>Description</title>
 <para>
   Creates new publication object with specified parameters. The <parameter>sendCallBack</parameter> function is called periodically with <parameter>sendCallBackDelay</parameter> periode. In strict reliable mode the <parameter>sendCallBack</parameter>
   function will be called only if there is enough room in transmitting queue in order to prevent any data loss. The <parameter>sendCallBack</parameter> function should prepare data to be published by
   this publication and place them into <parameter>instance</parameter> buffer. 
   </para><para>

   Returns handle to publication object.
 </para>
</refsect1>
</refentry>

<refentry>
<refmeta>
<refentrytitle><phrase id="API-ORTEPublicationDestroy">ORTEPublicationDestroy</phrase></refentrytitle>
</refmeta>
<refnamediv>
 <refname>ORTEPublicationDestroy</refname>
 <refpurpose>
      removes a publication
 </refpurpose>
</refnamediv>
<refsynopsisdiv>
 <title>Synopsis</title>
  <funcsynopsis><funcprototype>
   <funcdef>int <function>ORTEPublicationDestroy </function></funcdef>
   <paramdef>ORTEPublication * <parameter>cstWriter</parameter></paramdef>
  </funcprototype></funcsynopsis>
</refsynopsisdiv>
<refsect1>
 <title>Arguments</title>
 <variablelist>
  <varlistentry>
   <term><parameter>cstWriter</parameter></term>
   <listitem>
    <para>
      handle to publication to be removed
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
</refsect1>
<refsect1>
 <title>Description</title>
 <para>
   Returns ORTE_OK if successful or ORTE_BAD_HANDLE if <parameter>cstWriter</parameter> is not valid cstWriter handle.
 </para>
</refsect1>
</refentry>

<refentry>
<refmeta>
<refentrytitle><phrase id="API-ORTEPublicationPropertiesGet">ORTEPublicationPropertiesGet</phrase></refentrytitle>
</refmeta>
<refnamediv>
 <refname>ORTEPublicationPropertiesGet</refname>
 <refpurpose>
      read properties of a publication
 </refpurpose>
</refnamediv>
<refsynopsisdiv>
 <title>Synopsis</title>
  <funcsynopsis><funcprototype>
   <funcdef> <function>ORTEPublicationPropertiesGet </function></funcdef>
   <paramdef>ORTEPublication * <parameter>cstWriter</parameter></paramdef>
   <paramdef>ORTEPublProp * <parameter>pp</parameter></paramdef>
  </funcprototype></funcsynopsis>
</refsynopsisdiv>
<refsect1>
 <title>Arguments</title>
 <variablelist>
  <varlistentry>
   <term><parameter>cstWriter</parameter></term>
   <listitem>
    <para>
      pointer to cstWriter object which provides this publication
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>pp</parameter></term>
   <listitem>
    <para>
      pointer to ORTEPublProp structure where values of publication's properties will be stored
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
</refsect1>
<refsect1>
 <title>Description</title>
 <para>
   Returns ORTE_OK if successful or ORTE_BAD_HANDLE if <parameter>cstWriter</parameter> is not valid cstWriter handle.
 </para>
</refsect1>
</refentry>

<refentry>
<refmeta>
<refentrytitle><phrase id="API-ORTEPublicationPropertiesSet">ORTEPublicationPropertiesSet</phrase></refentrytitle>
</refmeta>
<refnamediv>
 <refname>ORTEPublicationPropertiesSet</refname>
 <refpurpose>
      set properties of a publication
 </refpurpose>
</refnamediv>
<refsynopsisdiv>
 <title>Synopsis</title>
  <funcsynopsis><funcprototype>
   <funcdef>int <function>ORTEPublicationPropertiesSet </function></funcdef>
   <paramdef>ORTEPublication * <parameter>cstWriter</parameter></paramdef>
   <paramdef>ORTEPublProp * <parameter>pp</parameter></paramdef>
  </funcprototype></funcsynopsis>
</refsynopsisdiv>
<refsect1>
 <title>Arguments</title>
 <variablelist>
  <varlistentry>
   <term><parameter>cstWriter</parameter></term>
   <listitem>
    <para>
      pointer to cstWriter object which provides this publication
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>pp</parameter></term>
   <listitem>
    <para>
      pointer to ORTEPublProp structure containing values of publication's properties
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
</refsect1>
<refsect1>
 <title>Description</title>
 <para>
   Returns ORTE_OK if successful or ORTE_BAD_HANDLE if <parameter>cstWriter</parameter> is not valid publication handle.
 </para>
</refsect1>
</refentry>

<refentry>
<refmeta>
<refentrytitle><phrase id="API-ORTEPublicationGetStatus">ORTEPublicationGetStatus</phrase></refentrytitle>
</refmeta>
<refnamediv>
 <refname>ORTEPublicationGetStatus</refname>
 <refpurpose>
      removes a publication
 </refpurpose>
</refnamediv>
<refsynopsisdiv>
 <title>Synopsis</title>
  <funcsynopsis><funcprototype>
   <funcdef>int <function>ORTEPublicationGetStatus </function></funcdef>
   <paramdef>ORTEPublication * <parameter>cstWriter</parameter></paramdef>
   <paramdef>ORTEPublStatus * <parameter>status</parameter></paramdef>
  </funcprototype></funcsynopsis>
</refsynopsisdiv>
<refsect1>
 <title>Arguments</title>
 <variablelist>
  <varlistentry>
   <term><parameter>cstWriter</parameter></term>
   <listitem>
    <para>
      pointer to cstWriter object which provides this publication
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>status</parameter></term>
   <listitem>
    <para>
      pointer to ORTEPublStatus structure 
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
</refsect1>
<refsect1>
 <title>Description</title>
 <para>
   Returns ORTE_OK if successful or ORTE_BAD_HANDLE if <parameter>happ</parameter> is not valid publication handle.
 </para>
</refsect1>
</refentry>

<refentry>
<refmeta>
<refentrytitle><phrase id="API-ORTEPublicationSend">ORTEPublicationSend</phrase></refentrytitle>
</refmeta>
<refnamediv>
 <refname>ORTEPublicationSend</refname>
 <refpurpose>
      force publication object to issue new data
 </refpurpose>
</refnamediv>
<refsynopsisdiv>
 <title>Synopsis</title>
  <funcsynopsis><funcprototype>
   <funcdef>int <function>ORTEPublicationSend </function></funcdef>
   <paramdef>ORTEPublication * <parameter>cstWriter</parameter></paramdef>
  </funcprototype></funcsynopsis>
</refsynopsisdiv>
<refsect1>
 <title>Arguments</title>
 <variablelist>
  <varlistentry>
   <term><parameter>cstWriter</parameter></term>
   <listitem>
    <para>
      publication object
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
</refsect1>
<refsect1>
 <title>Description</title>
 <para>
   Returns ORTE_OK if successful.
 </para>
</refsect1>
</refentry>

<refentry>
<refmeta>
<refentrytitle><phrase id="API-ORTEPublicationSendEx">ORTEPublicationSendEx</phrase></refentrytitle>
</refmeta>
<refnamediv>
 <refname>ORTEPublicationSendEx</refname>
 <refpurpose>
      force publication object to issue new data with additional parameters
 </refpurpose>
</refnamediv>
<refsynopsisdiv>
 <title>Synopsis</title>
  <funcsynopsis><funcprototype>
   <funcdef>int <function>ORTEPublicationSendEx </function></funcdef>
   <paramdef>ORTEPublication * <parameter>cstWriter</parameter></paramdef>
   <paramdef>ORTEPublicationSendParam * <parameter>psp</parameter></paramdef>
  </funcprototype></funcsynopsis>
</refsynopsisdiv>
<refsect1>
 <title>Arguments</title>
 <variablelist>
  <varlistentry>
   <term><parameter>cstWriter</parameter></term>
   <listitem>
    <para>
      publication object
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>psp</parameter></term>
   <listitem>
    <para>
      publication parameters
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
</refsect1>
<refsect1>
 <title>Description</title>
 <para>
   Returns ORTE_OK if successful.
 </para>
</refsect1>
</refentry>

<refentry>
<refmeta>
<refentrytitle><phrase id="API-ORTEPublicationGetInstance">ORTEPublicationGetInstance</phrase></refentrytitle>
</refmeta>
<refnamediv>
 <refname>ORTEPublicationGetInstance</refname>
 <refpurpose>
      return pointer to an instance
 </refpurpose>
</refnamediv>
<refsynopsisdiv>
 <title>Synopsis</title>
  <funcsynopsis><funcprototype>
   <funcdef>void * <function>ORTEPublicationGetInstance </function></funcdef>
   <paramdef>ORTEPublication * <parameter>cstWriter</parameter></paramdef>
  </funcprototype></funcsynopsis>
</refsynopsisdiv>
<refsect1>
 <title>Arguments</title>
 <variablelist>
  <varlistentry>
   <term><parameter>cstWriter</parameter></term>
   <listitem>
    <para>
      publication object
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
</refsect1>
<refsect1>
 <title>Description</title>
 <para>
   Returns handle
 </para>
</refsect1>
</refentry>

<refentry>
<refmeta>
<refentrytitle><phrase id="API-ORTESubscriptionCreate">ORTESubscriptionCreate</phrase></refentrytitle>
</refmeta>
<refnamediv>
 <refname>ORTESubscriptionCreate</refname>
 <refpurpose>
      adds a new subscription
 </refpurpose>
</refnamediv>
<refsynopsisdiv>
 <title>Synopsis</title>
  <funcsynopsis><funcprototype>
   <funcdef>ORTESubscription * <function>ORTESubscriptionCreate </function></funcdef>
   <paramdef>ORTEDomain * <parameter>d</parameter></paramdef>
   <paramdef>SubscriptionMode <parameter>mode</parameter></paramdef>
   <paramdef>SubscriptionType <parameter>sType</parameter></paramdef>
   <paramdef>const char * <parameter>topic</parameter></paramdef>
   <paramdef>const char * <parameter>typeName</parameter></paramdef>
   <paramdef>void * <parameter>instance</parameter></paramdef>
   <paramdef>NtpTime * <parameter>deadline</parameter></paramdef>
   <paramdef>NtpTime * <parameter>minimumSeparation</parameter></paramdef>
   <paramdef>ORTERecvCallBack <parameter>recvCallBack</parameter></paramdef>
   <paramdef>void * <parameter>recvCallBackParam</parameter></paramdef>
   <paramdef>IPAddress <parameter>multicastIPAddress</parameter></paramdef>
  </funcprototype></funcsynopsis>
</refsynopsisdiv>
<refsect1>
 <title>Arguments</title>
 <variablelist>
  <varlistentry>
   <term><parameter>d</parameter></term>
   <listitem>
    <para>
      pointer to ORTEDomain object where this subscription will be created
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>mode</parameter></term>
   <listitem>
    <para>
      see enum SubscriptionMode
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>sType</parameter></term>
   <listitem>
    <para>
      see enum SubscriptionType
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>topic</parameter></term>
   <listitem>
    <para>
      name of topic
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>typeName</parameter></term>
   <listitem>
    <para>
      name of data type
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>instance</parameter></term>
   <listitem>
    <para>
      pointer to output buffer
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>deadline</parameter></term>
   <listitem>
    <para>
      deadline 
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>minimumSeparation</parameter></term>
   <listitem>
    <para>
      minimum time interval between two publications sent by Publisher as requested by Subscriber (strict - minumSep musi byt 0)
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>recvCallBack</parameter></term>
   <listitem>
    <para>
      callback function called when new Subscription has been received or if any change of subscription's status occures
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>recvCallBackParam</parameter></term>
   <listitem>
    <para>
      user parameters for <parameter>recvCallBack</parameter> 
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>multicastIPAddress</parameter></term>
   <listitem>
    <para>
      in case multicast subscripton specify multicast IP address or use IPADDRESS_INVALID to unicast communication
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
</refsect1>
<refsect1>
 <title>Description</title>
 <para>
   Returns handle to Subscription object.
 </para>
</refsect1>
</refentry>

<refentry>
<refmeta>
<refentrytitle><phrase id="API-ORTESubscriptionDestroy">ORTESubscriptionDestroy</phrase></refentrytitle>
</refmeta>
<refnamediv>
 <refname>ORTESubscriptionDestroy</refname>
 <refpurpose>
      removes a subscription
 </refpurpose>
</refnamediv>
<refsynopsisdiv>
 <title>Synopsis</title>
  <funcsynopsis><funcprototype>
   <funcdef>int <function>ORTESubscriptionDestroy </function></funcdef>
   <paramdef>ORTESubscription * <parameter>cstReader</parameter></paramdef>
  </funcprototype></funcsynopsis>
</refsynopsisdiv>
<refsect1>
 <title>Arguments</title>
 <variablelist>
  <varlistentry>
   <term><parameter>cstReader</parameter></term>
   <listitem>
    <para>
      handle to subscriotion to be removed
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
</refsect1>
<refsect1>
 <title>Description</title>
 <para>
   Returns ORTE_OK if successful or ORTE_BAD_HANDLE if <parameter>cstReader</parameter> is not valid subscription handle.
 </para>
</refsect1>
</refentry>

<refentry>
<refmeta>
<refentrytitle><phrase id="API-ORTESubscriptionPropertiesGet">ORTESubscriptionPropertiesGet</phrase></refentrytitle>
</refmeta>
<refnamediv>
 <refname>ORTESubscriptionPropertiesGet</refname>
 <refpurpose>
      get properties of a subscription
 </refpurpose>
</refnamediv>
<refsynopsisdiv>
 <title>Synopsis</title>
  <funcsynopsis><funcprototype>
   <funcdef>int <function>ORTESubscriptionPropertiesGet </function></funcdef>
   <paramdef>ORTESubscription * <parameter>cstReader</parameter></paramdef>
   <paramdef>ORTESubsProp * <parameter>sp</parameter></paramdef>
  </funcprototype></funcsynopsis>
</refsynopsisdiv>
<refsect1>
 <title>Arguments</title>
 <variablelist>
  <varlistentry>
   <term><parameter>cstReader</parameter></term>
   <listitem>
    <para>
      handle to publication
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>sp</parameter></term>
   <listitem>
    <para>
      pointer to ORTESubsProp structure where properties of subscrition will be stored 
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
</refsect1>
</refentry>

<refentry>
<refmeta>
<refentrytitle><phrase id="API-ORTESubscriptionPropertiesSet">ORTESubscriptionPropertiesSet</phrase></refentrytitle>
</refmeta>
<refnamediv>
 <refname>ORTESubscriptionPropertiesSet</refname>
 <refpurpose>
      set properties of a subscription
 </refpurpose>
</refnamediv>
<refsynopsisdiv>
 <title>Synopsis</title>
  <funcsynopsis><funcprototype>
   <funcdef>int <function>ORTESubscriptionPropertiesSet </function></funcdef>
   <paramdef>ORTESubscription * <parameter>cstReader</parameter></paramdef>
   <paramdef>ORTESubsProp * <parameter>sp</parameter></paramdef>
  </funcprototype></funcsynopsis>
</refsynopsisdiv>
<refsect1>
 <title>Arguments</title>
 <variablelist>
  <varlistentry>
   <term><parameter>cstReader</parameter></term>
   <listitem>
    <para>
      handle to publication
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>sp</parameter></term>
   <listitem>
    <para>
      pointer to ORTESubsProp structure containing desired properties of the subscription
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
</refsect1>
<refsect1>
 <title>Description</title>
 <para>
   Returns ORTE_OK if successful or ORTE_BAD_HANDLE if <parameter>cstReader</parameter> is not valid subscription handle. 
 </para>
</refsect1>
</refentry>

<refentry>
<refmeta>
<refentrytitle><phrase id="API-ORTESubscriptionWaitForPublications">ORTESubscriptionWaitForPublications</phrase></refentrytitle>
</refmeta>
<refnamediv>
 <refname>ORTESubscriptionWaitForPublications</refname>
 <refpurpose>
      waits for given number of publications
 </refpurpose>
</refnamediv>
<refsynopsisdiv>
 <title>Synopsis</title>
  <funcsynopsis><funcprototype>
   <funcdef>int <function>ORTESubscriptionWaitForPublications </function></funcdef>
   <paramdef>ORTESubscription * <parameter>cstReader</parameter></paramdef>
   <paramdef>NtpTime <parameter>wait</parameter></paramdef>
   <paramdef>unsigned int <parameter>retries</parameter></paramdef>
   <paramdef>unsigned int <parameter>noPublications</parameter></paramdef>
  </funcprototype></funcsynopsis>
</refsynopsisdiv>
<refsect1>
 <title>Arguments</title>
 <variablelist>
  <varlistentry>
   <term><parameter>cstReader</parameter></term>
   <listitem>
    <para>
      handle to subscription
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>wait</parameter></term>
   <listitem>
    <para>
      time how long to wait
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>retries</parameter></term>
   <listitem>
    <para>
      number of retries if specified number of publications was not reached
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>noPublications</parameter></term>
   <listitem>
    <para>
      desired number of publications
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
</refsect1>
<refsect1>
 <title>Description</title>
 <para>
   Returns ORTE_OK if successful or ORTE_BAD_HANDLE if <parameter>cstReader</parameter> is not valid subscription handle or ORTE_TIMEOUT if number of retries has been exhausted..
 </para>
</refsect1>
</refentry>

<refentry>
<refmeta>
<refentrytitle><phrase id="API-ORTESubscriptionGetStatus">ORTESubscriptionGetStatus</phrase></refentrytitle>
</refmeta>
<refnamediv>
 <refname>ORTESubscriptionGetStatus</refname>
 <refpurpose>
      get status of a subscription
 </refpurpose>
</refnamediv>
<refsynopsisdiv>
 <title>Synopsis</title>
  <funcsynopsis><funcprototype>
   <funcdef>int <function>ORTESubscriptionGetStatus </function></funcdef>
   <paramdef>ORTESubscription * <parameter>cstReader</parameter></paramdef>
   <paramdef>ORTESubsStatus * <parameter>status</parameter></paramdef>
  </funcprototype></funcsynopsis>
</refsynopsisdiv>
<refsect1>
 <title>Arguments</title>
 <variablelist>
  <varlistentry>
   <term><parameter>cstReader</parameter></term>
   <listitem>
    <para>
      handle to subscription
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>status</parameter></term>
   <listitem>
    <para>
      pointer to ORTESubsStatus structure
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
</refsect1>
<refsect1>
 <title>Description</title>
 <para>
   Returns ORTE_OK if successful or ORTE_BAD_HANDLE if <parameter>cstReader</parameter> is not valid subscription handle.
 </para>
</refsect1>
</refentry>

<refentry>
<refmeta>
<refentrytitle><phrase id="API-ORTESubscriptionPull">ORTESubscriptionPull</phrase></refentrytitle>
</refmeta>
<refnamediv>
 <refname>ORTESubscriptionPull</refname>
 <refpurpose>
      read data from receiving buffer
 </refpurpose>
</refnamediv>
<refsynopsisdiv>
 <title>Synopsis</title>
  <funcsynopsis><funcprototype>
   <funcdef>int <function>ORTESubscriptionPull </function></funcdef>
   <paramdef>ORTESubscription * <parameter>cstReader</parameter></paramdef>
  </funcprototype></funcsynopsis>
</refsynopsisdiv>
<refsect1>
 <title>Arguments</title>
 <variablelist>
  <varlistentry>
   <term><parameter>cstReader</parameter></term>
   <listitem>
    <para>
      handle to subscription
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
</refsect1>
<refsect1>
 <title>Description</title>
 <para>
   Returns ORTE_OK if successful or ORTE_BAD_HANDLE if <parameter>cstReader</parameter> is not valid subscription handle.
 </para>
</refsect1>
</refentry>

<refentry>
<refmeta>
<refentrytitle><phrase id="API-ORTESubscriptionGetInstance">ORTESubscriptionGetInstance</phrase></refentrytitle>
</refmeta>
<refnamediv>
 <refname>ORTESubscriptionGetInstance</refname>
 <refpurpose>
      return pointer to an instance
 </refpurpose>
</refnamediv>
<refsynopsisdiv>
 <title>Synopsis</title>
  <funcsynopsis><funcprototype>
   <funcdef>void * <function>ORTESubscriptionGetInstance </function></funcdef>
   <paramdef>ORTESubscription * <parameter>cstReader</parameter></paramdef>
  </funcprototype></funcsynopsis>
</refsynopsisdiv>
<refsect1>
 <title>Arguments</title>
 <variablelist>
  <varlistentry>
   <term><parameter>cstReader</parameter></term>
   <listitem>
    <para>
      publication object
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
</refsect1>
<refsect1>
 <title>Description</title>
 <para>
   Returns handle
 </para>
</refsect1>
</refentry>

<refentry>
<refmeta>
<refentrytitle><phrase id="API-ORTETypeRegisterAdd">ORTETypeRegisterAdd</phrase></refentrytitle>
</refmeta>
<refnamediv>
 <refname>ORTETypeRegisterAdd</refname>
 <refpurpose>
      register new data type
 </refpurpose>
</refnamediv>
<refsynopsisdiv>
 <title>Synopsis</title>
  <funcsynopsis><funcprototype>
   <funcdef>int <function>ORTETypeRegisterAdd </function></funcdef>
   <paramdef>ORTEDomain * <parameter>d</parameter></paramdef>
   <paramdef>const char * <parameter>typeName</parameter></paramdef>
   <paramdef>ORTETypeSerialize <parameter>ts</parameter></paramdef>
   <paramdef>ORTETypeDeserialize <parameter>ds</parameter></paramdef>
   <paramdef>ORTETypeGetMaxSize <parameter>gms</parameter></paramdef>
   <paramdef>unsigned int <parameter>ms</parameter></paramdef>
  </funcprototype></funcsynopsis>
</refsynopsisdiv>
<refsect1>
 <title>Arguments</title>
 <variablelist>
  <varlistentry>
   <term><parameter>d</parameter></term>
   <listitem>
    <para>
      domain object handle
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>typeName</parameter></term>
   <listitem>
    <para>
      name of data type
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>ts</parameter></term>
   <listitem>
    <para>
      pointer to serialization function. If NULL data will be copied without any processing.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>ds</parameter></term>
   <listitem>
    <para>
      deserialization function. If NULL data will be copied without any processing.
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>gms</parameter></term>
   <listitem>
    <para>
      pointer to a function given maximum length of data (in bytes)
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>ms</parameter></term>
   <listitem>
    <para>
      default maximal size
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
</refsect1>
<refsect1>
 <title>Description</title>
 <para>
   Each data type has to be registered. Main purpose of this process is to define serialization and deserialization functions for given data type. The same data type can be
   registered several times, previous registrations of the same type will be overwritten.
   </para><para>

   Examples of serialization and deserialization functions can be found if contrib/shape/ortedemo_types.c file.
   </para><para>

   Returns ORTE_OK if new data type has been succesfully registered.
 </para>
</refsect1>
</refentry>

<refentry>
<refmeta>
<refentrytitle><phrase id="API-ORTETypeRegisterDestroyAll">ORTETypeRegisterDestroyAll</phrase></refentrytitle>
</refmeta>
<refnamediv>
 <refname>ORTETypeRegisterDestroyAll</refname>
 <refpurpose>
      destroy all registered data types
 </refpurpose>
</refnamediv>
<refsynopsisdiv>
 <title>Synopsis</title>
  <funcsynopsis><funcprototype>
   <funcdef>int <function>ORTETypeRegisterDestroyAll </function></funcdef>
   <paramdef>ORTEDomain * <parameter>d</parameter></paramdef>
  </funcprototype></funcsynopsis>
</refsynopsisdiv>
<refsect1>
 <title>Arguments</title>
 <variablelist>
  <varlistentry>
   <term><parameter>d</parameter></term>
   <listitem>
    <para>
      domain object handle
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
</refsect1>
<refsect1>
 <title>Description</title>
 <para>
   Destroys all data types which were previously registered by function <parameter>ORTETypeRegisterAdd</parameter>.
   </para><para>

   Return ORTE_OK if all data types has been succesfully destroyed.
 </para>
</refsect1>
</refentry>

<refentry>
<refmeta>
<refentrytitle><phrase id="API-ORTEVerbositySetOptions">ORTEVerbositySetOptions</phrase></refentrytitle>
</refmeta>
<refnamediv>
 <refname>ORTEVerbositySetOptions</refname>
 <refpurpose>
      set verbosity options
 </refpurpose>
</refnamediv>
<refsynopsisdiv>
 <title>Synopsis</title>
  <funcsynopsis><funcprototype>
   <funcdef>void <function>ORTEVerbositySetOptions </function></funcdef>
   <paramdef>const char * <parameter>options</parameter></paramdef>
  </funcprototype></funcsynopsis>
</refsynopsisdiv>
<refsect1>
 <title>Arguments</title>
 <variablelist>
  <varlistentry>
   <term><parameter>options</parameter></term>
   <listitem>
    <para>
      verbosity options
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
</refsect1>
<refsect1>
 <title>Description</title>
 <para>
   There are 10 levels of verbosity ranging from 1 (lowest) to 10 (highest).
   It is possible to specify certain level of verbosity for each module of ORTE library. List of all supported modules can be found in  linorte/usedSections.txt file.
   Every module has been aasigned with a number as can be seen in usedSections.txt file.
 </para>
</refsect1>
<refsect1>
 <title>For instance</title>
 <para>
   options = <quote>ALL,7</quote>
   Verbosity will be set to level 7 for all modules.
   </para><para>

   options = <quote>51,7:32,5</quote>
   Modules 51 (RTPSCSTWrite.c) will use verbosity level 7 and module 32 (ORTEPublicationTimer.c) will use verbosity level 5.
   </para><para>

   Maximum number of modules and verbosity levels can be changed in order to save some memory space if small memory footprint is neccessary. These values are defined as macros 
   MAX_DEBUG_SECTIONS and MAX_DEBUG_LEVEL in file <parameter>include</parameter>/defines.h.
   </para><para>

   Return ORTE_OK if desired verbosity levels were successfuly set.
 </para>
</refsect1>
</refentry>

<refentry>
<refmeta>
<refentrytitle><phrase id="API-ORTEVerbositySetLogFile">ORTEVerbositySetLogFile</phrase></refentrytitle>
</refmeta>
<refnamediv>
 <refname>ORTEVerbositySetLogFile</refname>
 <refpurpose>
      set log file
 </refpurpose>
</refnamediv>
<refsynopsisdiv>
 <title>Synopsis</title>
  <funcsynopsis><funcprototype>
   <funcdef>void <function>ORTEVerbositySetLogFile </function></funcdef>
   <paramdef>const char * <parameter>logfile</parameter></paramdef>
  </funcprototype></funcsynopsis>
</refsynopsisdiv>
<refsect1>
 <title>Arguments</title>
 <variablelist>
  <varlistentry>
   <term><parameter>logfile</parameter></term>
   <listitem>
    <para>
      log file name
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
</refsect1>
<refsect1>
 <title>Description</title>
 <para>
   Sets output file where debug messages will be writen to. By default these messages are written to stdout.
 </para>
</refsect1>
</refentry>

<refentry>
<refmeta>
<refentrytitle><phrase id="API-ORTEInit">ORTEInit</phrase></refentrytitle>
</refmeta>
<refnamediv>
 <refname>ORTEInit</refname>
 <refpurpose>
      initialization of ORTE layer (musi se zavolat)
 </refpurpose>
</refnamediv>
<refsynopsisdiv>
 <title>Synopsis</title>
  <funcsynopsis><funcprototype>
   <funcdef>void <function>ORTEInit </function></funcdef>
   <paramdef> <parameter>void</parameter></paramdef>
  </funcprototype></funcsynopsis>
</refsynopsisdiv>
<refsect1>
 <title>Arguments</title>
 <variablelist>
  <varlistentry>
   <term><parameter>void</parameter></term>
   <listitem>
    <para>
     no arguments
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
</refsect1>
</refentry>

<refentry>
<refmeta>
<refentrytitle><phrase id="API-ORTESleepMs">ORTESleepMs</phrase></refentrytitle>
</refmeta>
<refnamediv>
 <refname>ORTESleepMs</refname>
 <refpurpose>
      suspends calling thread for given time
 </refpurpose>
</refnamediv>
<refsynopsisdiv>
 <title>Synopsis</title>
  <funcsynopsis><funcprototype>
   <funcdef>void <function>ORTESleepMs </function></funcdef>
   <paramdef>unsigned int <parameter>ms</parameter></paramdef>
  </funcprototype></funcsynopsis>
</refsynopsisdiv>
<refsect1>
 <title>Arguments</title>
 <variablelist>
  <varlistentry>
   <term><parameter>ms</parameter></term>
   <listitem>
    <para>
      miliseconds to sleep
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
</refsect1>
</refentry>

