//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: sal_hexapod.h
//  Source: sal_hexapod.idl
//  Generated: Thu Apr  2 10:00:08 2015
//  OpenSplice V6.4.140320OSS
//  
//******************************************************************
#ifndef _SAL_HEXAPOD_H_
#define _SAL_HEXAPOD_H_

#include "sacpp_mapping.h"
#include "sacpp_DDS_DCPS.h"


namespace hexapod
{
   struct Actuators;
   struct Application;
   struct Electrical;
   struct LimitSensors;
   struct Metrology;
   struct TC;
   struct command_configureAcceleration;
   struct command_configureLimits;
   struct command_configureLut;
   struct command_configurePosition;
   struct command_configureVelocity;
   struct command_move;
   struct command_offset;
   struct command_pivot;
   struct command_stop;
   struct command_test;
   struct logevent_error;
   struct logevent_interlock;
   struct logevent_limit;
   struct logevent_slewOK;
   struct logevent_temp;
   struct logevent_trackLost;
   struct logevent_tracking;
   struct command;
   struct ackcmd;
   struct logevent;

   struct Actuators
   {
         typedef DDS::Long _Raw_slice;
         typedef DDS::Long _Raw[18];
         typedef _Raw _Raw_out;
         static _Raw_slice * _Raw_alloc ();
         static void _Raw_free (_Raw_slice *);
         static void _Raw_copy (_Raw_slice* to, const _Raw_slice* from);
         static _Raw_slice *_Raw_dup (const _Raw_slice* from);

         struct _Raw_uniq_ {};
         typedef DDS_DCPS_FArray_var< _Raw, _Raw_slice, struct _Raw_uniq_> _Raw_var;
         typedef DDS_DCPS_Array_forany< _Raw, _Raw_slice, struct _Raw_uniq_> _Raw_forany;
         typedef DDS::Float _Calibrated_slice;
         typedef DDS::Float _Calibrated[18];
         typedef _Calibrated _Calibrated_out;
         static _Calibrated_slice * _Calibrated_alloc ();
         static void _Calibrated_free (_Calibrated_slice *);
         static void _Calibrated_copy (_Calibrated_slice* to, const _Calibrated_slice* from);
         static _Calibrated_slice *_Calibrated_dup (const _Calibrated_slice* from);

         struct _Calibrated_uniq_ {};
         typedef DDS_DCPS_FArray_var< _Calibrated, _Calibrated_slice, struct _Calibrated_uniq_> _Calibrated_var;
         typedef DDS_DCPS_Array_forany< _Calibrated, _Calibrated_slice, struct _Calibrated_uniq_> _Calibrated_forany;
         DDS::Short hexapodID;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         _Raw Raw;
         _Calibrated Calibrated;
   };

   typedef DDS_DCPSStruct_var < Actuators> Actuators_var;
   typedef DDS_DCPSStruct_out < Actuators> Actuators_out;

   struct Application
   {
         typedef DDS::Float _Demand_slice;
         typedef DDS::Float _Demand[6];
         typedef _Demand _Demand_out;
         static _Demand_slice * _Demand_alloc ();
         static void _Demand_free (_Demand_slice *);
         static void _Demand_copy (_Demand_slice* to, const _Demand_slice* from);
         static _Demand_slice *_Demand_dup (const _Demand_slice* from);

         struct _Demand_uniq_ {};
         typedef DDS_DCPS_FArray_var< _Demand, _Demand_slice, struct _Demand_uniq_> _Demand_var;
         typedef DDS_DCPS_Array_forany< _Demand, _Demand_slice, struct _Demand_uniq_> _Demand_forany;
         typedef DDS::Float _Position_slice;
         typedef DDS::Float _Position[6];
         typedef _Position _Position_out;
         static _Position_slice * _Position_alloc ();
         static void _Position_free (_Position_slice *);
         static void _Position_copy (_Position_slice* to, const _Position_slice* from);
         static _Position_slice *_Position_dup (const _Position_slice* from);

         struct _Position_uniq_ {};
         typedef DDS_DCPS_FArray_var< _Position, _Position_slice, struct _Position_uniq_> _Position_var;
         typedef DDS_DCPS_Array_forany< _Position, _Position_slice, struct _Position_uniq_> _Position_forany;
         typedef DDS::Float _Error_slice;
         typedef DDS::Float _Error[6];
         typedef _Error _Error_out;
         static _Error_slice * _Error_alloc ();
         static void _Error_free (_Error_slice *);
         static void _Error_copy (_Error_slice* to, const _Error_slice* from);
         static _Error_slice *_Error_dup (const _Error_slice* from);

         struct _Error_uniq_ {};
         typedef DDS_DCPS_FArray_var< _Error, _Error_slice, struct _Error_uniq_> _Error_var;
         typedef DDS_DCPS_Array_forany< _Error, _Error_slice, struct _Error_uniq_> _Error_forany;
         DDS::Short hexapodID;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         _Demand Demand;
         _Position Position;
         _Error Error;
   };

   typedef DDS_DCPSStruct_var < Application> Application_var;
   typedef DDS_DCPSStruct_out < Application> Application_out;

   struct Electrical
   {
         typedef DDS::Long _voltage_slice;
         typedef DDS::Long _voltage[16];
         typedef _voltage _voltage_out;
         static _voltage_slice * _voltage_alloc ();
         static void _voltage_free (_voltage_slice *);
         static void _voltage_copy (_voltage_slice* to, const _voltage_slice* from);
         static _voltage_slice *_voltage_dup (const _voltage_slice* from);

         struct _voltage_uniq_ {};
         typedef DDS_DCPS_FArray_var< _voltage, _voltage_slice, struct _voltage_uniq_> _voltage_var;
         typedef DDS_DCPS_Array_forany< _voltage, _voltage_slice, struct _voltage_uniq_> _voltage_forany;
         typedef DDS::Long _error_slice;
         typedef DDS::Long _error[16];
         typedef _error _error_out;
         static _error_slice * _error_alloc ();
         static void _error_free (_error_slice *);
         static void _error_copy (_error_slice* to, const _error_slice* from);
         static _error_slice *_error_dup (const _error_slice* from);

         struct _error_uniq_ {};
         typedef DDS_DCPS_FArray_var< _error, _error_slice, struct _error_uniq_> _error_var;
         typedef DDS_DCPS_Array_forany< _error, _error_slice, struct _error_uniq_> _error_forany;
         typedef DDS::Short _status_slice;
         typedef DDS::Short _status[16];
         typedef _status _status_out;
         static _status_slice * _status_alloc ();
         static void _status_free (_status_slice *);
         static void _status_copy (_status_slice* to, const _status_slice* from);
         static _status_slice *_status_dup (const _status_slice* from);

         struct _status_uniq_ {};
         typedef DDS_DCPS_FArray_var< _status, _status_slice, struct _status_uniq_> _status_var;
         typedef DDS_DCPS_Array_forany< _status, _status_slice, struct _status_uniq_> _status_forany;
         DDS::Short hexapodID;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         _voltage voltage;
         _error error;
         _status status;
   };

   typedef DDS_DCPSStruct_var < Electrical> Electrical_var;
   typedef DDS_DCPSStruct_out < Electrical> Electrical_out;

   struct LimitSensors
   {
         typedef DDS::Short _liftoff_slice;
         typedef DDS::Short _liftoff[18];
         typedef _liftoff _liftoff_out;
         static _liftoff_slice * _liftoff_alloc ();
         static void _liftoff_free (_liftoff_slice *);
         static void _liftoff_copy (_liftoff_slice* to, const _liftoff_slice* from);
         static _liftoff_slice *_liftoff_dup (const _liftoff_slice* from);

         struct _liftoff_uniq_ {};
         typedef DDS_DCPS_FArray_var< _liftoff, _liftoff_slice, struct _liftoff_uniq_> _liftoff_var;
         typedef DDS_DCPS_Array_forany< _liftoff, _liftoff_slice, struct _liftoff_uniq_> _liftoff_forany;
         typedef DDS::Short _limit_slice;
         typedef DDS::Short _limit[18];
         typedef _limit _limit_out;
         static _limit_slice * _limit_alloc ();
         static void _limit_free (_limit_slice *);
         static void _limit_copy (_limit_slice* to, const _limit_slice* from);
         static _limit_slice *_limit_dup (const _limit_slice* from);

         struct _limit_uniq_ {};
         typedef DDS_DCPS_FArray_var< _limit, _limit_slice, struct _limit_uniq_> _limit_var;
         typedef DDS_DCPS_Array_forany< _limit, _limit_slice, struct _limit_uniq_> _limit_forany;
         DDS::Short hexapodID;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         _liftoff liftoff;
         _limit limit;
   };

   typedef DDS_DCPSStruct_var < LimitSensors> LimitSensors_var;
   typedef DDS_DCPSStruct_out < LimitSensors> LimitSensors_out;

   struct Metrology
   {
         typedef DDS::Long _distance_slice;
         typedef DDS::Long _distance[18];
         typedef _distance _distance_out;
         static _distance_slice * _distance_alloc ();
         static void _distance_free (_distance_slice *);
         static void _distance_copy (_distance_slice* to, const _distance_slice* from);
         static _distance_slice *_distance_dup (const _distance_slice* from);

         struct _distance_uniq_ {};
         typedef DDS_DCPS_FArray_var< _distance, _distance_slice, struct _distance_uniq_> _distance_var;
         typedef DDS_DCPS_Array_forany< _distance, _distance_slice, struct _distance_uniq_> _distance_forany;
         typedef DDS::Long _error_slice;
         typedef DDS::Long _error[18];
         typedef _error _error_out;
         static _error_slice * _error_alloc ();
         static void _error_free (_error_slice *);
         static void _error_copy (_error_slice* to, const _error_slice* from);
         static _error_slice *_error_dup (const _error_slice* from);

         struct _error_uniq_ {};
         typedef DDS_DCPS_FArray_var< _error, _error_slice, struct _error_uniq_> _error_var;
         typedef DDS_DCPS_Array_forany< _error, _error_slice, struct _error_uniq_> _error_forany;
         typedef DDS::Short _status_slice;
         typedef DDS::Short _status[18];
         typedef _status _status_out;
         static _status_slice * _status_alloc ();
         static void _status_free (_status_slice *);
         static void _status_copy (_status_slice* to, const _status_slice* from);
         static _status_slice *_status_dup (const _status_slice* from);

         struct _status_uniq_ {};
         typedef DDS_DCPS_FArray_var< _status, _status_slice, struct _status_uniq_> _status_var;
         typedef DDS_DCPS_Array_forany< _status, _status_slice, struct _status_uniq_> _status_forany;
         DDS::Short hexapodID;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         _distance distance;
         _error error;
         _status status;
   };

   typedef DDS_DCPSStruct_var < Metrology> Metrology_var;
   typedef DDS_DCPSStruct_out < Metrology> Metrology_out;

   struct TC
   {
         typedef DDS::Float _setpoint_slice;
         typedef DDS::Float _setpoint[16];
         typedef _setpoint _setpoint_out;
         static _setpoint_slice * _setpoint_alloc ();
         static void _setpoint_free (_setpoint_slice *);
         static void _setpoint_copy (_setpoint_slice* to, const _setpoint_slice* from);
         static _setpoint_slice *_setpoint_dup (const _setpoint_slice* from);

         struct _setpoint_uniq_ {};
         typedef DDS_DCPS_FArray_var< _setpoint, _setpoint_slice, struct _setpoint_uniq_> _setpoint_var;
         typedef DDS_DCPS_Array_forany< _setpoint, _setpoint_slice, struct _setpoint_uniq_> _setpoint_forany;
         typedef DDS::Float _temperature_slice;
         typedef DDS::Float _temperature[16];
         typedef _temperature _temperature_out;
         static _temperature_slice * _temperature_alloc ();
         static void _temperature_free (_temperature_slice *);
         static void _temperature_copy (_temperature_slice* to, const _temperature_slice* from);
         static _temperature_slice *_temperature_dup (const _temperature_slice* from);

         struct _temperature_uniq_ {};
         typedef DDS_DCPS_FArray_var< _temperature, _temperature_slice, struct _temperature_uniq_> _temperature_var;
         typedef DDS_DCPS_Array_forany< _temperature, _temperature_slice, struct _temperature_uniq_> _temperature_forany;
         typedef DDS::Float _error_slice;
         typedef DDS::Float _error[16];
         typedef _error _error_out;
         static _error_slice * _error_alloc ();
         static void _error_free (_error_slice *);
         static void _error_copy (_error_slice* to, const _error_slice* from);
         static _error_slice *_error_dup (const _error_slice* from);

         struct _error_uniq_ {};
         typedef DDS_DCPS_FArray_var< _error, _error_slice, struct _error_uniq_> _error_var;
         typedef DDS_DCPS_Array_forany< _error, _error_slice, struct _error_uniq_> _error_forany;
         typedef DDS::Short _status_slice;
         typedef DDS::Short _status[16];
         typedef _status _status_out;
         static _status_slice * _status_alloc ();
         static void _status_free (_status_slice *);
         static void _status_copy (_status_slice* to, const _status_slice* from);
         static _status_slice *_status_dup (const _status_slice* from);

         struct _status_uniq_ {};
         typedef DDS_DCPS_FArray_var< _status, _status_slice, struct _status_uniq_> _status_var;
         typedef DDS_DCPS_Array_forany< _status, _status_slice, struct _status_uniq_> _status_forany;
         DDS::Short hexapodID;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         _setpoint setpoint;
         _temperature temperature;
         _error error;
         _status status;
   };

   typedef DDS_DCPSStruct_var < TC> TC_var;
   typedef DDS_DCPSStruct_out < TC> TC_out;

   struct command_configureAcceleration
   {
         DDS::Short hexapodID;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::String_mgr device;
         DDS::String_mgr property;
         DDS::String_mgr action;
         DDS::String_mgr value;
         DDS::Double xmin;
         DDS::Double xmax;
         DDS::Double ymin;
         DDS::Double ymax;
         DDS::Double zmin;
         DDS::Double zmax;
         DDS::Double umin;
         DDS::Double umax;
         DDS::Double vmin;
         DDS::Double vmax;
         DDS::Double wmin;
         DDS::Double wmax;
   };

   typedef DDS_DCPSStruct_var < command_configureAcceleration> command_configureAcceleration_var;
   typedef DDS_DCPSStruct_out < command_configureAcceleration> command_configureAcceleration_out;

   struct command_configureLimits
   {
         DDS::Short hexapodID;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::String_mgr device;
         DDS::String_mgr property;
         DDS::String_mgr action;
         DDS::String_mgr value;
         DDS::Long xmin;
         DDS::Long xmax;
         DDS::Long ymin;
         DDS::Long ymax;
         DDS::Long zmin;
         DDS::Long zmax;
         DDS::Long umin;
         DDS::Long umax;
         DDS::Long vmin;
         DDS::Long vmax;
         DDS::Long wmin;
         DDS::Long wmax;
   };

   typedef DDS_DCPSStruct_var < command_configureLimits> command_configureLimits_var;
   typedef DDS_DCPSStruct_out < command_configureLimits> command_configureLimits_out;

   struct command_configureLut
   {
         typedef DDS::Double _xlut_slice;
         typedef DDS::Double _xlut[90];
         typedef _xlut _xlut_out;
         static _xlut_slice * _xlut_alloc ();
         static void _xlut_free (_xlut_slice *);
         static void _xlut_copy (_xlut_slice* to, const _xlut_slice* from);
         static _xlut_slice *_xlut_dup (const _xlut_slice* from);

         struct _xlut_uniq_ {};
         typedef DDS_DCPS_FArray_var< _xlut, _xlut_slice, struct _xlut_uniq_> _xlut_var;
         typedef DDS_DCPS_Array_forany< _xlut, _xlut_slice, struct _xlut_uniq_> _xlut_forany;
         typedef DDS::Double _ylut_slice;
         typedef DDS::Double _ylut[90];
         typedef _ylut _ylut_out;
         static _ylut_slice * _ylut_alloc ();
         static void _ylut_free (_ylut_slice *);
         static void _ylut_copy (_ylut_slice* to, const _ylut_slice* from);
         static _ylut_slice *_ylut_dup (const _ylut_slice* from);

         struct _ylut_uniq_ {};
         typedef DDS_DCPS_FArray_var< _ylut, _ylut_slice, struct _ylut_uniq_> _ylut_var;
         typedef DDS_DCPS_Array_forany< _ylut, _ylut_slice, struct _ylut_uniq_> _ylut_forany;
         typedef DDS::Double _zlut_slice;
         typedef DDS::Double _zlut[90];
         typedef _zlut _zlut_out;
         static _zlut_slice * _zlut_alloc ();
         static void _zlut_free (_zlut_slice *);
         static void _zlut_copy (_zlut_slice* to, const _zlut_slice* from);
         static _zlut_slice *_zlut_dup (const _zlut_slice* from);

         struct _zlut_uniq_ {};
         typedef DDS_DCPS_FArray_var< _zlut, _zlut_slice, struct _zlut_uniq_> _zlut_var;
         typedef DDS_DCPS_Array_forany< _zlut, _zlut_slice, struct _zlut_uniq_> _zlut_forany;
         typedef DDS::Double _ulut_slice;
         typedef DDS::Double _ulut[90];
         typedef _ulut _ulut_out;
         static _ulut_slice * _ulut_alloc ();
         static void _ulut_free (_ulut_slice *);
         static void _ulut_copy (_ulut_slice* to, const _ulut_slice* from);
         static _ulut_slice *_ulut_dup (const _ulut_slice* from);

         struct _ulut_uniq_ {};
         typedef DDS_DCPS_FArray_var< _ulut, _ulut_slice, struct _ulut_uniq_> _ulut_var;
         typedef DDS_DCPS_Array_forany< _ulut, _ulut_slice, struct _ulut_uniq_> _ulut_forany;
         typedef DDS::Double _vlut_slice;
         typedef DDS::Double _vlut[90];
         typedef _vlut _vlut_out;
         static _vlut_slice * _vlut_alloc ();
         static void _vlut_free (_vlut_slice *);
         static void _vlut_copy (_vlut_slice* to, const _vlut_slice* from);
         static _vlut_slice *_vlut_dup (const _vlut_slice* from);

         struct _vlut_uniq_ {};
         typedef DDS_DCPS_FArray_var< _vlut, _vlut_slice, struct _vlut_uniq_> _vlut_var;
         typedef DDS_DCPS_Array_forany< _vlut, _vlut_slice, struct _vlut_uniq_> _vlut_forany;
         typedef DDS::Double _wlut_slice;
         typedef DDS::Double _wlut[90];
         typedef _wlut _wlut_out;
         static _wlut_slice * _wlut_alloc ();
         static void _wlut_free (_wlut_slice *);
         static void _wlut_copy (_wlut_slice* to, const _wlut_slice* from);
         static _wlut_slice *_wlut_dup (const _wlut_slice* from);

         struct _wlut_uniq_ {};
         typedef DDS_DCPS_FArray_var< _wlut, _wlut_slice, struct _wlut_uniq_> _wlut_var;
         typedef DDS_DCPS_Array_forany< _wlut, _wlut_slice, struct _wlut_uniq_> _wlut_forany;
         DDS::Short hexapodID;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::String_mgr device;
         DDS::String_mgr property;
         DDS::String_mgr action;
         DDS::String_mgr value;
         _xlut xlut;
         _ylut ylut;
         _zlut zlut;
         _ulut ulut;
         _vlut vlut;
         _wlut wlut;
   };

   typedef DDS_DCPSStruct_var < command_configureLut> command_configureLut_var;
   typedef DDS_DCPSStruct_out < command_configureLut> command_configureLut_out;

   struct command_configurePosition
   {
         DDS::Short hexapodID;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::String_mgr device;
         DDS::String_mgr property;
         DDS::String_mgr action;
         DDS::String_mgr value;
         DDS::Double x;
         DDS::Double y;
         DDS::Double z;
         DDS::Double u;
         DDS::Double v;
         DDS::Double w;
         DDS::Boolean sync;
   };

   typedef DDS_DCPSStruct_var < command_configurePosition> command_configurePosition_var;
   typedef DDS_DCPSStruct_out < command_configurePosition> command_configurePosition_out;

   struct command_configureVelocity
   {
         DDS::Short hexapodID;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::String_mgr device;
         DDS::String_mgr property;
         DDS::String_mgr action;
         DDS::String_mgr value;
         DDS::Double xmin;
         DDS::Double xmax;
         DDS::Double ymin;
         DDS::Double ymax;
         DDS::Double zmin;
         DDS::Double zmax;
         DDS::Double umin;
         DDS::Double umax;
         DDS::Double vmin;
         DDS::Double vmax;
         DDS::Double wmin;
         DDS::Double wmax;
   };

   typedef DDS_DCPSStruct_var < command_configureVelocity> command_configureVelocity_var;
   typedef DDS_DCPSStruct_out < command_configureVelocity> command_configureVelocity_out;

   struct command_move
   {
         DDS::Short hexapodID;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::String_mgr device;
         DDS::String_mgr property;
         DDS::String_mgr action;
         DDS::String_mgr value;
         DDS::Double angle;
   };

   typedef DDS_DCPSStruct_var < command_move> command_move_var;
   typedef DDS_DCPSStruct_out < command_move> command_move_out;

   struct command_offset
   {
         DDS::Short hexapodID;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::String_mgr device;
         DDS::String_mgr property;
         DDS::String_mgr action;
         DDS::String_mgr value;
         DDS::Double x;
         DDS::Double y;
         DDS::Double z;
         DDS::Double u;
         DDS::Double v;
         DDS::Double w;
         DDS::Boolean sync;
   };

   typedef DDS_DCPSStruct_var < command_offset> command_offset_var;
   typedef DDS_DCPSStruct_out < command_offset> command_offset_out;

   struct command_pivot
   {
         DDS::Short hexapodID;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::String_mgr device;
         DDS::String_mgr property;
         DDS::String_mgr action;
         DDS::String_mgr value;
         DDS::Double x;
         DDS::Double y;
         DDS::Double z;
   };

   typedef DDS_DCPSStruct_var < command_pivot> command_pivot_var;
   typedef DDS_DCPSStruct_out < command_pivot> command_pivot_out;

   struct command_stop
   {
         DDS::Short hexapodID;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::String_mgr device;
         DDS::String_mgr property;
         DDS::String_mgr action;
         DDS::String_mgr value;
   };

   typedef DDS_DCPSStruct_var < command_stop> command_stop_var;
   typedef DDS_DCPSStruct_out < command_stop> command_stop_out;

   struct command_test
   {
         DDS::Short hexapodID;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::String_mgr device;
         DDS::String_mgr property;
         DDS::String_mgr action;
         DDS::String_mgr value;
   };

   typedef DDS_DCPSStruct_var < command_test> command_test_var;
   typedef DDS_DCPSStruct_out < command_test> command_test_out;

   struct logevent_error
   {
         DDS::Short hexapodID;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::Long priority;
   };

   typedef DDS_DCPSStruct_var < logevent_error> logevent_error_var;
   typedef DDS_DCPSStruct_out < logevent_error> logevent_error_out;

   struct logevent_interlock
   {
         DDS::Short hexapodID;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::Long priority;
         DDS::String_mgr detail;
   };

   typedef DDS_DCPSStruct_var < logevent_interlock> logevent_interlock_var;
   typedef DDS_DCPSStruct_out < logevent_interlock> logevent_interlock_out;

   struct logevent_limit
   {
         DDS::Short hexapodID;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::Long priority;
         DDS::String_mgr axis;
         DDS::String_mgr limit;
         DDS::String_mgr type;
   };

   typedef DDS_DCPSStruct_var < logevent_limit> logevent_limit_var;
   typedef DDS_DCPSStruct_out < logevent_limit> logevent_limit_out;

   struct logevent_slewOK
   {
         DDS::Short hexapodID;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::Long priority;
   };

   typedef DDS_DCPSStruct_var < logevent_slewOK> logevent_slewOK_var;
   typedef DDS_DCPSStruct_out < logevent_slewOK> logevent_slewOK_out;

   struct logevent_temp
   {
         DDS::Short hexapodID;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::Long priority;
         DDS::String_mgr axis;
         DDS::String_mgr device;
         DDS::Long severity;
   };

   typedef DDS_DCPSStruct_var < logevent_temp> logevent_temp_var;
   typedef DDS_DCPSStruct_out < logevent_temp> logevent_temp_out;

   struct logevent_trackLost
   {
         DDS::Short hexapodID;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::Long priority;
   };

   typedef DDS_DCPSStruct_var < logevent_trackLost> logevent_trackLost_var;
   typedef DDS_DCPSStruct_out < logevent_trackLost> logevent_trackLost_out;

   struct logevent_tracking
   {
         DDS::Short hexapodID;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::Long priority;
   };

   typedef DDS_DCPSStruct_var < logevent_tracking> logevent_tracking_var;
   typedef DDS_DCPSStruct_out < logevent_tracking> logevent_tracking_out;

   struct command
   {
         DDS::Short hexapodID;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::Long private_seqNum;
         DDS::String_mgr device;
         DDS::String_mgr property;
         DDS::String_mgr action;
         DDS::String_mgr value;
         DDS::String_mgr modifiers;
   };

   typedef DDS_DCPSStruct_var < command> command_var;
   typedef DDS_DCPSStruct_out < command> command_out;

   struct ackcmd
   {
         DDS::Short hexapodID;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::Long private_seqNum;
         DDS::Long ack;
         DDS::Long error;
         DDS::String_mgr result;
   };

   typedef DDS_DCPSStruct_var < ackcmd> ackcmd_var;
   typedef DDS_DCPSStruct_out < ackcmd> ackcmd_out;

   struct logevent
   {
         DDS::Short hexapodID;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::String_mgr message;
   };

   typedef DDS_DCPSStruct_var < logevent> logevent_var;
   typedef DDS_DCPSStruct_out < logevent> logevent_out;
}
template <>
hexapod::Actuators::_Raw_slice* DDS_DCPS_ArrayHelper < hexapod::Actuators::_Raw, hexapod::Actuators::_Raw_slice, hexapod::Actuators::_Raw_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::Actuators::_Raw, hexapod::Actuators::_Raw_slice, hexapod::Actuators::_Raw_uniq_>::copy (hexapod::Actuators::_Raw_slice *to, const hexapod::Actuators::_Raw_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::Actuators::_Raw, hexapod::Actuators::_Raw_slice, hexapod::Actuators::_Raw_uniq_>::free (hexapod::Actuators::_Raw_slice *ptr);
template <>
hexapod::Actuators::_Calibrated_slice* DDS_DCPS_ArrayHelper < hexapod::Actuators::_Calibrated, hexapod::Actuators::_Calibrated_slice, hexapod::Actuators::_Calibrated_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::Actuators::_Calibrated, hexapod::Actuators::_Calibrated_slice, hexapod::Actuators::_Calibrated_uniq_>::copy (hexapod::Actuators::_Calibrated_slice *to, const hexapod::Actuators::_Calibrated_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::Actuators::_Calibrated, hexapod::Actuators::_Calibrated_slice, hexapod::Actuators::_Calibrated_uniq_>::free (hexapod::Actuators::_Calibrated_slice *ptr);
template <>
hexapod::Application::_Demand_slice* DDS_DCPS_ArrayHelper < hexapod::Application::_Demand, hexapod::Application::_Demand_slice, hexapod::Application::_Demand_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::Application::_Demand, hexapod::Application::_Demand_slice, hexapod::Application::_Demand_uniq_>::copy (hexapod::Application::_Demand_slice *to, const hexapod::Application::_Demand_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::Application::_Demand, hexapod::Application::_Demand_slice, hexapod::Application::_Demand_uniq_>::free (hexapod::Application::_Demand_slice *ptr);
template <>
hexapod::Application::_Position_slice* DDS_DCPS_ArrayHelper < hexapod::Application::_Position, hexapod::Application::_Position_slice, hexapod::Application::_Position_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::Application::_Position, hexapod::Application::_Position_slice, hexapod::Application::_Position_uniq_>::copy (hexapod::Application::_Position_slice *to, const hexapod::Application::_Position_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::Application::_Position, hexapod::Application::_Position_slice, hexapod::Application::_Position_uniq_>::free (hexapod::Application::_Position_slice *ptr);
template <>
hexapod::Application::_Error_slice* DDS_DCPS_ArrayHelper < hexapod::Application::_Error, hexapod::Application::_Error_slice, hexapod::Application::_Error_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::Application::_Error, hexapod::Application::_Error_slice, hexapod::Application::_Error_uniq_>::copy (hexapod::Application::_Error_slice *to, const hexapod::Application::_Error_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::Application::_Error, hexapod::Application::_Error_slice, hexapod::Application::_Error_uniq_>::free (hexapod::Application::_Error_slice *ptr);
template <>
hexapod::Electrical::_voltage_slice* DDS_DCPS_ArrayHelper < hexapod::Electrical::_voltage, hexapod::Electrical::_voltage_slice, hexapod::Electrical::_voltage_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::Electrical::_voltage, hexapod::Electrical::_voltage_slice, hexapod::Electrical::_voltage_uniq_>::copy (hexapod::Electrical::_voltage_slice *to, const hexapod::Electrical::_voltage_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::Electrical::_voltage, hexapod::Electrical::_voltage_slice, hexapod::Electrical::_voltage_uniq_>::free (hexapod::Electrical::_voltage_slice *ptr);
template <>
hexapod::Electrical::_error_slice* DDS_DCPS_ArrayHelper < hexapod::Electrical::_error, hexapod::Electrical::_error_slice, hexapod::Electrical::_error_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::Electrical::_error, hexapod::Electrical::_error_slice, hexapod::Electrical::_error_uniq_>::copy (hexapod::Electrical::_error_slice *to, const hexapod::Electrical::_error_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::Electrical::_error, hexapod::Electrical::_error_slice, hexapod::Electrical::_error_uniq_>::free (hexapod::Electrical::_error_slice *ptr);
template <>
hexapod::Electrical::_status_slice* DDS_DCPS_ArrayHelper < hexapod::Electrical::_status, hexapod::Electrical::_status_slice, hexapod::Electrical::_status_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::Electrical::_status, hexapod::Electrical::_status_slice, hexapod::Electrical::_status_uniq_>::copy (hexapod::Electrical::_status_slice *to, const hexapod::Electrical::_status_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::Electrical::_status, hexapod::Electrical::_status_slice, hexapod::Electrical::_status_uniq_>::free (hexapod::Electrical::_status_slice *ptr);
template <>
hexapod::LimitSensors::_liftoff_slice* DDS_DCPS_ArrayHelper < hexapod::LimitSensors::_liftoff, hexapod::LimitSensors::_liftoff_slice, hexapod::LimitSensors::_liftoff_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::LimitSensors::_liftoff, hexapod::LimitSensors::_liftoff_slice, hexapod::LimitSensors::_liftoff_uniq_>::copy (hexapod::LimitSensors::_liftoff_slice *to, const hexapod::LimitSensors::_liftoff_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::LimitSensors::_liftoff, hexapod::LimitSensors::_liftoff_slice, hexapod::LimitSensors::_liftoff_uniq_>::free (hexapod::LimitSensors::_liftoff_slice *ptr);
template <>
hexapod::LimitSensors::_limit_slice* DDS_DCPS_ArrayHelper < hexapod::LimitSensors::_limit, hexapod::LimitSensors::_limit_slice, hexapod::LimitSensors::_limit_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::LimitSensors::_limit, hexapod::LimitSensors::_limit_slice, hexapod::LimitSensors::_limit_uniq_>::copy (hexapod::LimitSensors::_limit_slice *to, const hexapod::LimitSensors::_limit_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::LimitSensors::_limit, hexapod::LimitSensors::_limit_slice, hexapod::LimitSensors::_limit_uniq_>::free (hexapod::LimitSensors::_limit_slice *ptr);
template <>
hexapod::Metrology::_distance_slice* DDS_DCPS_ArrayHelper < hexapod::Metrology::_distance, hexapod::Metrology::_distance_slice, hexapod::Metrology::_distance_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::Metrology::_distance, hexapod::Metrology::_distance_slice, hexapod::Metrology::_distance_uniq_>::copy (hexapod::Metrology::_distance_slice *to, const hexapod::Metrology::_distance_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::Metrology::_distance, hexapod::Metrology::_distance_slice, hexapod::Metrology::_distance_uniq_>::free (hexapod::Metrology::_distance_slice *ptr);
template <>
hexapod::Metrology::_error_slice* DDS_DCPS_ArrayHelper < hexapod::Metrology::_error, hexapod::Metrology::_error_slice, hexapod::Metrology::_error_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::Metrology::_error, hexapod::Metrology::_error_slice, hexapod::Metrology::_error_uniq_>::copy (hexapod::Metrology::_error_slice *to, const hexapod::Metrology::_error_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::Metrology::_error, hexapod::Metrology::_error_slice, hexapod::Metrology::_error_uniq_>::free (hexapod::Metrology::_error_slice *ptr);
template <>
hexapod::Metrology::_status_slice* DDS_DCPS_ArrayHelper < hexapod::Metrology::_status, hexapod::Metrology::_status_slice, hexapod::Metrology::_status_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::Metrology::_status, hexapod::Metrology::_status_slice, hexapod::Metrology::_status_uniq_>::copy (hexapod::Metrology::_status_slice *to, const hexapod::Metrology::_status_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::Metrology::_status, hexapod::Metrology::_status_slice, hexapod::Metrology::_status_uniq_>::free (hexapod::Metrology::_status_slice *ptr);
template <>
hexapod::TC::_setpoint_slice* DDS_DCPS_ArrayHelper < hexapod::TC::_setpoint, hexapod::TC::_setpoint_slice, hexapod::TC::_setpoint_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::TC::_setpoint, hexapod::TC::_setpoint_slice, hexapod::TC::_setpoint_uniq_>::copy (hexapod::TC::_setpoint_slice *to, const hexapod::TC::_setpoint_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::TC::_setpoint, hexapod::TC::_setpoint_slice, hexapod::TC::_setpoint_uniq_>::free (hexapod::TC::_setpoint_slice *ptr);
template <>
hexapod::TC::_temperature_slice* DDS_DCPS_ArrayHelper < hexapod::TC::_temperature, hexapod::TC::_temperature_slice, hexapod::TC::_temperature_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::TC::_temperature, hexapod::TC::_temperature_slice, hexapod::TC::_temperature_uniq_>::copy (hexapod::TC::_temperature_slice *to, const hexapod::TC::_temperature_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::TC::_temperature, hexapod::TC::_temperature_slice, hexapod::TC::_temperature_uniq_>::free (hexapod::TC::_temperature_slice *ptr);
template <>
hexapod::TC::_error_slice* DDS_DCPS_ArrayHelper < hexapod::TC::_error, hexapod::TC::_error_slice, hexapod::TC::_error_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::TC::_error, hexapod::TC::_error_slice, hexapod::TC::_error_uniq_>::copy (hexapod::TC::_error_slice *to, const hexapod::TC::_error_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::TC::_error, hexapod::TC::_error_slice, hexapod::TC::_error_uniq_>::free (hexapod::TC::_error_slice *ptr);
template <>
hexapod::TC::_status_slice* DDS_DCPS_ArrayHelper < hexapod::TC::_status, hexapod::TC::_status_slice, hexapod::TC::_status_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::TC::_status, hexapod::TC::_status_slice, hexapod::TC::_status_uniq_>::copy (hexapod::TC::_status_slice *to, const hexapod::TC::_status_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::TC::_status, hexapod::TC::_status_slice, hexapod::TC::_status_uniq_>::free (hexapod::TC::_status_slice *ptr);
template <>
hexapod::command_configureLut::_xlut_slice* DDS_DCPS_ArrayHelper < hexapod::command_configureLut::_xlut, hexapod::command_configureLut::_xlut_slice, hexapod::command_configureLut::_xlut_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureLut::_xlut, hexapod::command_configureLut::_xlut_slice, hexapod::command_configureLut::_xlut_uniq_>::copy (hexapod::command_configureLut::_xlut_slice *to, const hexapod::command_configureLut::_xlut_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureLut::_xlut, hexapod::command_configureLut::_xlut_slice, hexapod::command_configureLut::_xlut_uniq_>::free (hexapod::command_configureLut::_xlut_slice *ptr);
template <>
hexapod::command_configureLut::_ylut_slice* DDS_DCPS_ArrayHelper < hexapod::command_configureLut::_ylut, hexapod::command_configureLut::_ylut_slice, hexapod::command_configureLut::_ylut_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureLut::_ylut, hexapod::command_configureLut::_ylut_slice, hexapod::command_configureLut::_ylut_uniq_>::copy (hexapod::command_configureLut::_ylut_slice *to, const hexapod::command_configureLut::_ylut_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureLut::_ylut, hexapod::command_configureLut::_ylut_slice, hexapod::command_configureLut::_ylut_uniq_>::free (hexapod::command_configureLut::_ylut_slice *ptr);
template <>
hexapod::command_configureLut::_zlut_slice* DDS_DCPS_ArrayHelper < hexapod::command_configureLut::_zlut, hexapod::command_configureLut::_zlut_slice, hexapod::command_configureLut::_zlut_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureLut::_zlut, hexapod::command_configureLut::_zlut_slice, hexapod::command_configureLut::_zlut_uniq_>::copy (hexapod::command_configureLut::_zlut_slice *to, const hexapod::command_configureLut::_zlut_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureLut::_zlut, hexapod::command_configureLut::_zlut_slice, hexapod::command_configureLut::_zlut_uniq_>::free (hexapod::command_configureLut::_zlut_slice *ptr);
template <>
hexapod::command_configureLut::_ulut_slice* DDS_DCPS_ArrayHelper < hexapod::command_configureLut::_ulut, hexapod::command_configureLut::_ulut_slice, hexapod::command_configureLut::_ulut_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureLut::_ulut, hexapod::command_configureLut::_ulut_slice, hexapod::command_configureLut::_ulut_uniq_>::copy (hexapod::command_configureLut::_ulut_slice *to, const hexapod::command_configureLut::_ulut_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureLut::_ulut, hexapod::command_configureLut::_ulut_slice, hexapod::command_configureLut::_ulut_uniq_>::free (hexapod::command_configureLut::_ulut_slice *ptr);
template <>
hexapod::command_configureLut::_vlut_slice* DDS_DCPS_ArrayHelper < hexapod::command_configureLut::_vlut, hexapod::command_configureLut::_vlut_slice, hexapod::command_configureLut::_vlut_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureLut::_vlut, hexapod::command_configureLut::_vlut_slice, hexapod::command_configureLut::_vlut_uniq_>::copy (hexapod::command_configureLut::_vlut_slice *to, const hexapod::command_configureLut::_vlut_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureLut::_vlut, hexapod::command_configureLut::_vlut_slice, hexapod::command_configureLut::_vlut_uniq_>::free (hexapod::command_configureLut::_vlut_slice *ptr);
template <>
hexapod::command_configureLut::_wlut_slice* DDS_DCPS_ArrayHelper < hexapod::command_configureLut::_wlut, hexapod::command_configureLut::_wlut_slice, hexapod::command_configureLut::_wlut_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureLut::_wlut, hexapod::command_configureLut::_wlut_slice, hexapod::command_configureLut::_wlut_uniq_>::copy (hexapod::command_configureLut::_wlut_slice *to, const hexapod::command_configureLut::_wlut_slice* from);
template <>
void DDS_DCPS_ArrayHelper < hexapod::command_configureLut::_wlut, hexapod::command_configureLut::_wlut_slice, hexapod::command_configureLut::_wlut_uniq_>::free (hexapod::command_configureLut::_wlut_slice *ptr);




#endif 
