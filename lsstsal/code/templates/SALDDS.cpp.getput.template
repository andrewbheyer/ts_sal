

salReturn SAL_SALData::putSample(SALData::SALTopic data)
{
  DataWriter_var dwriter = getWriter();
  SALTopicDataWriter_var SALWriter = SALTopicDataWriter::_narrow(dwriter.in());
  data.private_revCode = DDS::string_dup("LSST TEST REVCODE");
  if (debugLevel > 0) {
    cout << "=== [putSample SALData::SALTopic] writing a message containing :" << endl;
    cout << "    revCode  : " << data.private_revCode << endl;
  }
  ReturnCode_t status = SALWriter->write(data, DDS::HANDLE_NIL);
  checkStatus(status, "SALTopicDataWriter::write");  
  return status;
}

salReturn SAL_SALData::getSample(SALData::SALTopicSeq data)
{
  SampleInfoSeq infoSeq;
  ReturnCode_t status =  - 1;
  DataReader_var dreader = getReader();
  SALTopicDataReader_var SALReader = SALTopicDataReader::_narrow(dreader.in());
  checkHandle(SALReader.in(), "SALTopicDataReader::_narrow");
  status = SALReader->take(data, infoSeq, LENGTH_UNLIMITED, ANY_SAMPLE_STATE, ANY_VIEW_STATE, ANY_INSTANCE_STATE);
  checkStatus(status, "SALTopicDataReader::take");
  for (DDS::ULong j = 0; j < data.length(); j++)
  {
    cout << "=== [GetSample SALData::SALTopic] message received :" << endl;
    cout << "    revCode  : " << data[j].private_revCode << endl;
  }
  status = SALReader->return_loan(data, infoSeq);
  checkStatus(status, "SALTopicDataReader::return_loan");
  return status;
}


