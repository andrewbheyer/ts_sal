#include <string>
#include <sstream>
#include <iostream>
#include "SAL_SALData.h"
#include "ccpp_SALData.h"
#include "os.h"
using namespace DDS;
using namespace SALData;
#include "SAL_defines.h"
#include "SALTopic_lv.h"
#include "SALTopic_cache.h"

SALTopic_cache *SALTopic_ref = NULL;

/* entry point exported and demangled so symbol can be found in shared library */

extern "C"
{
  OS_API_EXPORT
  int SALTopic_Daemon(int argc, char *argv[]);
}

SAL_SALData *mytlm;

void SALTopicListener_on_data_available(
    				void *listener_data,
    				DDS_DataReader reader)
{
    os_time delay_2ms = { 0, 2000000 };
    os_time delay_200ms = { 0, 200000000 };
    int i, status;
    SALTopicSeq SALInstance;

    status = mytlm->getSample(reader,SALInstance);     

    for (i = 0; i < SALInstance.length; ++i) {		
### INSERT TOSHM ITEMS
//         memcpy(SALTopicInstance[i].item, SALTopic_ref->item, sizeof(SALTopic_cache.item);
                SALTopic_ref->syncI++;
                os_nanoSleep(delay_200ms);
    }

}


int OSPL_MAIN (int argc, char *argv[])
{
   SAL_SALData mgr;
   int SALTopic_shmsize;
   int lshmid;
   int SALTopic_shmid = 0x10bf;
   SALTopic SALTopicInstance;

   // Connect to shared memory
   SALTopic_cache *SALTopic_ref;
   SALTopic_shmsize = sizeof(struct SALTopic_cache);
   lshmid = shmget(SALTopic_shmid, SALTopic_shmsize , IPC_CREAT|0666);
   SALTopic_ref  = (SALTopic_cache *) shmat(lshmid, NULL, 0);

  // Publish Events
  //create Topic
  mytlm->salInitialize();
  DataWriter_var dwriter = mytlm->salTelemetryPub("SALNAMESTRING");
  mytlm->salTelemetrySub("SALNAMESTRING");
  SAL_Listener = SALTopicListener_on_data_available;
  mytlm->salSubProcesser(SAL__DATA_AVAIL, SAL_Listener);

  while (1) {
      if (SALTopic_ref->syncO > 0) {
### INSERT FROMSHM ITEMS
//         memcpy(fromptr,SALTopicInstance.item, SALTopic_ref->item, sizeof(SALTopic_cache.item);
         mytlm->putSample(SALTopicInstance);
         SALTopic_ref->syncO = SALTopic_ref->syncO - 1;
         os_nanoSleep(delay_200ms);
      }
  }
}





