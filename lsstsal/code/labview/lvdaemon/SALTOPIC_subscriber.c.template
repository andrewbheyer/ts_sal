/* SALTOPIC_subscriber.c

   A subscription for SALTOPIC topics
       
modification history
------------ -------  

05-oct-09 GS - Open source version    
04-apr-10 GS - Non demon
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "dds_dcps.h"
#include "SALTOPIC.h"
#include "Pub_Daemon.h"

DDS_DomainParticipant sub_participant = NULL;
DDS_Subscriber subscriber = NULL;
struct DDS_DataReaderListener *reader_listener = NULL;
char *sub_type_name = NULL;
extern DDS_DomainParticipantFactory dpf;
    
/*
	This is the callback function when subscription messages arrive
*/


void SALTOPICListener_on_data_available(
    				void *listener_data,
    				DDS_DataReader reader)
{
    DDS_sequence_sal_SALTOPIC data_seq = { 0, 0, DDS_OBJECT_NIL, FALSE };
    DDS_SampleInfoSeq info_seq = { 0, 0, DDS_OBJECT_NIL, FALSE };
    DDS_ReturnCode_t retcode;
    int i;
    SALTOPIC_ipc_st lmsg;
    char tname[128];
    DDS_TopicDescription *salDesc;

    retcode = sal_SALTOPICDataReader_take(
        reader,
        &data_seq, &info_seq, DDS_LENGTH_UNLIMITED,
        DDS_ANY_SAMPLE_STATE, DDS_ANY_VIEW_STATE, DDS_ANY_INSTANCE_STATE);
    if (retcode == DDS_RETCODE_NO_DATA) {
        return;
    } else if (retcode != DDS_RETCODE_OK) {
        printf("take error %d\n", retcode);
        return;
    }
    
    salDesc = DDS_DataReader_get_topicdescription(reader);
    strcpy(tname, DDS_TopicDescription_get_name(salDesc));
    

    for (i = 0; i < data_seq._length; ++i) {		
        if (info_seq._buffer[i].valid_data) {		/* send to subscriber */
	
                memcpy(&lmsg, data_seq._buffer[i].msg, sizeof(SALTOPIC_ipc_st));
                SALTOPIC_subscribe_send(tname, &lmsg);  

        }
    }

    retcode = sal_SALTOPICDataReader_return_loan(
        		reader,
        		&data_seq, &info_seq);
    if (retcode != DDS_RETCODE_OK) {
        printf("return loan error %d\n", retcode);
    }
}

					/* Delete all entities */
int subscriber_shutdown(
    DDS_DomainParticipant *participant)
{
    DDS_ReturnCode_t retcode;
    int status = 0;

    if (participant != NULL) {
        retcode = DDS_DomainParticipant_delete_contained_entities(participant);
        if (retcode != DDS_RETCODE_OK) {
            printf("delete_contained_entities error %d\n", retcode);
            status = -1;
        }

        retcode = DDS_DomainParticipantFactory_delete_participant(
            DDS_TheParticipantFactory, participant);
        if (retcode != DDS_RETCODE_OK) {
            printf("delete_participant error %d\n", retcode);
            status = -1;
        }
    }


    return status;
}

int SALTOPIC_subscriber_main()
{
    DDS_ReturnCode_t retcode;
    DDS_DomainId_t domainId = NULL;
    sal_SALTOPICTypeSupport salSubMessageTS;


 			 /* Create participant  */
		
		
    sub_participant = DDS_DomainParticipantFactory_create_participant(
        dpf, domainId, DDS_PARTICIPANT_QOS_DEFAULT,
        NULL, DDS_ANY_STATUS);
    if (sub_participant == NULL) {
        subscriber_shutdown(sub_participant);
        return(-1);
    }

			/* Create subscriber  */
			
			
    subscriber = DDS_DomainParticipant_create_subscriber(
        sub_participant, DDS_SUBSCRIBER_QOS_DEFAULT, NULL,
        DDS_ANY_STATUS);
    if (subscriber == NULL) {
        subscriber_shutdown(sub_participant);
        return(-1);
    }

			    /* Register the type before creating the topic. 
			       The topic is created in the demon          */
			    
    salSubMessageTS = sal_SALTOPICTypeSupport__alloc();
    sub_type_name = sal_SALTOPICTypeSupport_get_type_name(salSubMessageTS);
    retcode = sal_SALTOPICTypeSupport_register_type(salSubMessageTS,
    	sub_participant, sub_type_name);
    if (retcode != DDS_RETCODE_OK) {
        subscriber_shutdown(sub_participant);
        return(-1);
    }

			    /* Set up a data reader listener */
			    
    reader_listener = DDS_DataReaderListener__alloc();
    reader_listener->listener_data = NULL;
    reader_listener->on_requested_deadline_missed  = NULL;
    reader_listener->on_requested_incompatible_qos = NULL;
    reader_listener->on_sample_rejected = NULL;
    reader_listener->on_liveliness_changed = NULL;
    reader_listener->on_sample_lost = NULL;
    reader_listener->on_subscription_matched = NULL;
    reader_listener->on_data_available =
        (void (*)(void *, DDS_DataReader)) SALTOPICListener_on_data_available;
    return(0);
}
