
/*
 * This file contains the implementation for the 'SALNAMESTRINGEFDSubscriber' executable.
 *
 ***/


#include <string>
#include <sstream>
#include <iostream>
#include <string.h>
#include <stdlib.h>
#include "SAL_SALData.h"
#include "ccpp_sal_SALData.h"
#include "os.h"
#include "mysql_connection.h"
#include <cppconn/driver.h>
#include <cppconn/exception.h>
#include <cppconn/statement.h>


#include "example_main.h"

using namespace std;
using namespace DDS;
using namespace SALData;

/* entry point exported and demangled so symbol can be found in shared library */
extern "C"
{
  OS_API_EXPORT
  int SALTelemetrySubscriber(int argc, char *argv[]);
}


int SALTelemetrySubscriber(char *topic_name)
{
  char *pass = getenv("SALData_SALTopic_PASS");

  os_time delay_2ms = { 0, 2000000 };
  os_time delay_200ms = { 0, 200000000 };
  SALNAMESTRINGC SALInstance;

  if ( pass == NULL ) {
     cout << "=== No EFD password for [SALData_SALTopic Subscriber]...giving up!" << endl;
     exit(1);   
  }

#ifdef SAL_SUBSYSTEM_ID_IS_KEYED
  int SALDataID = 1;
  SAL_SALData mgr = SAL_SALData(SALDataID);
#else
  SAL_SALData mgr = SAL_SALData();
#endif

  mgr.salTelemetrySub(topic_name);

  sql::Driver *driver;
  sql::Connection *con;
  driver = get_driver_instance();
  con = driver->connect("tcp://SALData_SALTopic.efd.lsst.org:3306", "efduser" , pass);
  sql::PreparedStatement *prep_stmt;
  
  cout << "=== [SALData_SALTopic Subscriber] Ready ..." << endl;

  ReturnCode_t status =  - 1;
  int count = 0;
// INSERT_SAL_EFDPREP
//  prep_stmt = con->prepareStatement($SQL_INSERT([set subsys]_[set topic]);"
  while (1)
  {
    status = mgr.getNextSample_SALTopic(&SALInstance);
    if (status == SAL__OK) {
// INSERT_SAL_EFDC
    }
    os_nanoSleep(delay_2ms);
    ++count;
    if (count > 1000) {
       if ( !con->isValid() ) {
          con->reconnect();
          cout << "=== [SALData_SALTopic Subscriber] Attempting reconnect ..." << endl;
          if (con->isValid() ) {set count 0}
       }
    }
  }

  os_nanoSleep(delay_2ms);

  //cleanup
  delete prep_stmt;
  delete con;
  mgr.salShutdown();

  return 0;
}

int OSPL_MAIN (int argc, char *argv[])
{
  return SALTelemetrySubscriber("SALNAMESTRING");
}


