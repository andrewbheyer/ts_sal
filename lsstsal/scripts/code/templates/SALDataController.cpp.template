
/*
 * This file contains the implementation for the 'SALDataController' executable.
 *
 ***/

// Control optional compilation 
#define USE_SAL_WRAPPER
#define USE_SAL_COMMAND

#include <string>
#include <sstream>
#include <iostream>
#include "SAL_SALData.h"
#include "ccpp_sal_SALData.h"
#include "os.h"

#include "example_main.h"

using namespace DDS;
using namespace SALData;

/* entry point exported and demangled so symbol can be found in shared library */
extern "C"
{
  OS_API_EXPORT
  int SALDataController(int timeout);
}


int SALDataController(int timeout)
{
  salReturn status = SAL__OK;
  int cmdId;

  os_time delay = { timeout, 0 };
  os_time delay_1s = { 1, 0 };

  // Initialize
#ifdef SAL_SUBSYSTEM_ID_IS_KEYED
  int SALDataID = 1;
  SAL_SALData cmd = SAL_SALData(SALDataID);
//  cmd.salInitialize(SALDataID);
#else
  SAL_SALData cmd = SAL_SALData();
//  cmd.salInitialize();
#endif

  cmd.salProcessor();

  SALData::commandSeq command; /* Example on Stack */
  while (1) {

     cmdId = cmd.acceptCommand(command);
     if (cmdId > 0) {
       if (timeout > 0) {
          cmd.ackCommand(cmdId, SAL__CMD_INPROGRESS, timeout, "Ack : OK");
          os_nanoSleep(delay);
       }       
       cmd.ackCommand(cmdId, SAL__CMD_COMPLETE, 0, "Done : OK");
     }
     os_nanoSleep(delay_1s);
  }

  /* Remove the DataWriters etc */
  cmd.salShutdown();

  return status;
}


int OSPL_MAIN (int argc, char *argv[])
{
  int timeout = 0;

  if (argc > 1) {
     sscanf(argv[1],"%d",&timeout);
  }
 
  return SALDataController (timeout);
}


