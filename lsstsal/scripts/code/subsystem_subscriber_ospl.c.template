 
/* subsystem_subscriber_ospl.c

        
       To run the example application on domain <domain_id>:
                          
       On Unix: 
       
       objs/<arch>/subsystem_publisher <domain_id> 
       objs/<arch>/subsystem_subscriber <domain_id> 
                            
       
modification history
------------ -------       
*/

#include <stdio.h>
#include <stdlib.h>
#include "dds_dcps.h"
###INSERT includes

###INSERT callbacks

###INSERT toshmem

###INSERT newdata

static char * read_partition  = "LSST";


static int subscriber_main(int domainId, int sample_count)
{
    DDS_ConditionSeq                        *conditionList;
    DDS_WaitSet                              w;
    DDS_Condition                            exp_condition;
    handler                                  *active_handler;

    DDS_DomainParticipantQos                 *dpQos;
    DDS_TopicQos                             *tQos;
    DDS_SubscriberQos                        *sQos;
    DDS_DataReaderQos                        *drQos;
    
    DDS_DomainParticipant *participant = NULL;
    DDS_Subscriber *subscriber = NULL;

###INSERT variables

    int count = 0;
    struct DDS_Duration_t poll_period = {0,1000000};

    svcSAL_initialize();

    /*
     * Create WaitSet
     */
    w     = DDS_WaitSet__alloc ();
    /*
     * Initialize Qos variables
     */
    dpQos = DDS_DomainParticipantQos__alloc();
    tQos  = DDS_TopicQos__alloc();
    sQos  = DDS_SubscriberQos__alloc();
    drQos = DDS_DataReaderQos__alloc();

    /*
     * Initialize condition list
     */
    conditionList = NULL;

    /*
     * Create participant
     */
    /* To customize participant QoS, use 
       DDS_DomainParticipantFactory_get_default_participant_qos() */
    dpf = DDS_DomainParticipantFactory_get_instance ();
    participant = DDS_DomainParticipantFactory_create_participant (dpf, domainId, DDS_PARTICIPANT_QOS_DEFAULT, NULL, DDS_ANY_STATUS);
    if (participant == DDS_HANDLE_NIL) {
        printf ("%s ERROR - Splice Daemon not running", argv[0]);
        exit (1);
    }

    /*
     * Create subscriber
     */
    DDS_DomainParticipant_get_default_subscriber_qos (participant, sQos);
    sQos->partition.name._length = 1;
    sQos->partition.name._maximum = 1;
    sQos->partition.name._buffer = DDS_StringSeq_allocbuf (1);
    sQos->partition.name._buffer[0] = DDS_string_alloc (strlen(read_partition) + 1);
    strcpy (sQos->partition.name._buffer[0], read_partition);
    s = DDS_DomainParticipant_create_subscriber (participant, sQos, NULL, DDS_ANY_STATUS);
    DDS_free (sQos);




###INSERT topics

    /* Main loop */
    for (count=0; (sample_count == 0) || (count < sample_count); ++count) {
        printf("Subscriber sleeping for %d sec...\n",
               poll_period.sec);
        SAL_sleep(10);
    }


    /* Cleanup and delete delete all entities */ 
    result = DDS_DomainParticipant_delete_subscriber (participant, s);

###INSERT finalize

    result = DDS_DomainParticipantFactory_delete_participant (dpf, participant);
    DDS_free (w);
    DDS_free (tQos);
    DDS_free (drQos);
}

int main(int argc, char *argv[])
{
    int domainId = 0;
    int sample_count = 0; /* infinite loop */

    if (argc >= 2) {
        domainId = atoi(argv[1]);
    }
    if (argc >= 3) {
        sample_count = atoi(argv[2]);
    }

    
    return subscriber_main(domainId, sample_count);
}


