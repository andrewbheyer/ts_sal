

salReturn SALData::putSample(SALData_SALTopicC *data)
{
  DataWriter_var dwriter = getWriter();
  SALData::SALTopicDataWriter_var SALWriter = SALData::SALTopicDataWriter::_narrow(dwriter
.in());
  SALData::SALTopic Instance;
  long iseq;

  Instance.private_revCode = DDS::string_dup("LSST TEST REVCODE");
  Instance.private_sndStamp = 1;
  Instance.private_origin = 1;
  Instance.private_seqNum = sndSeqNum;
  Instance.private_host = 1;

// INSERT_SAL_PUTC
//  for (iseq=0;iseq<18;iseq++) {
//        Instance.Raw[iseq] = data->Raw[iseq] ;
//        Instance.Calibrated[iseq] = data->Calibrated[iseq] ;
//  }

  sndSeqNum++;
  if (debugLevel > 0) {
    cout << "=== [putSample] SALData::SALTopic writing a message containing :" << endl;
    cout << "    revCode  : " << Instance.private_revCode << endl;
  }
#ifdef SAL_SUBSYSTEM_ID_IS_KEYED
   Instance.SALDataID = subsystemID;
   InstanceHandle_t dataHandle = SALWriter->register_instance(Instance);
#else
   InstanceHandle_t dataHandle = DDS::HANDLE_NIL;
#endif
  ReturnCode_t status = SALWriter->write(Instance, dataHandle);
  checkStatus(status, "SALData::SALTopicDataWriter::write");  
#ifdef SAL_SUBSYSTEM_ID_IS_KEYED
          SALWriter->unregister_instance(Instance, dataHandle);
#endif
  return status;
}

salReturn SALData::getSample(SALData_SALTopicC *data)
{
  SALData::SALTopicSeq Instances;
  SampleInfoSeq infoSeq;
  ReturnCode_t status =  - 1;
  salReturn istatus = -1;
  long iseq;

  DataReader_var dreader = getReader();
  SALData::SALTopicDataReader_var SALReader = SALData::SALTopicDataReader::_narrow(dreader
.in());
  checkHandle(SALReader.in(), "SALData::SALTopicDataReader::_narrow");
  status = SALReader->take(Instances, infoSeq, LENGTH_UNLIMITED, ANY_SAMPLE_STATE, ANY_VIEW_STATE, ANY_INSTANCE_STATE);
  checkStatus(status, "SALData::SALTopicDataReader::take");
  istatus = SAL__NO_UPDATES;
  for (DDS::ULong j = 0; j < Instances.length(); j++)
  {
    if (debugLevel > 0) {
      cout << "=== [GetSample] message received :" << endl;
      cout << "    revCode  : " << Instances[j].private_revCode << endl;
      cout << "    sndStamp  : " << Instances[j].private_sndStamp << endl;
      cout << "    origin  : " << Instances[j].private_origin << endl;
      cout << "    host  : " << Instances[j].private_host << endl;
    }

// INSERT_SAL_GETC
//    for (iseq=0;iseq<18;iseq++) {
//        data->Raw[iseq] = Instances[j].Raw[iseq];
//        data->Calibrated[iseq] = Instances[j].Calibrated[iseq];
//    }

    istatus = SAL__OK;
  }
  status = SALReader->return_loan(Instances, infoSeq);
  checkStatus(status, "SALData::SALTopicDataReader::return_loan");
  return istatus;
}



