//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : salLifecycle-cpp.sm
//

#ifndef SALLIFECYCLE-CPP_SM_H
#define SALLIFECYCLE-CPP_SM_H


#define SMC_USES_IOSTREAMS

#include <statemap.h>

// Forward declarations.
class MainMap;
class MainMap_Off;
class MainMap_STANDBY;
class MainMap_CONFIGURING;
class MainMap_DISABLED;
class MainMap_ENABLED;
class MainMap_ERROR;
class MainMap_Default;
class salLifecycleState;
class salLifecycle-cppContext;
class salLifecycle;

class salLifecycleState :
    public statemap::State
{
public:

    salLifecycleState(const char * const name, const int stateId)
    : statemap::State(name, stateId)
    {};

    virtual void Entry(salLifecycle-cppContext&) {};
    virtual void Exit(salLifecycle-cppContext&) {};

    virtual void configureError(salLifecycle-cppContext& context);
    virtual void disableError(salLifecycle-cppContext& context);
    virtual void enableError(salLifecycle-cppContext& context);
    virtual void ocsAbandon(salLifecycle-cppContext& context);
    virtual void ocsAbort(salLifecycle-cppContext& context);
    virtual void ocsBoot(salLifecycle-cppContext& context);
    virtual void ocsConfigure(salLifecycle-cppContext& context);
    virtual void ocsDisable(salLifecycle-cppContext& context);
    virtual void ocsEnable(salLifecycle-cppContext& context);
    virtual void ocsQuit(salLifecycle-cppContext& context);
    virtual void ocsReset(salLifecycle-cppContext& context);
    virtual void ocsSetValue(salLifecycle-cppContext& context);
    virtual void ocsStop(salLifecycle-cppContext& context);
    virtual void ocsUnConfigure(salLifecycle-cppContext& context);

protected:

    virtual void Default(salLifecycle-cppContext& context);
};

class MainMap
{
public:

    static MainMap_Off Off;
    static MainMap_STANDBY STANDBY;
    static MainMap_CONFIGURING CONFIGURING;
    static MainMap_DISABLED DISABLED;
    static MainMap_ENABLED ENABLED;
    static MainMap_ERROR ERROR;
};

class MainMap_Default :
    public salLifecycleState
{
public:

    MainMap_Default(const char * const name, const int stateId)
    : salLifecycleState(name, stateId)
    {};

};

class MainMap_Off :
    public MainMap_Default
{
public:
    MainMap_Off(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void ocsBoot(salLifecycle-cppContext& context);
};

class MainMap_STANDBY :
    public MainMap_Default
{
public:
    MainMap_STANDBY(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void ocsConfigure(salLifecycle-cppContext& context);
    virtual void ocsQuit(salLifecycle-cppContext& context);
};

class MainMap_CONFIGURING :
    public MainMap_Default
{
public:
    MainMap_CONFIGURING(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void configureError(salLifecycle-cppContext& context);
    virtual void ocsAbandon(salLifecycle-cppContext& context);
    virtual void ocsConfigure(salLifecycle-cppContext& context);
};

class MainMap_DISABLED :
    public MainMap_Default
{
public:
    MainMap_DISABLED(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void disableError(salLifecycle-cppContext& context);
    virtual void ocsEnable(salLifecycle-cppContext& context);
    virtual void ocsUnConfigure(salLifecycle-cppContext& context);
};

class MainMap_ENABLED :
    public MainMap_Default
{
public:
    MainMap_ENABLED(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void enableError(salLifecycle-cppContext& context);
    virtual void ocsAbort(salLifecycle-cppContext& context);
    virtual void ocsDisable(salLifecycle-cppContext& context);
    virtual void ocsEnable(salLifecycle-cppContext& context);
    virtual void ocsSetValue(salLifecycle-cppContext& context);
    virtual void ocsStop(salLifecycle-cppContext& context);
};

class MainMap_ERROR :
    public MainMap_Default
{
public:
    MainMap_ERROR(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void ocsReset(salLifecycle-cppContext& context);
};

class salLifecycle-cppContext :
    public statemap::FSMContext
{
public:

    explicit salLifecycle-cppContext(salLifecycle& owner)
    : FSMContext(MainMap::Off),
      _owner(&owner)
    {};

    salLifecycle-cppContext(salLifecycle& owner, const statemap::State& state)
    : FSMContext(state),
      _owner(&owner)
    {};

    virtual void enterStartState()
    {
        getState().Entry(*this);
    }

    inline salLifecycle& getOwner()
    {
        return *_owner;
    };

    inline salLifecycleState& getState()
    {
        if (_state == NULL)
        {
            throw statemap::StateUndefinedException();
        }

        return dynamic_cast<salLifecycleState&>(*_state);
    };

    inline void configureError()
    {
        getState().configureError(*this);
    };

    inline void disableError()
    {
        getState().disableError(*this);
    };

    inline void enableError()
    {
        getState().enableError(*this);
    };

    inline void ocsAbandon()
    {
        getState().ocsAbandon(*this);
    };

    inline void ocsAbort()
    {
        getState().ocsAbort(*this);
    };

    inline void ocsBoot()
    {
        getState().ocsBoot(*this);
    };

    inline void ocsConfigure()
    {
        getState().ocsConfigure(*this);
    };

    inline void ocsDisable()
    {
        getState().ocsDisable(*this);
    };

    inline void ocsEnable()
    {
        getState().ocsEnable(*this);
    };

    inline void ocsQuit()
    {
        getState().ocsQuit(*this);
    };

    inline void ocsReset()
    {
        getState().ocsReset(*this);
    };

    inline void ocsSetValue()
    {
        getState().ocsSetValue(*this);
    };

    inline void ocsStop()
    {
        getState().ocsStop(*this);
    };

    inline void ocsUnConfigure()
    {
        getState().ocsUnConfigure(*this);
    };

private:

    salLifecycle* _owner;
};


#endif // SALLIFECYCLE-CPP_SM_H

//
// Local variables:
//  buffer-read-only: t
// End:
//
