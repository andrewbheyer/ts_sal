//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: sal_mount.h
//  Source: sal_mount.idl
//  Generated: Tue Mar 31 09:07:30 2015
//  OpenSplice V6.4.140320OSS
//  
//******************************************************************
#ifndef _SAL_MOUNT_H_
#define _SAL_MOUNT_H_

#include "sacpp_mapping.h"
#include "sacpp_DDS_DCPS.h"


namespace mount
{
   struct Alt;
   struct Application;
   struct Az;
   struct Electrical;
   struct Metrology;
   struct Rotator;
   struct TC;
   struct command_configure;
   struct command_moveCamWrap;
   struct command_moveMirrorCover;
   struct command_moveToTarget;
   struct command_test;
   struct logevent_accLimit;
   struct logevent_altLimit;
   struct logevent_interlock;
   struct logevent_powerError;
   struct logevent_slewError;
   struct logevent_slewOK;
   struct logevent_slewReady;
   struct logevent_tempError;
   struct logevent_trackLost;
   struct logevent_tracking;
   struct logevent_velLimit;
   struct command;
   struct ackcmd;
   struct logevent;

   struct Alt
   {
         typedef DDS::Long _Raw_slice;
         typedef DDS::Long _Raw[16];
         typedef _Raw _Raw_out;
         static _Raw_slice * _Raw_alloc ();
         static void _Raw_free (_Raw_slice *);
         static void _Raw_copy (_Raw_slice* to, const _Raw_slice* from);
         static _Raw_slice *_Raw_dup (const _Raw_slice* from);

         struct _Raw_uniq_ {};
         typedef DDS_DCPS_FArray_var< _Raw, _Raw_slice, struct _Raw_uniq_> _Raw_var;
         typedef DDS_DCPS_Array_forany< _Raw, _Raw_slice, struct _Raw_uniq_> _Raw_forany;
         typedef DDS::Float _Calibrated_slice;
         typedef DDS::Float _Calibrated[32];
         typedef _Calibrated _Calibrated_out;
         static _Calibrated_slice * _Calibrated_alloc ();
         static void _Calibrated_free (_Calibrated_slice *);
         static void _Calibrated_copy (_Calibrated_slice* to, const _Calibrated_slice* from);
         static _Calibrated_slice *_Calibrated_dup (const _Calibrated_slice* from);

         struct _Calibrated_uniq_ {};
         typedef DDS_DCPS_FArray_var< _Calibrated, _Calibrated_slice, struct _Calibrated_uniq_> _Calibrated_var;
         typedef DDS_DCPS_Array_forany< _Calibrated, _Calibrated_slice, struct _Calibrated_uniq_> _Calibrated_forany;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         _Raw Raw;
         _Calibrated Calibrated;
   };

   typedef DDS_DCPSStruct_var < Alt> Alt_var;
   typedef DDS_DCPSStruct_out < Alt> Alt_out;

   struct Application
   {
         typedef DDS::Float _Demand_slice;
         typedef DDS::Float _Demand[4];
         typedef _Demand _Demand_out;
         static _Demand_slice * _Demand_alloc ();
         static void _Demand_free (_Demand_slice *);
         static void _Demand_copy (_Demand_slice* to, const _Demand_slice* from);
         static _Demand_slice *_Demand_dup (const _Demand_slice* from);

         struct _Demand_uniq_ {};
         typedef DDS_DCPS_FArray_var< _Demand, _Demand_slice, struct _Demand_uniq_> _Demand_var;
         typedef DDS_DCPS_Array_forany< _Demand, _Demand_slice, struct _Demand_uniq_> _Demand_forany;
         typedef DDS::Float _Position_slice;
         typedef DDS::Float _Position[4];
         typedef _Position _Position_out;
         static _Position_slice * _Position_alloc ();
         static void _Position_free (_Position_slice *);
         static void _Position_copy (_Position_slice* to, const _Position_slice* from);
         static _Position_slice *_Position_dup (const _Position_slice* from);

         struct _Position_uniq_ {};
         typedef DDS_DCPS_FArray_var< _Position, _Position_slice, struct _Position_uniq_> _Position_var;
         typedef DDS_DCPS_Array_forany< _Position, _Position_slice, struct _Position_uniq_> _Position_forany;
         typedef DDS::Float _Error_slice;
         typedef DDS::Float _Error[4];
         typedef _Error _Error_out;
         static _Error_slice * _Error_alloc ();
         static void _Error_free (_Error_slice *);
         static void _Error_copy (_Error_slice* to, const _Error_slice* from);
         static _Error_slice *_Error_dup (const _Error_slice* from);

         struct _Error_uniq_ {};
         typedef DDS_DCPS_FArray_var< _Error, _Error_slice, struct _Error_uniq_> _Error_var;
         typedef DDS_DCPS_Array_forany< _Error, _Error_slice, struct _Error_uniq_> _Error_forany;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         _Demand Demand;
         _Position Position;
         _Error Error;
         DDS::String_mgr Status;
   };

   typedef DDS_DCPSStruct_var < Application> Application_var;
   typedef DDS_DCPSStruct_out < Application> Application_out;

   struct Az
   {
         typedef DDS::Long _Raw_slice;
         typedef DDS::Long _Raw[16];
         typedef _Raw _Raw_out;
         static _Raw_slice * _Raw_alloc ();
         static void _Raw_free (_Raw_slice *);
         static void _Raw_copy (_Raw_slice* to, const _Raw_slice* from);
         static _Raw_slice *_Raw_dup (const _Raw_slice* from);

         struct _Raw_uniq_ {};
         typedef DDS_DCPS_FArray_var< _Raw, _Raw_slice, struct _Raw_uniq_> _Raw_var;
         typedef DDS_DCPS_Array_forany< _Raw, _Raw_slice, struct _Raw_uniq_> _Raw_forany;
         typedef DDS::Float _Calibrated_slice;
         typedef DDS::Float _Calibrated[32];
         typedef _Calibrated _Calibrated_out;
         static _Calibrated_slice * _Calibrated_alloc ();
         static void _Calibrated_free (_Calibrated_slice *);
         static void _Calibrated_copy (_Calibrated_slice* to, const _Calibrated_slice* from);
         static _Calibrated_slice *_Calibrated_dup (const _Calibrated_slice* from);

         struct _Calibrated_uniq_ {};
         typedef DDS_DCPS_FArray_var< _Calibrated, _Calibrated_slice, struct _Calibrated_uniq_> _Calibrated_var;
         typedef DDS_DCPS_Array_forany< _Calibrated, _Calibrated_slice, struct _Calibrated_uniq_> _Calibrated_forany;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         _Raw Raw;
         _Calibrated Calibrated;
   };

   typedef DDS_DCPSStruct_var < Az> Az_var;
   typedef DDS_DCPSStruct_out < Az> Az_out;

   struct Electrical
   {
         typedef DDS::Long _Raw_slice;
         typedef DDS::Long _Raw[16];
         typedef _Raw _Raw_out;
         static _Raw_slice * _Raw_alloc ();
         static void _Raw_free (_Raw_slice *);
         static void _Raw_copy (_Raw_slice* to, const _Raw_slice* from);
         static _Raw_slice *_Raw_dup (const _Raw_slice* from);

         struct _Raw_uniq_ {};
         typedef DDS_DCPS_FArray_var< _Raw, _Raw_slice, struct _Raw_uniq_> _Raw_var;
         typedef DDS_DCPS_Array_forany< _Raw, _Raw_slice, struct _Raw_uniq_> _Raw_forany;
         typedef DDS::Float _Calibrated_slice;
         typedef DDS::Float _Calibrated[32];
         typedef _Calibrated _Calibrated_out;
         static _Calibrated_slice * _Calibrated_alloc ();
         static void _Calibrated_free (_Calibrated_slice *);
         static void _Calibrated_copy (_Calibrated_slice* to, const _Calibrated_slice* from);
         static _Calibrated_slice *_Calibrated_dup (const _Calibrated_slice* from);

         struct _Calibrated_uniq_ {};
         typedef DDS_DCPS_FArray_var< _Calibrated, _Calibrated_slice, struct _Calibrated_uniq_> _Calibrated_var;
         typedef DDS_DCPS_Array_forany< _Calibrated, _Calibrated_slice, struct _Calibrated_uniq_> _Calibrated_forany;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         _Raw Raw;
         _Calibrated Calibrated;
   };

   typedef DDS_DCPSStruct_var < Electrical> Electrical_var;
   typedef DDS_DCPSStruct_out < Electrical> Electrical_out;

   struct Metrology
   {
         typedef DDS::Long _Raw_slice;
         typedef DDS::Long _Raw[16];
         typedef _Raw _Raw_out;
         static _Raw_slice * _Raw_alloc ();
         static void _Raw_free (_Raw_slice *);
         static void _Raw_copy (_Raw_slice* to, const _Raw_slice* from);
         static _Raw_slice *_Raw_dup (const _Raw_slice* from);

         struct _Raw_uniq_ {};
         typedef DDS_DCPS_FArray_var< _Raw, _Raw_slice, struct _Raw_uniq_> _Raw_var;
         typedef DDS_DCPS_Array_forany< _Raw, _Raw_slice, struct _Raw_uniq_> _Raw_forany;
         typedef DDS::Float _Calibrated_slice;
         typedef DDS::Float _Calibrated[16];
         typedef _Calibrated _Calibrated_out;
         static _Calibrated_slice * _Calibrated_alloc ();
         static void _Calibrated_free (_Calibrated_slice *);
         static void _Calibrated_copy (_Calibrated_slice* to, const _Calibrated_slice* from);
         static _Calibrated_slice *_Calibrated_dup (const _Calibrated_slice* from);

         struct _Calibrated_uniq_ {};
         typedef DDS_DCPS_FArray_var< _Calibrated, _Calibrated_slice, struct _Calibrated_uniq_> _Calibrated_var;
         typedef DDS_DCPS_Array_forany< _Calibrated, _Calibrated_slice, struct _Calibrated_uniq_> _Calibrated_forany;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         _Raw Raw;
         _Calibrated Calibrated;
   };

   typedef DDS_DCPSStruct_var < Metrology> Metrology_var;
   typedef DDS_DCPSStruct_out < Metrology> Metrology_out;

   struct Rotator
   {
         typedef DDS::Long _Raw_slice;
         typedef DDS::Long _Raw[16];
         typedef _Raw _Raw_out;
         static _Raw_slice * _Raw_alloc ();
         static void _Raw_free (_Raw_slice *);
         static void _Raw_copy (_Raw_slice* to, const _Raw_slice* from);
         static _Raw_slice *_Raw_dup (const _Raw_slice* from);

         struct _Raw_uniq_ {};
         typedef DDS_DCPS_FArray_var< _Raw, _Raw_slice, struct _Raw_uniq_> _Raw_var;
         typedef DDS_DCPS_Array_forany< _Raw, _Raw_slice, struct _Raw_uniq_> _Raw_forany;
         typedef DDS::Float _Calibrated_slice;
         typedef DDS::Float _Calibrated[32];
         typedef _Calibrated _Calibrated_out;
         static _Calibrated_slice * _Calibrated_alloc ();
         static void _Calibrated_free (_Calibrated_slice *);
         static void _Calibrated_copy (_Calibrated_slice* to, const _Calibrated_slice* from);
         static _Calibrated_slice *_Calibrated_dup (const _Calibrated_slice* from);

         struct _Calibrated_uniq_ {};
         typedef DDS_DCPS_FArray_var< _Calibrated, _Calibrated_slice, struct _Calibrated_uniq_> _Calibrated_var;
         typedef DDS_DCPS_Array_forany< _Calibrated, _Calibrated_slice, struct _Calibrated_uniq_> _Calibrated_forany;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         _Raw Raw;
         _Calibrated Calibrated;
   };

   typedef DDS_DCPSStruct_var < Rotator> Rotator_var;
   typedef DDS_DCPSStruct_out < Rotator> Rotator_out;

   struct TC
   {
         typedef DDS::Long _Raw_slice;
         typedef DDS::Long _Raw[16];
         typedef _Raw _Raw_out;
         static _Raw_slice * _Raw_alloc ();
         static void _Raw_free (_Raw_slice *);
         static void _Raw_copy (_Raw_slice* to, const _Raw_slice* from);
         static _Raw_slice *_Raw_dup (const _Raw_slice* from);

         struct _Raw_uniq_ {};
         typedef DDS_DCPS_FArray_var< _Raw, _Raw_slice, struct _Raw_uniq_> _Raw_var;
         typedef DDS_DCPS_Array_forany< _Raw, _Raw_slice, struct _Raw_uniq_> _Raw_forany;
         typedef DDS::Float _Calibrated_slice;
         typedef DDS::Float _Calibrated[16];
         typedef _Calibrated _Calibrated_out;
         static _Calibrated_slice * _Calibrated_alloc ();
         static void _Calibrated_free (_Calibrated_slice *);
         static void _Calibrated_copy (_Calibrated_slice* to, const _Calibrated_slice* from);
         static _Calibrated_slice *_Calibrated_dup (const _Calibrated_slice* from);

         struct _Calibrated_uniq_ {};
         typedef DDS_DCPS_FArray_var< _Calibrated, _Calibrated_slice, struct _Calibrated_uniq_> _Calibrated_var;
         typedef DDS_DCPS_Array_forany< _Calibrated, _Calibrated_slice, struct _Calibrated_uniq_> _Calibrated_forany;
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         _Raw Raw;
         _Calibrated Calibrated;
   };

   typedef DDS_DCPSStruct_var < TC> TC_var;
   typedef DDS_DCPSStruct_out < TC> TC_out;

   struct command_configure
   {
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::String_mgr device;
         DDS::String_mgr property;
         DDS::String_mgr action;
         DDS::String_mgr value;
         DDS::String_mgr spec_id;
   };

   typedef DDS_DCPSStruct_var < command_configure> command_configure_var;
   typedef DDS_DCPSStruct_out < command_configure> command_configure_out;

   struct command_moveCamWrap
   {
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::String_mgr device;
         DDS::String_mgr property;
         DDS::String_mgr action;
         DDS::String_mgr value;
         DDS::Double angle;
   };

   typedef DDS_DCPSStruct_var < command_moveCamWrap> command_moveCamWrap_var;
   typedef DDS_DCPSStruct_out < command_moveCamWrap> command_moveCamWrap_out;

   struct command_moveMirrorCover
   {
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::String_mgr device;
         DDS::String_mgr property;
         DDS::String_mgr action;
         DDS::String_mgr value;
         DDS::String_mgr position;
   };

   typedef DDS_DCPSStruct_var < command_moveMirrorCover> command_moveMirrorCover_var;
   typedef DDS_DCPSStruct_out < command_moveMirrorCover> command_moveMirrorCover_out;

   struct command_moveToTarget
   {
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::String_mgr device;
         DDS::String_mgr property;
         DDS::String_mgr action;
         DDS::String_mgr value;
         DDS::String_mgr azimuth;
         DDS::String_mgr elevation;
   };

   typedef DDS_DCPSStruct_var < command_moveToTarget> command_moveToTarget_var;
   typedef DDS_DCPSStruct_out < command_moveToTarget> command_moveToTarget_out;

   struct command_test
   {
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::String_mgr device;
         DDS::String_mgr property;
         DDS::String_mgr action;
         DDS::String_mgr value;
         DDS::String_mgr spec_id;
   };

   typedef DDS_DCPSStruct_var < command_test> command_test_var;
   typedef DDS_DCPSStruct_out < command_test> command_test_out;

   struct logevent_accLimit
   {
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::Long priority;
   };

   typedef DDS_DCPSStruct_var < logevent_accLimit> logevent_accLimit_var;
   typedef DDS_DCPSStruct_out < logevent_accLimit> logevent_accLimit_out;

   struct logevent_altLimit
   {
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::Long priority;
         DDS::String_mgr type;
   };

   typedef DDS_DCPSStruct_var < logevent_altLimit> logevent_altLimit_var;
   typedef DDS_DCPSStruct_out < logevent_altLimit> logevent_altLimit_out;

   struct logevent_interlock
   {
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::Long priority;
         DDS::String_mgr detail;
   };

   typedef DDS_DCPSStruct_var < logevent_interlock> logevent_interlock_var;
   typedef DDS_DCPSStruct_out < logevent_interlock> logevent_interlock_out;

   struct logevent_powerError
   {
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::Long priority;
         DDS::String_mgr device;
         DDS::Long severity;
   };

   typedef DDS_DCPSStruct_var < logevent_powerError> logevent_powerError_var;
   typedef DDS_DCPSStruct_out < logevent_powerError> logevent_powerError_out;

   struct logevent_slewError
   {
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::Long priority;
   };

   typedef DDS_DCPSStruct_var < logevent_slewError> logevent_slewError_var;
   typedef DDS_DCPSStruct_out < logevent_slewError> logevent_slewError_out;

   struct logevent_slewOK
   {
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::Long priority;
   };

   typedef DDS_DCPSStruct_var < logevent_slewOK> logevent_slewOK_var;
   typedef DDS_DCPSStruct_out < logevent_slewOK> logevent_slewOK_out;

   struct logevent_slewReady
   {
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::Long priority;
   };

   typedef DDS_DCPSStruct_var < logevent_slewReady> logevent_slewReady_var;
   typedef DDS_DCPSStruct_out < logevent_slewReady> logevent_slewReady_out;

   struct logevent_tempError
   {
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::Long priority;
         DDS::String_mgr device;
         DDS::Long severity;
   };

   typedef DDS_DCPSStruct_var < logevent_tempError> logevent_tempError_var;
   typedef DDS_DCPSStruct_out < logevent_tempError> logevent_tempError_out;

   struct logevent_trackLost
   {
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::Long priority;
   };

   typedef DDS_DCPSStruct_var < logevent_trackLost> logevent_trackLost_var;
   typedef DDS_DCPSStruct_out < logevent_trackLost> logevent_trackLost_out;

   struct logevent_tracking
   {
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::Long priority;
   };

   typedef DDS_DCPSStruct_var < logevent_tracking> logevent_tracking_var;
   typedef DDS_DCPSStruct_out < logevent_tracking> logevent_tracking_out;

   struct logevent_velLimit
   {
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_seqNum;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::Long priority;
   };

   typedef DDS_DCPSStruct_var < logevent_velLimit> logevent_velLimit_var;
   typedef DDS_DCPSStruct_out < logevent_velLimit> logevent_velLimit_out;

   struct command
   {
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::Long private_seqNum;
         DDS::String_mgr device;
         DDS::String_mgr property;
         DDS::String_mgr action;
         DDS::String_mgr value;
         DDS::String_mgr modifiers;
   };

   typedef DDS_DCPSStruct_var < command> command_var;
   typedef DDS_DCPSStruct_out < command> command_out;

   struct ackcmd
   {
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::Long private_seqNum;
         DDS::Long ack;
         DDS::Long error;
         DDS::String_mgr result;
   };

   typedef DDS_DCPSStruct_var < ackcmd> ackcmd_var;
   typedef DDS_DCPSStruct_out < ackcmd> ackcmd_out;

   struct logevent
   {
         DDS::String_mgr private_revCode;
         DDS::Double private_sndStamp;
         DDS::Double private_rcvStamp;
         DDS::Long private_origin;
         DDS::Long private_host;
         DDS::String_mgr message;
   };

   typedef DDS_DCPSStruct_var < logevent> logevent_var;
   typedef DDS_DCPSStruct_out < logevent> logevent_out;
}
template <>
mount::Alt::_Raw_slice* DDS_DCPS_ArrayHelper < mount::Alt::_Raw, mount::Alt::_Raw_slice, mount::Alt::_Raw_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < mount::Alt::_Raw, mount::Alt::_Raw_slice, mount::Alt::_Raw_uniq_>::copy (mount::Alt::_Raw_slice *to, const mount::Alt::_Raw_slice* from);
template <>
void DDS_DCPS_ArrayHelper < mount::Alt::_Raw, mount::Alt::_Raw_slice, mount::Alt::_Raw_uniq_>::free (mount::Alt::_Raw_slice *ptr);
template <>
mount::Alt::_Calibrated_slice* DDS_DCPS_ArrayHelper < mount::Alt::_Calibrated, mount::Alt::_Calibrated_slice, mount::Alt::_Calibrated_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < mount::Alt::_Calibrated, mount::Alt::_Calibrated_slice, mount::Alt::_Calibrated_uniq_>::copy (mount::Alt::_Calibrated_slice *to, const mount::Alt::_Calibrated_slice* from);
template <>
void DDS_DCPS_ArrayHelper < mount::Alt::_Calibrated, mount::Alt::_Calibrated_slice, mount::Alt::_Calibrated_uniq_>::free (mount::Alt::_Calibrated_slice *ptr);
template <>
mount::Application::_Demand_slice* DDS_DCPS_ArrayHelper < mount::Application::_Demand, mount::Application::_Demand_slice, mount::Application::_Demand_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < mount::Application::_Demand, mount::Application::_Demand_slice, mount::Application::_Demand_uniq_>::copy (mount::Application::_Demand_slice *to, const mount::Application::_Demand_slice* from);
template <>
void DDS_DCPS_ArrayHelper < mount::Application::_Demand, mount::Application::_Demand_slice, mount::Application::_Demand_uniq_>::free (mount::Application::_Demand_slice *ptr);
template <>
mount::Application::_Position_slice* DDS_DCPS_ArrayHelper < mount::Application::_Position, mount::Application::_Position_slice, mount::Application::_Position_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < mount::Application::_Position, mount::Application::_Position_slice, mount::Application::_Position_uniq_>::copy (mount::Application::_Position_slice *to, const mount::Application::_Position_slice* from);
template <>
void DDS_DCPS_ArrayHelper < mount::Application::_Position, mount::Application::_Position_slice, mount::Application::_Position_uniq_>::free (mount::Application::_Position_slice *ptr);
template <>
mount::Application::_Error_slice* DDS_DCPS_ArrayHelper < mount::Application::_Error, mount::Application::_Error_slice, mount::Application::_Error_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < mount::Application::_Error, mount::Application::_Error_slice, mount::Application::_Error_uniq_>::copy (mount::Application::_Error_slice *to, const mount::Application::_Error_slice* from);
template <>
void DDS_DCPS_ArrayHelper < mount::Application::_Error, mount::Application::_Error_slice, mount::Application::_Error_uniq_>::free (mount::Application::_Error_slice *ptr);
template <>
mount::Az::_Raw_slice* DDS_DCPS_ArrayHelper < mount::Az::_Raw, mount::Az::_Raw_slice, mount::Az::_Raw_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < mount::Az::_Raw, mount::Az::_Raw_slice, mount::Az::_Raw_uniq_>::copy (mount::Az::_Raw_slice *to, const mount::Az::_Raw_slice* from);
template <>
void DDS_DCPS_ArrayHelper < mount::Az::_Raw, mount::Az::_Raw_slice, mount::Az::_Raw_uniq_>::free (mount::Az::_Raw_slice *ptr);
template <>
mount::Az::_Calibrated_slice* DDS_DCPS_ArrayHelper < mount::Az::_Calibrated, mount::Az::_Calibrated_slice, mount::Az::_Calibrated_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < mount::Az::_Calibrated, mount::Az::_Calibrated_slice, mount::Az::_Calibrated_uniq_>::copy (mount::Az::_Calibrated_slice *to, const mount::Az::_Calibrated_slice* from);
template <>
void DDS_DCPS_ArrayHelper < mount::Az::_Calibrated, mount::Az::_Calibrated_slice, mount::Az::_Calibrated_uniq_>::free (mount::Az::_Calibrated_slice *ptr);
template <>
mount::Electrical::_Raw_slice* DDS_DCPS_ArrayHelper < mount::Electrical::_Raw, mount::Electrical::_Raw_slice, mount::Electrical::_Raw_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < mount::Electrical::_Raw, mount::Electrical::_Raw_slice, mount::Electrical::_Raw_uniq_>::copy (mount::Electrical::_Raw_slice *to, const mount::Electrical::_Raw_slice* from);
template <>
void DDS_DCPS_ArrayHelper < mount::Electrical::_Raw, mount::Electrical::_Raw_slice, mount::Electrical::_Raw_uniq_>::free (mount::Electrical::_Raw_slice *ptr);
template <>
mount::Electrical::_Calibrated_slice* DDS_DCPS_ArrayHelper < mount::Electrical::_Calibrated, mount::Electrical::_Calibrated_slice, mount::Electrical::_Calibrated_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < mount::Electrical::_Calibrated, mount::Electrical::_Calibrated_slice, mount::Electrical::_Calibrated_uniq_>::copy (mount::Electrical::_Calibrated_slice *to, const mount::Electrical::_Calibrated_slice* from);
template <>
void DDS_DCPS_ArrayHelper < mount::Electrical::_Calibrated, mount::Electrical::_Calibrated_slice, mount::Electrical::_Calibrated_uniq_>::free (mount::Electrical::_Calibrated_slice *ptr);
template <>
mount::Metrology::_Raw_slice* DDS_DCPS_ArrayHelper < mount::Metrology::_Raw, mount::Metrology::_Raw_slice, mount::Metrology::_Raw_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < mount::Metrology::_Raw, mount::Metrology::_Raw_slice, mount::Metrology::_Raw_uniq_>::copy (mount::Metrology::_Raw_slice *to, const mount::Metrology::_Raw_slice* from);
template <>
void DDS_DCPS_ArrayHelper < mount::Metrology::_Raw, mount::Metrology::_Raw_slice, mount::Metrology::_Raw_uniq_>::free (mount::Metrology::_Raw_slice *ptr);
template <>
mount::Metrology::_Calibrated_slice* DDS_DCPS_ArrayHelper < mount::Metrology::_Calibrated, mount::Metrology::_Calibrated_slice, mount::Metrology::_Calibrated_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < mount::Metrology::_Calibrated, mount::Metrology::_Calibrated_slice, mount::Metrology::_Calibrated_uniq_>::copy (mount::Metrology::_Calibrated_slice *to, const mount::Metrology::_Calibrated_slice* from);
template <>
void DDS_DCPS_ArrayHelper < mount::Metrology::_Calibrated, mount::Metrology::_Calibrated_slice, mount::Metrology::_Calibrated_uniq_>::free (mount::Metrology::_Calibrated_slice *ptr);
template <>
mount::Rotator::_Raw_slice* DDS_DCPS_ArrayHelper < mount::Rotator::_Raw, mount::Rotator::_Raw_slice, mount::Rotator::_Raw_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < mount::Rotator::_Raw, mount::Rotator::_Raw_slice, mount::Rotator::_Raw_uniq_>::copy (mount::Rotator::_Raw_slice *to, const mount::Rotator::_Raw_slice* from);
template <>
void DDS_DCPS_ArrayHelper < mount::Rotator::_Raw, mount::Rotator::_Raw_slice, mount::Rotator::_Raw_uniq_>::free (mount::Rotator::_Raw_slice *ptr);
template <>
mount::Rotator::_Calibrated_slice* DDS_DCPS_ArrayHelper < mount::Rotator::_Calibrated, mount::Rotator::_Calibrated_slice, mount::Rotator::_Calibrated_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < mount::Rotator::_Calibrated, mount::Rotator::_Calibrated_slice, mount::Rotator::_Calibrated_uniq_>::copy (mount::Rotator::_Calibrated_slice *to, const mount::Rotator::_Calibrated_slice* from);
template <>
void DDS_DCPS_ArrayHelper < mount::Rotator::_Calibrated, mount::Rotator::_Calibrated_slice, mount::Rotator::_Calibrated_uniq_>::free (mount::Rotator::_Calibrated_slice *ptr);
template <>
mount::TC::_Raw_slice* DDS_DCPS_ArrayHelper < mount::TC::_Raw, mount::TC::_Raw_slice, mount::TC::_Raw_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < mount::TC::_Raw, mount::TC::_Raw_slice, mount::TC::_Raw_uniq_>::copy (mount::TC::_Raw_slice *to, const mount::TC::_Raw_slice* from);
template <>
void DDS_DCPS_ArrayHelper < mount::TC::_Raw, mount::TC::_Raw_slice, mount::TC::_Raw_uniq_>::free (mount::TC::_Raw_slice *ptr);
template <>
mount::TC::_Calibrated_slice* DDS_DCPS_ArrayHelper < mount::TC::_Calibrated, mount::TC::_Calibrated_slice, mount::TC::_Calibrated_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < mount::TC::_Calibrated, mount::TC::_Calibrated_slice, mount::TC::_Calibrated_uniq_>::copy (mount::TC::_Calibrated_slice *to, const mount::TC::_Calibrated_slice* from);
template <>
void DDS_DCPS_ArrayHelper < mount::TC::_Calibrated, mount::TC::_Calibrated_slice, mount::TC::_Calibrated_uniq_>::free (mount::TC::_Calibrated_slice *ptr);




#endif 
