#----------------------------------------------------------------------------
#       Macros
#----------------------------------------------------------------------------
CFG = Release

ifeq ($(CFG), Release)
CC            = gcc
CXX           = g++
LD            = $(CC) $(CFLAGS) $(CPPFLAGS)
AR            = ar
PICFLAGS      = -fPIC
CPPFLAGS      = $(PICFLAGS) $(GENFLAGS) -m32 -D_REENTRANT -Wall -I"." -I"../../../../../examples/include" -I"../../../../../examples" -I"../../../../../include" -I"../../../../../include/sys" -I"../../../../../include/dcps/C/SAC"
OBJEXT        = .o
OUTPUT_OPTION = -o "$@"
COMPILE.c     = $(CC) $(CFLAGS) $(CPPFLAGS) -c
COMPILE.cc    = $(CXX) $(CCFLAGS) $(CPPFLAGS) -c
LDFLAGS       = -L"." -L"../../../../../lib" -Wl,-rpath,\$$ORIGIN -Wl,-rpath,\$$ORIGIN/../../../../../lib
CCC           = $(CXX)
MAKEFILE      = Makefile.sac_SAL_types
DEPENDENCIES  = .depend.$(MAKEFILE)
LTARGETDIR    = ./
CAT           = cat
MV            = mv -f
RM            = rm -rf
CP            = cp -p
NUL           = /dev/null
MKDIR         = mkdir -p
TESTDIRSTART  = test -d
TESTDIREND    = ||
TOUCH         = touch
EXEEXT        = 
LIBPREFIX     = lib
LIBSUFFIX     = 
GENFLAGS      = -O
LDLIBS        = -l"dcpssac" -l"dcpsgapi" -l"ddsuser" -l"ddskernel" -l"ddsserialization" -l"ddsconfparser" -l"ddsconf" -l"ddsdatabase" -l"ddsutil" -l"ddsos" -ldl $(subst lib,-l,$(sort $(basename $(notdir $(wildcard /usr/lib/librt.so /lib/librt.so))))) -lpthread
OBJS          = .obj/SALDataSacDcps$(OBJEXT) .obj/SALDataSplDcps$(OBJEXT)
AREXT         = .a
LIB           = $(LTARGETDIR)$(LIBPREFIX)sac_SAL_types$(LIBSUFFIX)$(AREXT)
SOEXT         = .so
SHTARGETDIR   = ./
SHLIB         = $(SHTARGETDIR)$(LIBPREFIX)sac_SAL_types$(LIBSUFFIX)$(SOEXT)
SHFLAGS       = -shared
SRC           = SALDataSacDcps.c SALDataSplDcps.c
LINK.cc       = $(LD) $(LDFLAGS)
DYNAMICFLAGS  = -DOSPL_BUILDEXAMPLE_LIB
EXPORTFLAGS   = $(DYNAMICFLAGS)
endif
ifeq ($(CFG), Debug)
CC            = gcc
CXX           = g++
LD            = $(CC) $(CFLAGS) $(CPPFLAGS)
AR            = ar
PICFLAGS      = -fPIC
CPPFLAGS      = $(PICFLAGS) $(GENFLAGS) -m32 -D_REENTRANT -Wall -I"." -I"../../../../../examples/include" -I"../../../../../examples" -I"../../../../../include" -I"../../../../../include/sys" -I"../../../../../include/dcps/C/SAC"
OBJEXT        = .o
OUTPUT_OPTION = -o "$@"
COMPILE.c     = $(CC) $(CFLAGS) $(CPPFLAGS) -c
COMPILE.cc    = $(CXX) $(CCFLAGS) $(CPPFLAGS) -c
LDFLAGS       = -L"." -L"../../../../../lib" -Wl,-rpath,\$$ORIGIN -Wl,-rpath,\$$ORIGIN/../../../../../lib
CCC           = $(CXX)
MAKEFILE      = Makefile.sac_SAL_types
DEPENDENCIES  = .depend.$(MAKEFILE)
LTARGETDIR    = ./
CAT           = cat
MV            = mv -f
RM            = rm -rf
CP            = cp -p
NUL           = /dev/null
MKDIR         = mkdir -p
TESTDIRSTART  = test -d
TESTDIREND    = ||
TOUCH         = touch
EXEEXT        = 
LIBPREFIX     = lib
LIBSUFFIX     = 
GENFLAGS      = -g
LDLIBS        = -l"dcpssac" -l"dcpsgapi" -l"ddsuser" -l"ddskernel" -l"ddsserialization" -l"ddsconfparser" -l"ddsconf" -l"ddsdatabase" -l"ddsutil" -l"ddsos" -ldl $(subst lib,-l,$(sort $(basename $(notdir $(wildcard /usr/lib/librt.so /lib/librt.so))))) -lpthread
OBJS          = .obj/SALDataSacDcps$(OBJEXT) .obj/SALDataSplDcps$(OBJEXT)
AREXT         = .a
LIB           = $(LTARGETDIR)$(LIBPREFIX)sac_SAL_types$(LIBSUFFIX)$(AREXT)
SOEXT         = .so
SHTARGETDIR   = ./
SHLIB         = $(SHTARGETDIR)$(LIBPREFIX)sac_SAL_types$(LIBSUFFIX)$(SOEXT)
SHFLAGS       = -shared
SRC           = SALDataSacDcps.c SALDataSplDcps.c
LINK.cc       = $(LD) $(LDFLAGS)
DYNAMICFLAGS  = -DOSPL_BUILDEXAMPLE_LIB
EXPORTFLAGS   = $(DYNAMICFLAGS)
endif

#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------

all: $(SHLIB)

$(SHLIB): $(OBJS)
	@$(TESTDIRSTART) "$(SHTARGETDIR)" $(TESTDIREND) $(MKDIR) "$(SHTARGETDIR)"
	$(LINK.cc) $(SHFLAGS) $(OBJS) $(LDLIBS) $(OUTPUT_OPTION)

$(LIB): $(OBJS)
	@$(TESTDIRSTART) "$(LTARGETDIR)" $(TESTDIREND) $(MKDIR) "$(LTARGETDIR)"
	$(AR) $(ARFLAGS) $(LIB) $(OBJS) 

SPACE           = $(should_be_unset) $(should_be_unset)
GENERATED_DIRTY = SALDataDcps.h SALData.h SALDataSplDcps.h SALDataSacDcps.h SALDataSacDcps.c SALDataSplDcps.c


.NOTPARALLEL:
SALDataDcps.h SALData.h SALDataSplDcps.h SALDataSacDcps.h SALDataSacDcps.c SALDataSplDcps.c: ../../idl/SALData.idl
	"../../../../../bin/idlpp" -I "../../../../../etc/idl" -S -l c ../../idl/SALData.idl

.PRECIOUS: $(GENERATED_DIRTY)
$(OBJS): $(GENERATED_DIRTY)

generated: $(GENERATED_DIRTY)
	@-:

.obj/SALDataSacDcps$(OBJEXT): SALDataSacDcps.c
	@$(TESTDIRSTART) ".obj/." $(TESTDIREND) $(MKDIR) ".obj/."
	$(COMPILE.c) $(EXPORTFLAGS) $(OUTPUT_OPTION) SALDataSacDcps.c

.obj/SALDataSplDcps$(OBJEXT): SALDataSplDcps.c
	@$(TESTDIRSTART) ".obj/." $(TESTDIREND) $(MKDIR) ".obj/."
	$(COMPILE.c) $(EXPORTFLAGS) $(OUTPUT_OPTION) SALDataSplDcps.c

clean:
	-$(RM) $(OBJS)

realclean: clean
	-$(RM) $(SHLIB) $(LIB)
	-$(RM) $(GENERATED_DIRTY)
	-$(RM) .obj/

check-syntax:
	$(COMPILE.cc) $(EXPORTFLAGS) -Wall -Wextra -pedantic -fsyntax-only $(CHK_SOURCES)

#----------------------------------------------------------------------------
#       Dependencies
#----------------------------------------------------------------------------

$(DEPENDENCIES):
	@$(TOUCH) $(DEPENDENCIES)

depend:
	-VDIR=.obj/ $(MPC_ROOT)/depgen.pl  $(CFLAGS) $(CCFLAGS) $(CPPFLAGS) -f $(DEPENDENCIES) $(SRC) 2> $(NUL)

include $(DEPENDENCIES)
