//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: SALDataDcps.cpp
//  Source: SALDataDcps.idl
//  Generated: Mon May 27 11:36:39 2013
//  OpenSplice V6.3.0
//  
//******************************************************************

#include "SALDataDcps.h"

#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUVLSeq < SALData::SALEvent, struct SALEventSeq_uniq_>;
#endif
#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUVLSeq < SALData::SALResponse, struct SALResponseSeq_uniq_>;
#endif
#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUVLSeq < SALData::SALCommand, struct SALCommandSeq_uniq_>;
#endif
#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUVLSeq < SALData::SALTopic, struct SALTopicSeq_uniq_>;
#endif

const char * SALData::SALTopicTypeSupportInterface::_local_id = "IDL:SALData/SALTopicTypeSupportInterface:1.0";

SALData::SALTopicTypeSupportInterface_ptr SALData::SALTopicTypeSupportInterface::_duplicate (SALData::SALTopicTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean SALData::SALTopicTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, SALData::SALTopicTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

SALData::SALTopicTypeSupportInterface_ptr SALData::SALTopicTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   SALData::SALTopicTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (SALData::SALTopicTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < SALData::SALTopicTypeSupportInterface_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

SALData::SALTopicTypeSupportInterface_ptr SALData::SALTopicTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   SALData::SALTopicTypeSupportInterface_ptr result;
   result = dynamic_cast < SALData::SALTopicTypeSupportInterface_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * SALData::SALTopicDataWriter::_local_id = "IDL:SALData/SALTopicDataWriter:1.0";

SALData::SALTopicDataWriter_ptr SALData::SALTopicDataWriter::_duplicate (SALData::SALTopicDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean SALData::SALTopicDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, SALData::SALTopicDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

SALData::SALTopicDataWriter_ptr SALData::SALTopicDataWriter::_narrow (DDS::Object_ptr p)
{
   SALData::SALTopicDataWriter_ptr result = NULL;
   if (p && p->_is_a (SALData::SALTopicDataWriter::_local_id))
   {
      result = dynamic_cast < SALData::SALTopicDataWriter_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

SALData::SALTopicDataWriter_ptr SALData::SALTopicDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   SALData::SALTopicDataWriter_ptr result;
   result = dynamic_cast < SALData::SALTopicDataWriter_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * SALData::SALTopicDataReader::_local_id = "IDL:SALData/SALTopicDataReader:1.0";

SALData::SALTopicDataReader_ptr SALData::SALTopicDataReader::_duplicate (SALData::SALTopicDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean SALData::SALTopicDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, SALData::SALTopicDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

SALData::SALTopicDataReader_ptr SALData::SALTopicDataReader::_narrow (DDS::Object_ptr p)
{
   SALData::SALTopicDataReader_ptr result = NULL;
   if (p && p->_is_a (SALData::SALTopicDataReader::_local_id))
   {
      result = dynamic_cast < SALData::SALTopicDataReader_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

SALData::SALTopicDataReader_ptr SALData::SALTopicDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   SALData::SALTopicDataReader_ptr result;
   result = dynamic_cast < SALData::SALTopicDataReader_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * SALData::SALTopicDataReaderView::_local_id = "IDL:SALData/SALTopicDataReaderView:1.0";

SALData::SALTopicDataReaderView_ptr SALData::SALTopicDataReaderView::_duplicate (SALData::SALTopicDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean SALData::SALTopicDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, SALData::SALTopicDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

SALData::SALTopicDataReaderView_ptr SALData::SALTopicDataReaderView::_narrow (DDS::Object_ptr p)
{
   SALData::SALTopicDataReaderView_ptr result = NULL;
   if (p && p->_is_a (SALData::SALTopicDataReaderView::_local_id))
   {
      result = dynamic_cast < SALData::SALTopicDataReaderView_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

SALData::SALTopicDataReaderView_ptr SALData::SALTopicDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   SALData::SALTopicDataReaderView_ptr result;
   result = dynamic_cast < SALData::SALTopicDataReaderView_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * SALData::SALCommandTypeSupportInterface::_local_id = "IDL:SALData/SALCommandTypeSupportInterface:1.0";

SALData::SALCommandTypeSupportInterface_ptr SALData::SALCommandTypeSupportInterface::_duplicate (SALData::SALCommandTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean SALData::SALCommandTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, SALData::SALCommandTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

SALData::SALCommandTypeSupportInterface_ptr SALData::SALCommandTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   SALData::SALCommandTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (SALData::SALCommandTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < SALData::SALCommandTypeSupportInterface_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

SALData::SALCommandTypeSupportInterface_ptr SALData::SALCommandTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   SALData::SALCommandTypeSupportInterface_ptr result;
   result = dynamic_cast < SALData::SALCommandTypeSupportInterface_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * SALData::SALCommandDataWriter::_local_id = "IDL:SALData/SALCommandDataWriter:1.0";

SALData::SALCommandDataWriter_ptr SALData::SALCommandDataWriter::_duplicate (SALData::SALCommandDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean SALData::SALCommandDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, SALData::SALCommandDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

SALData::SALCommandDataWriter_ptr SALData::SALCommandDataWriter::_narrow (DDS::Object_ptr p)
{
   SALData::SALCommandDataWriter_ptr result = NULL;
   if (p && p->_is_a (SALData::SALCommandDataWriter::_local_id))
   {
      result = dynamic_cast < SALData::SALCommandDataWriter_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

SALData::SALCommandDataWriter_ptr SALData::SALCommandDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   SALData::SALCommandDataWriter_ptr result;
   result = dynamic_cast < SALData::SALCommandDataWriter_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * SALData::SALCommandDataReader::_local_id = "IDL:SALData/SALCommandDataReader:1.0";

SALData::SALCommandDataReader_ptr SALData::SALCommandDataReader::_duplicate (SALData::SALCommandDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean SALData::SALCommandDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, SALData::SALCommandDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

SALData::SALCommandDataReader_ptr SALData::SALCommandDataReader::_narrow (DDS::Object_ptr p)
{
   SALData::SALCommandDataReader_ptr result = NULL;
   if (p && p->_is_a (SALData::SALCommandDataReader::_local_id))
   {
      result = dynamic_cast < SALData::SALCommandDataReader_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

SALData::SALCommandDataReader_ptr SALData::SALCommandDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   SALData::SALCommandDataReader_ptr result;
   result = dynamic_cast < SALData::SALCommandDataReader_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * SALData::SALCommandDataReaderView::_local_id = "IDL:SALData/SALCommandDataReaderView:1.0";

SALData::SALCommandDataReaderView_ptr SALData::SALCommandDataReaderView::_duplicate (SALData::SALCommandDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean SALData::SALCommandDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, SALData::SALCommandDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

SALData::SALCommandDataReaderView_ptr SALData::SALCommandDataReaderView::_narrow (DDS::Object_ptr p)
{
   SALData::SALCommandDataReaderView_ptr result = NULL;
   if (p && p->_is_a (SALData::SALCommandDataReaderView::_local_id))
   {
      result = dynamic_cast < SALData::SALCommandDataReaderView_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

SALData::SALCommandDataReaderView_ptr SALData::SALCommandDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   SALData::SALCommandDataReaderView_ptr result;
   result = dynamic_cast < SALData::SALCommandDataReaderView_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * SALData::SALResponseTypeSupportInterface::_local_id = "IDL:SALData/SALResponseTypeSupportInterface:1.0";

SALData::SALResponseTypeSupportInterface_ptr SALData::SALResponseTypeSupportInterface::_duplicate (SALData::SALResponseTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean SALData::SALResponseTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, SALData::SALResponseTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

SALData::SALResponseTypeSupportInterface_ptr SALData::SALResponseTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   SALData::SALResponseTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (SALData::SALResponseTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < SALData::SALResponseTypeSupportInterface_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

SALData::SALResponseTypeSupportInterface_ptr SALData::SALResponseTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   SALData::SALResponseTypeSupportInterface_ptr result;
   result = dynamic_cast < SALData::SALResponseTypeSupportInterface_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * SALData::SALResponseDataWriter::_local_id = "IDL:SALData/SALResponseDataWriter:1.0";

SALData::SALResponseDataWriter_ptr SALData::SALResponseDataWriter::_duplicate (SALData::SALResponseDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean SALData::SALResponseDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, SALData::SALResponseDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

SALData::SALResponseDataWriter_ptr SALData::SALResponseDataWriter::_narrow (DDS::Object_ptr p)
{
   SALData::SALResponseDataWriter_ptr result = NULL;
   if (p && p->_is_a (SALData::SALResponseDataWriter::_local_id))
   {
      result = dynamic_cast < SALData::SALResponseDataWriter_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

SALData::SALResponseDataWriter_ptr SALData::SALResponseDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   SALData::SALResponseDataWriter_ptr result;
   result = dynamic_cast < SALData::SALResponseDataWriter_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * SALData::SALResponseDataReader::_local_id = "IDL:SALData/SALResponseDataReader:1.0";

SALData::SALResponseDataReader_ptr SALData::SALResponseDataReader::_duplicate (SALData::SALResponseDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean SALData::SALResponseDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, SALData::SALResponseDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

SALData::SALResponseDataReader_ptr SALData::SALResponseDataReader::_narrow (DDS::Object_ptr p)
{
   SALData::SALResponseDataReader_ptr result = NULL;
   if (p && p->_is_a (SALData::SALResponseDataReader::_local_id))
   {
      result = dynamic_cast < SALData::SALResponseDataReader_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

SALData::SALResponseDataReader_ptr SALData::SALResponseDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   SALData::SALResponseDataReader_ptr result;
   result = dynamic_cast < SALData::SALResponseDataReader_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * SALData::SALResponseDataReaderView::_local_id = "IDL:SALData/SALResponseDataReaderView:1.0";

SALData::SALResponseDataReaderView_ptr SALData::SALResponseDataReaderView::_duplicate (SALData::SALResponseDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean SALData::SALResponseDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, SALData::SALResponseDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

SALData::SALResponseDataReaderView_ptr SALData::SALResponseDataReaderView::_narrow (DDS::Object_ptr p)
{
   SALData::SALResponseDataReaderView_ptr result = NULL;
   if (p && p->_is_a (SALData::SALResponseDataReaderView::_local_id))
   {
      result = dynamic_cast < SALData::SALResponseDataReaderView_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

SALData::SALResponseDataReaderView_ptr SALData::SALResponseDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   SALData::SALResponseDataReaderView_ptr result;
   result = dynamic_cast < SALData::SALResponseDataReaderView_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * SALData::SALEventTypeSupportInterface::_local_id = "IDL:SALData/SALEventTypeSupportInterface:1.0";

SALData::SALEventTypeSupportInterface_ptr SALData::SALEventTypeSupportInterface::_duplicate (SALData::SALEventTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean SALData::SALEventTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, SALData::SALEventTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

SALData::SALEventTypeSupportInterface_ptr SALData::SALEventTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   SALData::SALEventTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (SALData::SALEventTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < SALData::SALEventTypeSupportInterface_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

SALData::SALEventTypeSupportInterface_ptr SALData::SALEventTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   SALData::SALEventTypeSupportInterface_ptr result;
   result = dynamic_cast < SALData::SALEventTypeSupportInterface_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * SALData::SALEventDataWriter::_local_id = "IDL:SALData/SALEventDataWriter:1.0";

SALData::SALEventDataWriter_ptr SALData::SALEventDataWriter::_duplicate (SALData::SALEventDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean SALData::SALEventDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, SALData::SALEventDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

SALData::SALEventDataWriter_ptr SALData::SALEventDataWriter::_narrow (DDS::Object_ptr p)
{
   SALData::SALEventDataWriter_ptr result = NULL;
   if (p && p->_is_a (SALData::SALEventDataWriter::_local_id))
   {
      result = dynamic_cast < SALData::SALEventDataWriter_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

SALData::SALEventDataWriter_ptr SALData::SALEventDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   SALData::SALEventDataWriter_ptr result;
   result = dynamic_cast < SALData::SALEventDataWriter_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * SALData::SALEventDataReader::_local_id = "IDL:SALData/SALEventDataReader:1.0";

SALData::SALEventDataReader_ptr SALData::SALEventDataReader::_duplicate (SALData::SALEventDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean SALData::SALEventDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, SALData::SALEventDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

SALData::SALEventDataReader_ptr SALData::SALEventDataReader::_narrow (DDS::Object_ptr p)
{
   SALData::SALEventDataReader_ptr result = NULL;
   if (p && p->_is_a (SALData::SALEventDataReader::_local_id))
   {
      result = dynamic_cast < SALData::SALEventDataReader_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

SALData::SALEventDataReader_ptr SALData::SALEventDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   SALData::SALEventDataReader_ptr result;
   result = dynamic_cast < SALData::SALEventDataReader_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * SALData::SALEventDataReaderView::_local_id = "IDL:SALData/SALEventDataReaderView:1.0";

SALData::SALEventDataReaderView_ptr SALData::SALEventDataReaderView::_duplicate (SALData::SALEventDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean SALData::SALEventDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, SALData::SALEventDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

SALData::SALEventDataReaderView_ptr SALData::SALEventDataReaderView::_narrow (DDS::Object_ptr p)
{
   SALData::SALEventDataReaderView_ptr result = NULL;
   if (p && p->_is_a (SALData::SALEventDataReaderView::_local_id))
   {
      result = dynamic_cast < SALData::SALEventDataReaderView_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

SALData::SALEventDataReaderView_ptr SALData::SALEventDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   SALData::SALEventDataReaderView_ptr result;
   result = dynamic_cast < SALData::SALEventDataReaderView_ptr> (p);
   if (result) result->m_count++;
   return result;
}



