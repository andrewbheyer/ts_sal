
	svcRTN salocs_scheduler_econstraints::getItem ( svcIID itemId , (svcCHAR *)value )
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    switch (itemId) {
	    


                 case SAL_IID_ocs_scheduler_econstraints_maxval :
                      strncpy(value, data.maxval, 32);
                      result = SAL__OK;
                      break;


                 case SAL_IID_ocs_scheduler_econstraints_minval :
                      strncpy(value, data.minval, 32);
                      result = SAL__OK;
                      break;


                 case SAL_IID_ocs_scheduler_econstraints_type :
                      strncpy(value, data.type, 32);
                      result = SAL__OK;
                      break;


	    }
	    return result;
	}
	


	svcRTN salocs_scheduler_econstraints::setItem ( svcIID itemId , (svcCHAR *)value )
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    switch (itemId) {
	    


                 case SAL_IID_ocs_scheduler_econstraints_maxval :
                      strncpy(data.maxval, value, 32);
                      result = SAL__OK;
                      break;


                 case SAL_IID_ocs_scheduler_econstraints_minval :
                      strncpy(data.minval, value, 32);
                      result = SAL__OK;
                      break;


                 case SAL_IID_ocs_scheduler_econstraints_type :
                      strncpy(data.type, value, 32);
                      result = SAL__OK;
                      break;


	    }
	    return result;
	}
	


       svcRTN salocs_scheduler_econstraints::setItemStr ( svcIID itemId , svcCHAR *textValue)
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    
	    switch (itemid) {

	    }
	    return result;
	}

       svcRTN salocs_scheduler_econstraints::getItemStr ( svcIID itemId , svcCHAR *textValue)
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    
	    switch (itemid) {

	    }
	    return result;
	}
