
	svcRTN salcamera_BEE_clocks::getItem ( svcIID itemId , svcLONG value[], svcUINT size)
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    switch (itemId) {

                 case SAL_IID_camera_BEE_clocks_parallel_1A :
                      if ( size > 202 ) {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        value[count] = data.parallel_1A[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_camera_BEE_clocks_parallel_1B :
                      if ( size > 202 ) {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        value[count] = data.parallel_1B[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_camera_BEE_clocks_parallel_2A :
                      if ( size > 202 ) {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        value[count] = data.parallel_2A[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_camera_BEE_clocks_parallel_2B :
                      if ( size > 202 ) {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        value[count] = data.parallel_2B[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_camera_BEE_clocks_serial_1A :
                      if ( size > 202 ) {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        value[count] = data.serial_1A[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_camera_BEE_clocks_serial_1B :
                      if ( size > 202 ) {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        value[count] = data.serial_1B[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_camera_BEE_clocks_serial_2A :
                      if ( size > 202 ) {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        value[count] = data.serial_2A[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_camera_BEE_clocks_serial_2B :
                      if ( size > 202 ) {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        value[count] = data.serial_2B[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_camera_BEE_clocks_serial_3A :
                      if ( size > 202 ) {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        value[count] = data.serial_3A[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_camera_BEE_clocks_serial_3B :
                      if ( size > 202 ) {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        value[count] = data.serial_3B[count];
                      }
                      result = SAL__OK;
                      break;

	    }
	    return result;
	}

 	svcRTN salcamera_BEE_clocks::setItem ( svcIID itemId , svcLONG value[] , svcUINT size)
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    switch (itemId) {

                 case SAL_IID_camera_BEE_clocks_parallel_1A :
                      if ( size > 202 ) {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        data.parallel_1A[count] = value[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_camera_BEE_clocks_parallel_1B :
                      if ( size > 202 ) {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        data.parallel_1B[count] = value[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_camera_BEE_clocks_parallel_2A :
                      if ( size > 202 ) {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        data.parallel_2A[count] = value[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_camera_BEE_clocks_parallel_2B :
                      if ( size > 202 ) {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        data.parallel_2B[count] = value[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_camera_BEE_clocks_serial_1A :
                      if ( size > 202 ) {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        data.serial_1A[count] = value[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_camera_BEE_clocks_serial_1B :
                      if ( size > 202 ) {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        data.serial_1B[count] = value[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_camera_BEE_clocks_serial_2A :
                      if ( size > 202 ) {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        data.serial_2A[count] = value[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_camera_BEE_clocks_serial_2B :
                      if ( size > 202 ) {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        data.serial_2B[count] = value[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_camera_BEE_clocks_serial_3A :
                      if ( size > 202 ) {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        data.serial_3A[count] = value[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_camera_BEE_clocks_serial_3B :
                      if ( size > 202 ) {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        data.serial_3B[count] = value[count];
                      }
                      result = SAL__OK;
                      break;

	    }
	    return result;
	}

       svcRTN salcamera_BEE_clocks::setItemStr ( svcIID itemId , svcCHAR *textValue)
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    
	    switch (itemId) {

	    }
	    return result;
	}

       svcRTN salcamera_BEE_clocks::getItemStr ( svcIID itemId , svcCHAR *textValue)
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    
	    switch (itemId) {

	    }
	    return result;
	}
