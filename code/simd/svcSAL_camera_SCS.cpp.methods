
	svcRTN salcamera_SCS::getItem ( svcIID itemId , svcULONG &value )
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    switch (itemId) {

                 case SAL_IID_camera_SCS_flags :
                      value = data.flags;
                      result = SAL__OK;
                      break;

	    }
	    return result;
	}
	


	svcRTN salcamera_SCS::setItem ( svcIID itemId , svcULONG &value )
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    switch (itemId) {

                 case SAL_IID_camera_SCS_flags :
                      data.flags = value;
                      result = SAL__OK;
                      break;

	    }
	    return result;
	}
	


       svcRTN salcamera_SCS::setItemStr ( svcIID itemId , svcCHAR *textValue)
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    
	    switch (itemid) {

                 case SAL_IID_camera_SCS_flags :
                      sscanf(textValue,"%ld",&data.flags);
                      result = SAL__OK;
                      break;

	    }
	    return result;
	}

       svcRTN salcamera_SCS::getItemStr ( svcIID itemId , svcCHAR *textValue)
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    
	    switch (itemid) {

                 case SAL_IID_camera_SCS_flags :
                      sprintf(textValue,"%ld",data.flags);
                      result = SAL__OK;
                      break;

	    }
	    return result;
	}

	svcRTN salcamera_SCS::getItem ( svcIID itemId , (svcCHAR *)value )
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    switch (itemId) {
	    


                 case SAL_IID_camera_SCS_algorithm :
                      strncpy(value, data.algorithm, 32);
                      result = SAL__OK;
                      break;


	    }
	    return result;
	}
	


	svcRTN salcamera_SCS::setItem ( svcIID itemId , (svcCHAR *)value )
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    switch (itemId) {
	    


                 case SAL_IID_camera_SCS_algorithm :
                      strncpy(data.algorithm, value, 32);
                      result = SAL__OK;
                      break;


	    }
	    return result;
	}
	


       svcRTN salcamera_SCS::setItemStr ( svcIID itemId , svcCHAR *textValue)
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    
	    switch (itemid) {

                 case SAL_IID_camera_SCS_flags :
                      sscanf(textValue,"%ld",&data.flags);
                      result = SAL__OK;
                      break;

	    }
	    return result;
	}

       svcRTN salcamera_SCS::getItemStr ( svcIID itemId , svcCHAR *textValue)
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    
	    switch (itemid) {

                 case SAL_IID_camera_SCS_flags :
                      sprintf(textValue,"%ld",data.flags);
                      result = SAL__OK;
                      break;

	    }
	    return result;
	}

	svcRTN salcamera_SCS::getItem ( svcIID itemId , svcFLOAT &value, svcUINT size)
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    switch (itemId) {

                 case SAL_IID_camera_SCS_close_profile :
                      if { size > 1025 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        value[count] = data.close_profile[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_camera_SCS_open_profile :
                      if { size > 1025 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        value[count] = data.open_profile[count];
                      }
                      result = SAL__OK;
                      break;

	    }
	    return result;
	}

 	svcRTN salcamera_SCS::setItem ( svcIID itemId , svcFLOAT &value , svcUINT size)
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    switch (itemId) {

                 case SAL_IID_camera_SCS_close_profile :
                      if { size > 1025 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        data.close_profile[count] = value[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_camera_SCS_open_profile :
                      if { size > 1025 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        data.open_profile[count] = value[count];
                      }
                      result = SAL__OK;
                      break;

	    }
	    return result;
	}

       svcRTN salcamera_SCS::setItemStr ( svcIID itemId , svcCHAR *textValue)
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    
	    switch (itemid) {

                 case SAL_IID_camera_SCS_flags :
                      sscanf(textValue,"%ld",&data.flags);
                      result = SAL__OK;
                      break;

	    }
	    return result;
	}

       svcRTN salcamera_SCS::getItemStr ( svcIID itemId , svcCHAR *textValue)
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    
	    switch (itemid) {

                 case SAL_IID_camera_SCS_flags :
                      sprintf(textValue,"%ld",data.flags);
                      result = SAL__OK;
                      break;

	    }
	    return result;
	}
