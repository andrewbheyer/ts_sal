
	svcRTN salhexapod_Metrology::getItem ( svcIID itemId , svcSHORT value[], svcUINT size)
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    switch (itemId) {

                 case SAL_IID_hexapod_Metrology_status :
                      if ( size > 19 ) {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        value[count] = data.status[count];
                      }
                      result = SAL__OK;
                      break;

	    }
	    return result;
	}

 	svcRTN salhexapod_Metrology::setItem ( svcIID itemId , svcSHORT value[] , svcUINT size)
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    switch (itemId) {

                 case SAL_IID_hexapod_Metrology_status :
                      if ( size > 19 ) {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        data.status[count] = value[count];
                      }
                      result = SAL__OK;
                      break;

	    }
	    return result;
	}

	svcRTN salhexapod_Metrology::getItem ( svcIID itemId , svcLONG value[], svcUINT size)
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    switch (itemId) {

                 case SAL_IID_hexapod_Metrology_distance :
                      if ( size > 19 ) {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        value[count] = data.distance[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_hexapod_Metrology_error :
                      if ( size > 19 ) {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        value[count] = data.error[count];
                      }
                      result = SAL__OK;
                      break;

	    }
	    return result;
	}

 	svcRTN salhexapod_Metrology::setItem ( svcIID itemId , svcLONG value[] , svcUINT size)
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    switch (itemId) {

                 case SAL_IID_hexapod_Metrology_distance :
                      if ( size > 19 ) {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        data.distance[count] = value[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_hexapod_Metrology_error :
                      if ( size > 19 ) {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        data.error[count] = value[count];
                      }
                      result = SAL__OK;
                      break;

	    }
	    return result;
	}

       svcRTN salhexapod_Metrology::setItemStr ( svcIID itemId , svcCHAR *textValue)
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    
	    switch (itemId) {

	    }
	    return result;
	}

       svcRTN salhexapod_Metrology::getItemStr ( svcIID itemId , svcCHAR *textValue)
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    
	    switch (itemId) {

	    }
	    return result;
	}
