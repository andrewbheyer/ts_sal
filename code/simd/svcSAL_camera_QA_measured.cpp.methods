
	svcRTN salcamera_QA_measured::getItem ( svcIID itemId , svcFLT &value, svcUINT size)
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    switch (itemId) {

                 case SAL_IID_camera_QA_measured_metric1 :
                      if { size > 133 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        value[count] = data.metric1[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_camera_QA_measured_metric2 :
                      if { size > 133 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        value[count] = data.metric2[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_camera_QA_measured_metric3 :
                      if { size > 133 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        value[count] = data.metric3[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_camera_QA_measured_metric4 :
                      if { size > 133 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        value[count] = data.metric4[count];
                      }
                      result = SAL__OK;
                      break;

	    }
	    return result;
	}

 	svcRTN salcamera_QA_measured::setItem ( svcIID itemId , svcFLT &value , svcUINT size)
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    switch (itemId) {

                 case SAL_IID_camera_QA_measured_metric1 :
                      if { size > 133 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        data.metric1[count] = value[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_camera_QA_measured_metric2 :
                      if { size > 133 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        data.metric2[count] = value[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_camera_QA_measured_metric3 :
                      if { size > 133 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        data.metric3[count] = value[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_camera_QA_measured_metric4 :
                      if { size > 133 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        data.metric4[count] = value[count];
                      }
                      result = SAL__OK;
                      break;

	    }
	    return result;
	}

       svcRTN salcamera_QA_measured::setItemStr ( svcIID itemId , svcCHAR *textValue)
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    
	    switch (itemid) {

	    }
	    return result;
	}

       svcRTN salcamera_QA_measured::getItemStr ( svcIID itemId , svcCHAR *textValue)
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    
	    switch (itemid) {

	    }
	    return result;
	}
