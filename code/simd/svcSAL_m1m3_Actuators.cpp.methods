
	svcRTN salm1m3_Actuators::getItem ( svcIID itemId , svcLONG &value, svcUINT size)
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    switch (itemId) {

                 case SAL_IID_m1m3_Actuators_error :
                      if { size > 121 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        value[count] = data.error[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_m1m3_Actuators_position :
                      if { size > 121 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        value[count] = data.position[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_m1m3_Actuators_setpoint :
                      if { size > 121 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        value[count] = data.setpoint[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_m1m3_Actuators_status :
                      if { size > 121 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        value[count] = data.status[count];
                      }
                      result = SAL__OK;
                      break;

	    }
	    return result;
	}

 	svcRTN salm1m3_Actuators::setItem ( svcIID itemId , svcLONG &value , svcUINT size)
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    switch (itemId) {

                 case SAL_IID_m1m3_Actuators_error :
                      if { size > 121 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        data.error[count] = value[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_m1m3_Actuators_position :
                      if { size > 121 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        data.position[count] = value[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_m1m3_Actuators_setpoint :
                      if { size > 121 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        data.setpoint[count] = value[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_m1m3_Actuators_status :
                      if { size > 121 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        data.status[count] = value[count];
                      }
                      result = SAL__OK;
                      break;

	    }
	    return result;
	}

       svcRTN salm1m3_Actuators::setItemStr ( svcIID itemId , svcCHAR *textValue)
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    
	    switch (itemid) {

	    }
	    return result;
	}

       svcRTN salm1m3_Actuators::getItemStr ( svcIID itemId , svcCHAR *textValue)
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    
	    switch (itemid) {

	    }
	    return result;
	}

	svcRTN salm1m3_Actuators::getItem ( svcIID itemId , svcFLT &value, svcUINT size)
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    switch (itemId) {

                 case SAL_IID_m1m3_Actuators_cyltemp :
                      if { size > 121 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        value[count] = data.cyltemp[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_m1m3_Actuators_envtemp :
                      if { size > 121 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        value[count] = data.envtemp[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_m1m3_Actuators_lvdtcorr :
                      if { size > 121 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        value[count] = data.lvdtcorr[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_m1m3_Actuators_pressure :
                      if { size > 121 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        value[count] = data.pressure[count];
                      }
                      result = SAL__OK;
                      break;

	    }
	    return result;
	}

 	svcRTN salm1m3_Actuators::setItem ( svcIID itemId , svcFLT &value , svcUINT size)
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    switch (itemId) {

                 case SAL_IID_m1m3_Actuators_cyltemp :
                      if { size > 121 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        data.cyltemp[count] = value[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_m1m3_Actuators_envtemp :
                      if { size > 121 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        data.envtemp[count] = value[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_m1m3_Actuators_lvdtcorr :
                      if { size > 121 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        data.lvdtcorr[count] = value[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_m1m3_Actuators_pressure :
                      if { size > 121 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        data.pressure[count] = value[count];
                      }
                      result = SAL__OK;
                      break;

	    }
	    return result;
	}

       svcRTN salm1m3_Actuators::setItemStr ( svcIID itemId , svcCHAR *textValue)
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    
	    switch (itemid) {

	    }
	    return result;
	}

       svcRTN salm1m3_Actuators::getItemStr ( svcIID itemId , svcCHAR *textValue)
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    
	    switch (itemid) {

	    }
	    return result;
	}
