
	svcRTN salm1m3_ActuatorSample::getItem ( svcIID itemId , svcSHORT &value )
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    switch (itemId) {

                 case SAL_IID_m1m3_ActuatorSample_actuatorID :
                      value = data.actuatorID;
                      result = SAL__OK;
                      break;

	    }
	    return result;
	}
	


	svcRTN salm1m3_ActuatorSample::setItem ( svcIID itemId , svcSHORT &value )
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    switch (itemId) {

                 case SAL_IID_m1m3_ActuatorSample_actuatorID :
                      data.actuatorID = value;
                      result = SAL__OK;
                      break;

	    }
	    return result;
	}
	


       svcRTN salm1m3_ActuatorSample::setItemStr ( svcIID itemId , svcCHAR *textValue)
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    
	    switch (itemid) {

                 case SAL_IID_m1m3_ActuatorSample_actuatorID :
                      sscanf(textValue,"%d",&data.actuatorID);
                      result = SAL__OK;
                      break;

	    }
	    return result;
	}

       svcRTN salm1m3_ActuatorSample::getItemStr ( svcIID itemId , svcCHAR *textValue)
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    
	    switch (itemid) {

                 case SAL_IID_m1m3_ActuatorSample_actuatorID :
                      sprintf(textValue,"%d",data.actuatorID);
                      result = SAL__OK;
                      break;

	    }
	    return result;
	}

	svcRTN salm1m3_ActuatorSample::getItem ( svcIID itemId , svcLONG &value, svcUINT size)
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    switch (itemId) {

                 case SAL_IID_m1m3_ActuatorSample_error :
                      if { size > 101 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        value[count] = data.error[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_m1m3_ActuatorSample_position :
                      if { size > 101 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        value[count] = data.position[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_m1m3_ActuatorSample_setpoint :
                      if { size > 101 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        value[count] = data.setpoint[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_m1m3_ActuatorSample_status :
                      if { size > 101 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        value[count] = data.status[count];
                      }
                      result = SAL__OK;
                      break;

	    }
	    return result;
	}

 	svcRTN salm1m3_ActuatorSample::setItem ( svcIID itemId , svcLONG &value , svcUINT size)
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    switch (itemId) {

                 case SAL_IID_m1m3_ActuatorSample_error :
                      if { size > 101 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        data.error[count] = value[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_m1m3_ActuatorSample_position :
                      if { size > 101 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        data.position[count] = value[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_m1m3_ActuatorSample_setpoint :
                      if { size > 101 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        data.setpoint[count] = value[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_m1m3_ActuatorSample_status :
                      if { size > 101 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        data.status[count] = value[count];
                      }
                      result = SAL__OK;
                      break;

	    }
	    return result;
	}

       svcRTN salm1m3_ActuatorSample::setItemStr ( svcIID itemId , svcCHAR *textValue)
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    
	    switch (itemid) {

                 case SAL_IID_m1m3_ActuatorSample_actuatorID :
                      sscanf(textValue,"%d",&data.actuatorID);
                      result = SAL__OK;
                      break;

	    }
	    return result;
	}

       svcRTN salm1m3_ActuatorSample::getItemStr ( svcIID itemId , svcCHAR *textValue)
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    
	    switch (itemid) {

                 case SAL_IID_m1m3_ActuatorSample_actuatorID :
                      sprintf(textValue,"%d",data.actuatorID);
                      result = SAL__OK;
                      break;

	    }
	    return result;
	}
