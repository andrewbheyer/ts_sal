
	svcRTN salocs_scheduler_targets::getItem ( svcIID itemId , svcLONG &value, svcUINT size)
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    switch (itemId) {

                 case SAL_IID_ocs_scheduler_targets_filter :
                      if { size > 11 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        value[count] = data.filter[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_ocs_scheduler_targets_numexp :
                      if { size > 11 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        value[count] = data.numexp[count];
                      }
                      result = SAL__OK;
                      break;

	    }
	    return result;
	}

 	svcRTN salocs_scheduler_targets::setItem ( svcIID itemId , svcLONG &value , svcUINT size)
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    switch (itemId) {

                 case SAL_IID_ocs_scheduler_targets_filter :
                      if { size > 11 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        data.filter[count] = value[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_ocs_scheduler_targets_numexp :
                      if { size > 11 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        data.numexp[count] = value[count];
                      }
                      result = SAL__OK;
                      break;

	    }
	    return result;
	}

       svcRTN salocs_scheduler_targets::setItemStr ( svcIID itemId , svcCHAR *textValue)
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    
	    switch (itemid) {

	    }
	    return result;
	}

       svcRTN salocs_scheduler_targets::getItemStr ( svcIID itemId , svcCHAR *textValue)
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    
	    switch (itemid) {

	    }
	    return result;
	}

	svcRTN salocs_scheduler_targets::getItem ( svcIID itemId , svcDOUBLE &value, svcUINT size)
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    switch (itemId) {

                 case SAL_IID_ocs_scheduler_targets_airmass :
                      if { size > 11 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        value[count] = data.airmass[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_ocs_scheduler_targets_catid :
                      if { size > 11 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        value[count] = data.catid[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_ocs_scheduler_targets_dec :
                      if { size > 11 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        value[count] = data.dec[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_ocs_scheduler_targets_ra :
                      if { size > 11 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        value[count] = data.ra[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_ocs_scheduler_targets_rotangle :
                      if { size > 11 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        value[count] = data.rotangle[count];
                      }
                      result = SAL__OK;
                      break;

	    }
	    return result;
	}

 	svcRTN salocs_scheduler_targets::setItem ( svcIID itemId , svcDOUBLE &value , svcUINT size)
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    switch (itemId) {

                 case SAL_IID_ocs_scheduler_targets_airmass :
                      if { size > 11 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        data.airmass[count] = value[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_ocs_scheduler_targets_catid :
                      if { size > 11 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        data.catid[count] = value[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_ocs_scheduler_targets_dec :
                      if { size > 11 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        data.dec[count] = value[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_ocs_scheduler_targets_ra :
                      if { size > 11 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        data.ra[count] = value[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_ocs_scheduler_targets_rotangle :
                      if { size > 11 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        data.rotangle[count] = value[count];
                      }
                      result = SAL__OK;
                      break;

	    }
	    return result;
	}

       svcRTN salocs_scheduler_targets::setItemStr ( svcIID itemId , svcCHAR *textValue)
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    
	    switch (itemid) {

	    }
	    return result;
	}

       svcRTN salocs_scheduler_targets::getItemStr ( svcIID itemId , svcCHAR *textValue)
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    
	    switch (itemid) {

	    }
	    return result;
	}
