//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: TopicIdDcps.h
//  Source: ./gen/TopicIdDcps.idl
//  Generated: Fri May 13 14:33:48 2011
//  OpenSplice V5.4.1OSS
//  
//******************************************************************
#ifndef _TOPICIDDCPS_H_
#define _TOPICIDDCPS_H_

#include "sacpp_mapping.h"
#include "sacpp_DDS_DCPS.h"
#include "dds_dcps_interfaces.h"
#include "dds_builtinTopics.h"
#include "dds_dcps_builtintopics.h"
#include "TopicId.h"
struct TopicId;

class TopicIdTypeSupportInterface;

typedef TopicIdTypeSupportInterface * TopicIdTypeSupportInterface_ptr;
typedef DDS_DCPSInterface_var < TopicIdTypeSupportInterface> TopicIdTypeSupportInterface_var;
typedef DDS_DCPSInterface_out < TopicIdTypeSupportInterface> TopicIdTypeSupportInterface_out;


class TopicIdDataWriter;

typedef TopicIdDataWriter * TopicIdDataWriter_ptr;
typedef DDS_DCPSInterface_var < TopicIdDataWriter> TopicIdDataWriter_var;
typedef DDS_DCPSInterface_out < TopicIdDataWriter> TopicIdDataWriter_out;


class TopicIdDataReader;

typedef TopicIdDataReader * TopicIdDataReader_ptr;
typedef DDS_DCPSInterface_var < TopicIdDataReader> TopicIdDataReader_var;
typedef DDS_DCPSInterface_out < TopicIdDataReader> TopicIdDataReader_out;


class TopicIdDataReaderView;

typedef TopicIdDataReaderView * TopicIdDataReaderView_ptr;
typedef DDS_DCPSInterface_var < TopicIdDataReaderView> TopicIdDataReaderView_var;
typedef DDS_DCPSInterface_out < TopicIdDataReaderView> TopicIdDataReaderView_out;


struct TopicIdSeq_uniq_ {};
typedef DDS_DCPSUVLSeq < TopicId, struct TopicIdSeq_uniq_> TopicIdSeq;
typedef DDS_DCPSSequence_var < TopicIdSeq> TopicIdSeq_var;
typedef DDS_DCPSSequence_out < TopicIdSeq> TopicIdSeq_out;
class TopicIdTypeSupportInterface
:
   virtual public DDS::TypeSupport
{ 
public:
   typedef TopicIdTypeSupportInterface_ptr _ptr_type;
   typedef TopicIdTypeSupportInterface_var _var_type;

   static TopicIdTypeSupportInterface_ptr _duplicate (TopicIdTypeSupportInterface_ptr obj);
   DDS::Boolean _local_is_a (const char * id);

   static TopicIdTypeSupportInterface_ptr _narrow (DDS::Object_ptr obj);
   static TopicIdTypeSupportInterface_ptr _unchecked_narrow (DDS::Object_ptr obj);
   static TopicIdTypeSupportInterface_ptr _nil () { return 0; }
   static const char * _local_id;
   TopicIdTypeSupportInterface_ptr _this () { return this; }


protected:
   TopicIdTypeSupportInterface () {};
   ~TopicIdTypeSupportInterface () {};
private:
   TopicIdTypeSupportInterface (const TopicIdTypeSupportInterface &);
   TopicIdTypeSupportInterface & operator = (const TopicIdTypeSupportInterface &);
};

class TopicIdDataWriter
:
   virtual public DDS::DataWriter
{ 
public:
   typedef TopicIdDataWriter_ptr _ptr_type;
   typedef TopicIdDataWriter_var _var_type;

   static TopicIdDataWriter_ptr _duplicate (TopicIdDataWriter_ptr obj);
   DDS::Boolean _local_is_a (const char * id);

   static TopicIdDataWriter_ptr _narrow (DDS::Object_ptr obj);
   static TopicIdDataWriter_ptr _unchecked_narrow (DDS::Object_ptr obj);
   static TopicIdDataWriter_ptr _nil () { return 0; }
   static const char * _local_id;
   TopicIdDataWriter_ptr _this () { return this; }

   virtual DDS::InstanceHandle_t register_instance (const TopicId& instance_data) = 0;
   virtual DDS::InstanceHandle_t register_instance_w_timestamp (const TopicId& instance_data, const DDS::Time_t& source_timestamp) = 0;
   virtual DDS::ReturnCode_t unregister_instance (const TopicId& instance_data, DDS::InstanceHandle_t handle) = 0;
   virtual DDS::ReturnCode_t unregister_instance_w_timestamp (const TopicId& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
   virtual DDS::ReturnCode_t write (const TopicId& instance_data, DDS::InstanceHandle_t handle) = 0;
   virtual DDS::ReturnCode_t write_w_timestamp (const TopicId& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
   virtual DDS::ReturnCode_t dispose (const TopicId& instance_data, DDS::InstanceHandle_t handle) = 0;
   virtual DDS::ReturnCode_t dispose_w_timestamp (const TopicId& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
   virtual DDS::ReturnCode_t writedispose (const TopicId& instance_data, DDS::InstanceHandle_t handle) = 0;
   virtual DDS::ReturnCode_t writedispose_w_timestamp (const TopicId& instance_data, DDS::InstanceHandle_t handle, const DDS::Time_t& source_timestamp) = 0;
   virtual DDS::ReturnCode_t get_key_value (TopicId& key_holder, DDS::InstanceHandle_t handle) = 0;
   virtual DDS::InstanceHandle_t lookup_instance (const TopicId& instance_data) = 0;

protected:
   TopicIdDataWriter () {};
   ~TopicIdDataWriter () {};
private:
   TopicIdDataWriter (const TopicIdDataWriter &);
   TopicIdDataWriter & operator = (const TopicIdDataWriter &);
};

class TopicIdDataReader
:
   virtual public DDS::DataReader
{ 
public:
   typedef TopicIdDataReader_ptr _ptr_type;
   typedef TopicIdDataReader_var _var_type;

   static TopicIdDataReader_ptr _duplicate (TopicIdDataReader_ptr obj);
   DDS::Boolean _local_is_a (const char * id);

   static TopicIdDataReader_ptr _narrow (DDS::Object_ptr obj);
   static TopicIdDataReader_ptr _unchecked_narrow (DDS::Object_ptr obj);
   static TopicIdDataReader_ptr _nil () { return 0; }
   static const char * _local_id;
   TopicIdDataReader_ptr _this () { return this; }

   virtual DDS::ReturnCode_t read (TopicIdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t take (TopicIdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t read_w_condition (TopicIdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::ReturnCode_t take_w_condition (TopicIdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::ReturnCode_t read_next_sample (TopicId& received_data, DDS::SampleInfo& sample_info) = 0;
   virtual DDS::ReturnCode_t take_next_sample (TopicId& received_data, DDS::SampleInfo& sample_info) = 0;
   virtual DDS::ReturnCode_t read_instance (TopicIdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t take_instance (TopicIdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t read_next_instance (TopicIdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t take_next_instance (TopicIdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t read_next_instance_w_condition (TopicIdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::ReturnCode_t take_next_instance_w_condition (TopicIdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::ReturnCode_t return_loan (TopicIdSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
   virtual DDS::ReturnCode_t get_key_value (TopicId& key_holder, DDS::InstanceHandle_t handle) = 0;
   virtual DDS::InstanceHandle_t lookup_instance (const TopicId& instance) = 0;

protected:
   TopicIdDataReader () {};
   ~TopicIdDataReader () {};
private:
   TopicIdDataReader (const TopicIdDataReader &);
   TopicIdDataReader & operator = (const TopicIdDataReader &);
};

class TopicIdDataReaderView
:
   virtual public DDS::DataReaderView
{ 
public:
   typedef TopicIdDataReaderView_ptr _ptr_type;
   typedef TopicIdDataReaderView_var _var_type;

   static TopicIdDataReaderView_ptr _duplicate (TopicIdDataReaderView_ptr obj);
   DDS::Boolean _local_is_a (const char * id);

   static TopicIdDataReaderView_ptr _narrow (DDS::Object_ptr obj);
   static TopicIdDataReaderView_ptr _unchecked_narrow (DDS::Object_ptr obj);
   static TopicIdDataReaderView_ptr _nil () { return 0; }
   static const char * _local_id;
   TopicIdDataReaderView_ptr _this () { return this; }

   virtual DDS::ReturnCode_t read (TopicIdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t take (TopicIdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t read_w_condition (TopicIdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::ReturnCode_t take_w_condition (TopicIdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::ReturnCode_t read_next_sample (TopicId& received_data, DDS::SampleInfo& sample_info) = 0;
   virtual DDS::ReturnCode_t take_next_sample (TopicId& received_data, DDS::SampleInfo& sample_info) = 0;
   virtual DDS::ReturnCode_t read_instance (TopicIdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t take_instance (TopicIdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t read_next_instance (TopicIdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t take_next_instance (TopicIdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::SampleStateMask sample_states, DDS::ViewStateMask view_states, DDS::InstanceStateMask instance_states) = 0;
   virtual DDS::ReturnCode_t read_next_instance_w_condition (TopicIdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::ReturnCode_t take_next_instance_w_condition (TopicIdSeq& received_data, DDS::SampleInfoSeq& info_seq, DDS::Long max_samples, DDS::InstanceHandle_t a_handle, DDS::ReadCondition_ptr a_condition) = 0;
   virtual DDS::ReturnCode_t return_loan (TopicIdSeq& received_data, DDS::SampleInfoSeq& info_seq) = 0;
   virtual DDS::ReturnCode_t get_key_value (TopicId& key_holder, DDS::InstanceHandle_t handle) = 0;
   virtual DDS::InstanceHandle_t lookup_instance (const TopicId& instance) = 0;

protected:
   TopicIdDataReaderView () {};
   ~TopicIdDataReaderView () {};
private:
   TopicIdDataReaderView (const TopicIdDataReaderView &);
   TopicIdDataReaderView & operator = (const TopicIdDataReaderView &);
};

template <>
DDS::BuiltinTopicKey_t_slice* DDS_DCPS_ArrayHelper < DDS::BuiltinTopicKey_t, DDS::BuiltinTopicKey_t_slice, DDS::BuiltinTopicKey_t_uniq_>::alloc ();
template <>
void DDS_DCPS_ArrayHelper < DDS::BuiltinTopicKey_t, DDS::BuiltinTopicKey_t_slice, DDS::BuiltinTopicKey_t_uniq_>::copy (DDS::BuiltinTopicKey_t_slice *to, const DDS::BuiltinTopicKey_t_slice* from);
template <>
void DDS_DCPS_ArrayHelper < DDS::BuiltinTopicKey_t, DDS::BuiltinTopicKey_t_slice, DDS::BuiltinTopicKey_t_uniq_>::free (DDS::BuiltinTopicKey_t_slice *ptr);




#endif 
