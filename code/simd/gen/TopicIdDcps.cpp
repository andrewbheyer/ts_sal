//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: TopicIdDcps.cpp
//  Source: ./gen/TopicIdDcps.idl
//  Generated: Fri May 13 14:33:48 2011
//  OpenSplice V5.4.1OSS
//  
//******************************************************************

#include "TopicIdDcps.h"

#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUVLSeq < TopicId, struct TopicIdSeq_uniq_>;
#endif

const char * TopicIdTypeSupportInterface::_local_id = "IDL:TopicIdTypeSupportInterface:1.0";

TopicIdTypeSupportInterface_ptr TopicIdTypeSupportInterface::_duplicate (TopicIdTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean TopicIdTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, TopicIdTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

TopicIdTypeSupportInterface_ptr TopicIdTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   TopicIdTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (TopicIdTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < TopicIdTypeSupportInterface_ptr> (p);
      result->m_count++;
   }
   return result;
}

TopicIdTypeSupportInterface_ptr TopicIdTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   TopicIdTypeSupportInterface_ptr result;
   result = dynamic_cast < TopicIdTypeSupportInterface_ptr> (p);
   result->m_count++;
   return result;
}

const char * TopicIdDataWriter::_local_id = "IDL:TopicIdDataWriter:1.0";

TopicIdDataWriter_ptr TopicIdDataWriter::_duplicate (TopicIdDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean TopicIdDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, TopicIdDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

TopicIdDataWriter_ptr TopicIdDataWriter::_narrow (DDS::Object_ptr p)
{
   TopicIdDataWriter_ptr result = NULL;
   if (p && p->_is_a (TopicIdDataWriter::_local_id))
   {
      result = dynamic_cast < TopicIdDataWriter_ptr> (p);
      result->m_count++;
   }
   return result;
}

TopicIdDataWriter_ptr TopicIdDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   TopicIdDataWriter_ptr result;
   result = dynamic_cast < TopicIdDataWriter_ptr> (p);
   result->m_count++;
   return result;
}

const char * TopicIdDataReader::_local_id = "IDL:TopicIdDataReader:1.0";

TopicIdDataReader_ptr TopicIdDataReader::_duplicate (TopicIdDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean TopicIdDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, TopicIdDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

TopicIdDataReader_ptr TopicIdDataReader::_narrow (DDS::Object_ptr p)
{
   TopicIdDataReader_ptr result = NULL;
   if (p && p->_is_a (TopicIdDataReader::_local_id))
   {
      result = dynamic_cast < TopicIdDataReader_ptr> (p);
      result->m_count++;
   }
   return result;
}

TopicIdDataReader_ptr TopicIdDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   TopicIdDataReader_ptr result;
   result = dynamic_cast < TopicIdDataReader_ptr> (p);
   result->m_count++;
   return result;
}

const char * TopicIdDataReaderView::_local_id = "IDL:TopicIdDataReaderView:1.0";

TopicIdDataReaderView_ptr TopicIdDataReaderView::_duplicate (TopicIdDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean TopicIdDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, TopicIdDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

TopicIdDataReaderView_ptr TopicIdDataReaderView::_narrow (DDS::Object_ptr p)
{
   TopicIdDataReaderView_ptr result = NULL;
   if (p && p->_is_a (TopicIdDataReaderView::_local_id))
   {
      result = dynamic_cast < TopicIdDataReaderView_ptr> (p);
      result->m_count++;
   }
   return result;
}

TopicIdDataReaderView_ptr TopicIdDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   TopicIdDataReaderView_ptr result;
   result = dynamic_cast < TopicIdDataReaderView_ptr> (p);
   result->m_count++;
   return result;
}



