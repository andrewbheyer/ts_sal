
	svcRTN salcamera_GAS::getItem ( svcIID itemId , (svcCHAR *)value )
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    switch (itemId) {
	    


                 case SAL_IID_camera_GAS_algorithm :
                      strncpy(value, data.algorithm, 32);
                      result = SAL__OK;
                      break;


	    }
	    return result;
	}
	


	svcRTN salcamera_GAS::setItem ( svcIID itemId , (svcCHAR *)value )
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    switch (itemId) {
	    


                 case SAL_IID_camera_GAS_algorithm :
                      strncpy(data.algorithm, value, 32);
                      result = SAL__OK;
                      break;


	    }
	    return result;
	}
	


       svcRTN salcamera_GAS::setItemStr ( svcIID itemId , svcCHAR *textValue)
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    
	    switch (itemid) {

	    }
	    return result;
	}

       svcRTN salcamera_GAS::getItemStr ( svcIID itemId , svcCHAR *textValue)
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    
	    switch (itemid) {

	    }
	    return result;
	}

	svcRTN salcamera_GAS::getItem ( svcIID itemId , svcFLOAT &value, svcUINT size)
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    switch (itemId) {

                 case SAL_IID_camera_GAS_parameters :
                      if { size > 11 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        value[count] = data.parameters[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_camera_GAS_sampleData_00 :
                      if { size > 26 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        value[count] = data.sampleData_00[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_camera_GAS_sampleData_01 :
                      if { size > 26 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        value[count] = data.sampleData_01[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_camera_GAS_sampleData_10 :
                      if { size > 26 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        value[count] = data.sampleData_10[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_camera_GAS_sampleData_11 :
                      if { size > 26 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        value[count] = data.sampleData_11[count];
                      }
                      result = SAL__OK;
                      break;

	    }
	    return result;
	}

 	svcRTN salcamera_GAS::setItem ( svcIID itemId , svcFLOAT &value , svcUINT size)
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    switch (itemId) {

                 case SAL_IID_camera_GAS_parameters :
                      if { size > 11 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        data.parameters[count] = value[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_camera_GAS_sampleData_00 :
                      if { size > 26 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        data.sampleData_00[count] = value[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_camera_GAS_sampleData_01 :
                      if { size > 26 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        data.sampleData_01[count] = value[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_camera_GAS_sampleData_10 :
                      if { size > 26 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        data.sampleData_10[count] = value[count];
                      }
                      result = SAL__OK;
                      break;

                 case SAL_IID_camera_GAS_sampleData_11 :
                      if { size > 26 } {return SAL__INDEX_OUT_OF_RANGE;}
                      for (unsigned int count=0; count<size; count++) {
                        data.sampleData_11[count] = value[count];
                      }
                      result = SAL__OK;
                      break;

	    }
	    return result;
	}

       svcRTN salcamera_GAS::setItemStr ( svcIID itemId , svcCHAR *textValue)
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    
	    switch (itemid) {

	    }
	    return result;
	}

       svcRTN salcamera_GAS::getItemStr ( svcIID itemId , svcCHAR *textValue)
	{
	    svcRTN result = SAL__NOT_DEFINED;
	    
	    switch (itemid) {

	    }
	    return result;
	}
