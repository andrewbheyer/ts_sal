//******************************************************************
// 
//  Generated by IDL to C++ Translator
//  
//  File name: SALTopicDcps.cpp
//  Source: gen/SALTopicDcps.idl
//  Generated: Mon May 20 09:57:46 2013
//  OpenSplice V6.3.0
//  
//******************************************************************

#include "SALTopicDcps.h"

#if DDS_USE_EXPLICIT_TEMPLATES
template class DDS_DCPSUVLSeq < org::lsst::sal::SALTopicType, struct SALTopicTypeSeq_uniq_>;
#endif

const char * org::lsst::sal::SALTopicTypeTypeSupportInterface::_local_id = "IDL:org/lsst/sal/SALTopicTypeTypeSupportInterface:1.0";

org::lsst::sal::SALTopicTypeTypeSupportInterface_ptr org::lsst::sal::SALTopicTypeTypeSupportInterface::_duplicate (org::lsst::sal::SALTopicTypeTypeSupportInterface_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean org::lsst::sal::SALTopicTypeTypeSupportInterface::_local_is_a (const char * _id)
{
   if (strcmp (_id, org::lsst::sal::SALTopicTypeTypeSupportInterface::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::TypeSupport NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

org::lsst::sal::SALTopicTypeTypeSupportInterface_ptr org::lsst::sal::SALTopicTypeTypeSupportInterface::_narrow (DDS::Object_ptr p)
{
   org::lsst::sal::SALTopicTypeTypeSupportInterface_ptr result = NULL;
   if (p && p->_is_a (org::lsst::sal::SALTopicTypeTypeSupportInterface::_local_id))
   {
      result = dynamic_cast < org::lsst::sal::SALTopicTypeTypeSupportInterface_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

org::lsst::sal::SALTopicTypeTypeSupportInterface_ptr org::lsst::sal::SALTopicTypeTypeSupportInterface::_unchecked_narrow (DDS::Object_ptr p)
{
   org::lsst::sal::SALTopicTypeTypeSupportInterface_ptr result;
   result = dynamic_cast < org::lsst::sal::SALTopicTypeTypeSupportInterface_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * org::lsst::sal::SALTopicTypeDataWriter::_local_id = "IDL:org/lsst/sal/SALTopicTypeDataWriter:1.0";

org::lsst::sal::SALTopicTypeDataWriter_ptr org::lsst::sal::SALTopicTypeDataWriter::_duplicate (org::lsst::sal::SALTopicTypeDataWriter_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean org::lsst::sal::SALTopicTypeDataWriter::_local_is_a (const char * _id)
{
   if (strcmp (_id, org::lsst::sal::SALTopicTypeDataWriter::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataWriter NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

org::lsst::sal::SALTopicTypeDataWriter_ptr org::lsst::sal::SALTopicTypeDataWriter::_narrow (DDS::Object_ptr p)
{
   org::lsst::sal::SALTopicTypeDataWriter_ptr result = NULL;
   if (p && p->_is_a (org::lsst::sal::SALTopicTypeDataWriter::_local_id))
   {
      result = dynamic_cast < org::lsst::sal::SALTopicTypeDataWriter_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

org::lsst::sal::SALTopicTypeDataWriter_ptr org::lsst::sal::SALTopicTypeDataWriter::_unchecked_narrow (DDS::Object_ptr p)
{
   org::lsst::sal::SALTopicTypeDataWriter_ptr result;
   result = dynamic_cast < org::lsst::sal::SALTopicTypeDataWriter_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * org::lsst::sal::SALTopicTypeDataReader::_local_id = "IDL:org/lsst/sal/SALTopicTypeDataReader:1.0";

org::lsst::sal::SALTopicTypeDataReader_ptr org::lsst::sal::SALTopicTypeDataReader::_duplicate (org::lsst::sal::SALTopicTypeDataReader_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean org::lsst::sal::SALTopicTypeDataReader::_local_is_a (const char * _id)
{
   if (strcmp (_id, org::lsst::sal::SALTopicTypeDataReader::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReader NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

org::lsst::sal::SALTopicTypeDataReader_ptr org::lsst::sal::SALTopicTypeDataReader::_narrow (DDS::Object_ptr p)
{
   org::lsst::sal::SALTopicTypeDataReader_ptr result = NULL;
   if (p && p->_is_a (org::lsst::sal::SALTopicTypeDataReader::_local_id))
   {
      result = dynamic_cast < org::lsst::sal::SALTopicTypeDataReader_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

org::lsst::sal::SALTopicTypeDataReader_ptr org::lsst::sal::SALTopicTypeDataReader::_unchecked_narrow (DDS::Object_ptr p)
{
   org::lsst::sal::SALTopicTypeDataReader_ptr result;
   result = dynamic_cast < org::lsst::sal::SALTopicTypeDataReader_ptr> (p);
   if (result) result->m_count++;
   return result;
}

const char * org::lsst::sal::SALTopicTypeDataReaderView::_local_id = "IDL:org/lsst/sal/SALTopicTypeDataReaderView:1.0";

org::lsst::sal::SALTopicTypeDataReaderView_ptr org::lsst::sal::SALTopicTypeDataReaderView::_duplicate (org::lsst::sal::SALTopicTypeDataReaderView_ptr p)
{
   if (p) p->m_count++;
   return p;
}

DDS::Boolean org::lsst::sal::SALTopicTypeDataReaderView::_local_is_a (const char * _id)
{
   if (strcmp (_id, org::lsst::sal::SALTopicTypeDataReaderView::_local_id) == 0)
   {
      return true;
   }

   typedef DDS::DataReaderView NestedBase_1;

   if (NestedBase_1::_local_is_a (_id))
   {
      return true;
   }

   return false;
}

org::lsst::sal::SALTopicTypeDataReaderView_ptr org::lsst::sal::SALTopicTypeDataReaderView::_narrow (DDS::Object_ptr p)
{
   org::lsst::sal::SALTopicTypeDataReaderView_ptr result = NULL;
   if (p && p->_is_a (org::lsst::sal::SALTopicTypeDataReaderView::_local_id))
   {
      result = dynamic_cast < org::lsst::sal::SALTopicTypeDataReaderView_ptr> (p);
      if (result) result->m_count++;
   }
   return result;
}

org::lsst::sal::SALTopicTypeDataReaderView_ptr org::lsst::sal::SALTopicTypeDataReaderView::_unchecked_narrow (DDS::Object_ptr p)
{
   org::lsst::sal::SALTopicTypeDataReaderView_ptr result;
   result = dynamic_cast < org::lsst::sal::SALTopicTypeDataReaderView_ptr> (p);
   if (result) result->m_count++;
   return result;
}



