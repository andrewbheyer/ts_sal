/* SALTOPIC_DDS_commLib.c 	08/30/1999	NOAO */

/* 
 *  Developed 1998 by the National Optical Astronomy Observatories(*)
 *
 * (*) Operated by the Association of Universities for Research in
 *    Astronomy, Inc. (AURA) under cooperative agreement with the
 *    National Science Foundation.
 */

/*
 *  modification history
 *  --------------------
 *  01b 30aug99, rcr - Created.
 *  02a 05dec02, gsh - shared library for LabVIEW
 *  03a 11feb04, gsh - Multiple ports version
 *  03b 11feb04, gsh - Multithreaded version
 *  04a 30mar04, gsh - Modified for FIFO useage (rev8)
 *  05a 25may07, gsh - Modified to use DDS. Renamed as D_commLib.c
 */

/*------------------------------------------------------------------
 * commLib.c
 *
 *-----------------------------------------------------------------*/

#include <stdio.h>
#include <stdlib.h>
#include <sys/time.h>
#include <sys/times.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/select.h>
#include <unistd.h>
#include <sys/ioctl.h>
#include <termios.h>
#include <fcntl.h>
#include <errno.h>
#include <mqueue.h>
#include <math.h>
#include <assert.h>
#include <time.h>
#include <string.h>
#include "generic_DDS_commLib.h"

mqd_t msgid_DDSPUB;
extern int errno;

int LVcomm_init(void *occArray)
{				/* labVIEW initializes the occurrences */
				/* in a global style II array	       */
	int i; 
	int *occ_array;
	
	occ_array = *((int **) occArray);
	for (i = 1; i < 3; i++)
	{
		LV_serial[i].occ_read = (Occurrence) occ_array[2*i+1];
		LV_serial[i].occ_write = (Occurrence) occ_array[2*i+2];
		LV_serial[i].msgid_pub = -1;
		LV_serial[i].msgid_sub = -1;
		LV_serial[i].er.status = LVFALSE;
		LV_serial[i].er.code = 0;
		LV_serial[i].ew.status = LVFALSE;
		LV_serial[i].ew.code = 0;
	}
	
	return(0);
}


/*
	Open the connection to DDS publisher
*/

int LVcomm_open_pub(LStrHandle buf_pub)
{
	int lenp, err; 
	char name_pub[64];
	
        lenp = LStrLen(*buf_pub);
	memcpy(name_pub, *(char **) buf_pub+4, lenp);
	name_pub[lenp] = '\0';
	err = pub_new(name_pub);
	if (err < 0) return(-5);
	serial_DDS[err].msgid_pub = err;	
  	return (err);
}

/*
	Open the connection to DDS subscriber
*/

int LVcomm_open_sub(LStrHandle buf_sub)
{
	int lens, err; 
	char name_sub[64];
	
        lens = LStrLen(*buf_sub);
	memcpy(name_sub, *(char **) buf_sub+4, lens);
	name_sub[lens] = '\0';
	err = sub_new(name_sub);
	if (err < 0) return(-6);
	serial_DDS[err].msgid_sub = err;	
  	return (err);
}

/*
	DDS Read
*/
int LVcomm_read(int fd, int *key, int *type, int *subtype, int *length, 
		int *Psec, int *Pusec,
		int *Ssec, int *Susec, LStrHandle buf)
{
	int len, err;
	struct timeval ts;
	
	if (serial_DDS[fd].er.status == LVTRUE)
		return(serial_DDS[[fd].er.code);
	len = serial_DDS[fd].D_read.length;
	*key = serial_DDS[fd].D_read.key;
	*type = serial_DDS[fd].D_read.type;
	*subtype = serial_DDS[fd].D_read.sub_type;
	*length = serial_DDS[fd].D_read.length;
	*Psec = serial_DDS[fd].D_read.tpub.tv_sec;
	*Pusec = serial_DDS[fd].D_read.tpub.tv_usec;
	gettimeofday(&ts, NULL);
	*Ssec = ts.tv_sec;
	*Susec = ts.tv_usec;
	err = NumericArrayResize(uB, 1, &buf, len);
	if (!err)
	{
		LStrLen(*buf) = len;
		memcpy(*(char **) buf+4, serial_DDS[fd].D_read.msg, len);
		return(0);
	}
	else
		return(-1);
}

/*
	initialize send (write) operation
*/
int LVcomm_write(int fd, int key, int type, int subtype, int length, LStrHandle 
buf)
{
	int len;
	struct timeval tp;
	
	if (serial_DDS[fd].msgid_pub == -1) return(-1);

 	len = length;
	memcpy(serial_DDS[fd].D_read.msg, *(char **) buf+4, len);
	serial_DDS[fd].D_read.key = key;
	serial_DDS[fd].D_read.type = type;
	serial_DDS[fd].D_read.sub_type = subtype;
	serial_DDS[fd].D_read.length = length;
	gettimeofday(&tp, NULL);
	serial_DDS[fd].D_read.tpub.tv_sec = tp.tv_sec;
	serial_DDS[fd].D_read.tpub.tv_usec = tp.tv_usec;
	publishMsg(&(serial_DDS[fd].D_read));
	return(0);
}


