/* SALTOPIC_publisher.c

   A publication of data of type SALTOPIC

       
       
modification history
------------ ------- 

02-oct-09 GS - Open source version  
04-apr-10 GS - non daemon    
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "dds_dcps.h"
#include "SALTOPIC.h"
#include "SALTOPIC_Daemon.h"

extern DDS_DomainParticipantFactory dpf;
DDS_DomainParticipant pub_participant = NULL;
DDS_Publisher publisher = NULL;
char *pub_type_name = NULL;

extern DDS_DomainParticipant sub_participant;
extern DDS_Subscriber subscriber;
extern struct DDS_DataReaderListener *reader_listener;
extern char *sub_type_name;

static SALTOPICDataWriter SALTOPIC_writer[128];
static SALTOPIC *instances[128];
static DDS_InstanceHandle_t instance_handlers[128];


	
int SALTOPIC_pub_new(char *pname)
{
	DDS_TopicQos *reliable_topic_qos;
	DDS_ReturnCode_t status;
	SALTOPIC *SALTOPIC_msg;
	DDS_Topic topic;
    	DDS_InstanceHandle_t instance_handle;
	SALTOPICDataWriter writer;
	int n_fd_pub, n_fds;
	char name[64], token[128];

/*
					New publisher request.
					Generate the topic and the writer
*/
	strcpy(name, pname);
	if (newPub(name, &n_fd_pub, &n_fds) < 1) return(-1);

	reliable_topic_qos = DDS_TopicQos__alloc();
	status = DDS_DomainParticipant_get_default_topic_qos(
		pub_participant, reliable_topic_qos);
	reliable_topic_qos->reliability.kind = DDS_RELIABLE_RELIABILITY_QOS;
	status = DDS_DomainParticipant_set_default_topic_qos(
		pub_participant, reliable_topic_qos);
				
   	topic = DDS_DomainParticipant_create_topic(pub_participant, 
		name, pub_type_name, reliable_topic_qos, NULL,
        	DDS_ANY_STATUS);
	DDS_free(reliable_topic_qos);
	if (topic == NULL) 
	{
		return(-1);
    	}
    	writer = DDS_Publisher_create_datawriter(publisher, topic,
        	DDS_DATAWRITER_QOS_DEFAULT, NULL, 
		DDS_ANY_STATUS);
    	if (writer == NULL) 
	{
		return(-1);
    	}
	SALTOPIC_writer[n_fd_pub - 1] = writer;
			
	SALTOPIC_msg = SALTOPIC__alloc();
	SALTOPIC_msg->comm_key = n_fds;
	strcpy(token, "OK INIT");
	memcpy(SALTOPIC_msg->msg, token, strlen(token));
	instance_handle = SALTOPICDataWriter_register_instance(
		writer, SALTOPIC_msg);
    	instances[n_fd_pub - 1] = SALTOPIC_msg;
	instance_handlers[n_fd_pub - 1] = instance_handle;
	return(n_fds);
}


int SALTOPIC_sub_new(char *pname)
{
	DDS_TopicQos *reliable_topic_qos;
	DDS_ReturnCode_t status;
	SALTOPICDataReader reader;
	DDS_Topic topic;
	int n_fd_sub, n_fds;
	char name[64];

/*
					New subscriber request.
					Generate the topic and the reader
*/
	strcpy(name, pname);
	if (newSub(name, &n_fd_sub, &n_fds) < 1) return(-1);

	reliable_topic_qos = DDS_TopicQos__alloc();
	status = DDS_DomainParticipant_get_default_topic_qos(
		sub_participant, reliable_topic_qos);
	reliable_topic_qos->reliability.kind = DDS_RELIABLE_RELIABILITY_QOS;
	status = DDS_DomainParticipant_set_default_topic_qos(
		sub_participant, reliable_topic_qos);
				
	topic = DDS_DomainParticipant_create_topic (sub_participant,
		name, sub_type_name, reliable_topic_qos, NULL,
		DDS_ANY_STATUS);
	DDS_free(reliable_topic_qos);
	if (topic == NULL)
	{
		return(-1);
	}
    	reader = DDS_Subscriber_create_datareader(
        	subscriber, topic,
        	DDS_DATAREADER_QOS_DEFAULT, NULL,
		DDS_ANY_STATUS);
    	if (reader == NULL) 
	{
		return(-1);
 	}
	DDS_DataReader_set_listener(reader, reader_listener,
		DDS_DATA_AVAILABLE_STATUS);
	return(n_fds);
}

/*
	publish the message
*/

void SALTOPIC_publishMsg(SALTOPIC_ipc_st *lmsg)
{
	int j, k;
	DDS_ReturnCode_t status;
	
	k = lmsg->key;
	j = getPubFd(k);
	if (j < 0) return;
	instances[j]->comm_key = k;	
	memcpy(instances[j]->msg, lmsg, sizeof(SALTOPIC_ipc_st));
	status = SALTOPICDataWriter_write(SALTOPIC_writer[j], instances[j],
				instance_handlers[j]);
}

/*
	close DDS
*/

void closePubSub()
{
	publisher_shutdown(pub_participant);
	subscriber_shutdown(sub_participant);
}

	


					/* Delete all entities */
int publisher_shutdown(
    DDS_DomainParticipant *participant)
{
    DDS_ReturnCode_t retcode;
    int status = 0;

    if (participant != NULL) {
        retcode = DDS_DomainParticipant_delete_contained_entities(participant);
        if (retcode != DDS_RETCODE_OK) {
            printf("delete_contained_entities error %d\n", retcode);
            status = -1;
        }

        retcode = DDS_DomainParticipantFactory_delete_participant(
            dpf, participant);
        if (retcode != DDS_RETCODE_OK) {
            printf("delete_participant error %d\n", retcode);
            status = -1;
        }
    }

    return status;
}




int SALTOPIC_publisher_main()
{
	DDS_ReturnCode_t retcode;
	DDS_DomainId_t domainId = NULL;
        SALTOPICTypeSupport salPubMessageTS;
 
				/* Create participant */
		
    pub_participant = DDS_DomainParticipantFactory_create_participant(
        dpf, domainId, DDS_PARTICIPANT_QOS_DEFAULT,
        NULL, DDS_ANY_STATUS);
    if (pub_participant == NULL) {
        publisher_shutdown(pub_participant);
        return(-1);
    }

				/* Create Publisher */
			
    publisher = DDS_DomainParticipant_create_publisher(
        pub_participant, DDS_PUBLISHER_QOS_DEFAULT, NULL, DDS_ANY_STATUS);
    if (publisher == NULL) {
        publisher_shutdown(pub_participant);
        return(-1);
    }

				    /* Register type before creating topic 
				       The topic is created in the demon   */
				    
    salPubMessageTS = SALTOPICTypeSupport__alloc();				   
    pub_type_name = SALTOPICTypeSupport_get_type_name(salPubMessageTS);
    retcode = SALTOPICTypeSupport_register_type(salPubMessageTS,
        pub_participant, pub_type_name);
    if (retcode != DDS_RETCODE_OK) {
        publisher_shutdown(pub_participant);
        return(-1);
    }
    return(0);

}


