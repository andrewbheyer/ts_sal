/* SALTOPIC_DDS_commLib.c 	08/30/1999	NOAO */

/* 
 *  Developed 1998 by the National Optical Astronomy Observatories(*)
 *
 * (*) Operated by the Association of Universities for Research in
 *    Astronomy, Inc. (AURA) under cooperative agreement with the
 *    National Science Foundation.
 */

/*
 *  modification history
 *  --------------------
 *  01b 30aug99, rcr - Created.
 *  02a 05dec02, gsh - shared library for LabVIEW
 *  03a 11feb04, gsh - Multiple ports version
 *  03b 11feb04, gsh - Multithreaded version
 *  04a 30mar04, gsh - Modified for FIFO useage (rev8)
 *  05a 25may07, gsh - Modified to use DDS. Renamed as D_commLib.c
 */

/*------------------------------------------------------------------
 * commLib.c
 *
 *-----------------------------------------------------------------*/

#include <stdio.h>
#include <stdlib.h>
#include <sys/time.h>
#include <sys/times.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/select.h>
#include <unistd.h>
#include <sys/ioctl.h>
#include <termios.h>
#include <fcntl.h>
#include <errno.h>
#include <mqueue.h>
#include <math.h>
#include <assert.h>
#include <time.h>
#include <string.h>
#include "SALTOPIC_DDS_commLib.h" 

mqd_t msgid_DDSPUB;
extern int errno;

/*----------------------------------------------------------------------
 *	Local Variables
 *---------------------------------------------------------------------*/

static SALTOPIC_serial_st LV_serial[3];	/* ports structures		*/
SALTOPIC_serial_st serial_DDS[64];  	     /* DDS structures		*/




/*----------------------------------------------------------------------
 *	Local Function Prototypes
 *---------------------------------------------------------------------*/
 
void serial_read_SALTOPIC(serial_st *pack);	/* threaded read	*/
void serial_write_SALTOPIC(serial_st *pack);	/* threaded write	*/


/*----------------------------------------------------------------------
*
*	Wrappers for LabVIEW
*
*---------------------------------------------------------------------*/
/*
        initialize get (read) operation
*/
int LVcomm_get_ithr(int fd)
{
	if (LV_serial[fd].msgid_sub == -1) return(-1);

        sem_post(&(LV_serial[fd].sem_read));
        return(0);
}

/*
	end get (read) operation.
	this stage gets the actual data
*/
int LVcomm_get_ethr(int fd, int *key, int *type, int *length, int *Psec, int *Pusec,
		int *Ssec, int *Susec, LStrHandle buf)
{
	int len, err;
	struct timeval ts;
	
	if (LV_serial[fd].er.status == LVTRUE)
		return(LV_serial[fd].er.code);
	len = sizeof(SALTOPIC);
	*key = LV_serial[fd].D_read.private_host;
	*type = LV_serial[fd].D_read.private_origin;
	*length = sizeof(SALTOPIC);
	*Psec = LV_serial[fd].D_read.private_sndStamp[0];
	*Pusec = LV_serial[fd].D_read.private_sndStamp[1];
	gettimeofday(&ts, NULL);
	*Ssec = ts.tv_sec;
	*Susec = ts.tv_usec;
	err = NumericArrayResize(uB, 1, &buf, len);
	if (!err)
	{
		LStrLen(*buf) = len;
		memcpy(*(char **) buf+4, LV_serial[fd].D_read, len);
		return(0);
	}
	else
		return(-1);
}
/*
	initialize send (write) operation
*/
int LVcomm_send_ithr(int fd, int key, int type, int length, LStrHandle buf)
{
	int len;
	struct timeval tp;
	
	if (LV_serial[fd].msgid_pub == -1) return(-1);

 	len = length;
	memcpy(LV_serial[fd].D_write, *(char **) buf+4, len);
	LV_serial[fd].D_write.key = key;
	LV_serial[fd].D_write.type = type;
	LV_serial[fd].D_write.length = length;
	gettimeofday(&tp, NULL);
	LV_serial[fd].D_write.private_sndStamp[0] = tp.tv_sec;
	LV_serial[fd].D_write.private_sndStamp[1] = tp.tv_usec;
	sem_post(&(LV_serial[fd].sem_write));
	return(0);
}
/*
	end send (write) operation
*/
int LVcomm_send_ethr(int fd)
{
	if (LV_serial[fd].ew.status == LVTRUE)
		return(-1);
	return(0);
}
/*
	close a threaded port
*/
int LVcomm_close_thr(int fd)
{
	
	mq_close(LV_serial[fd].msgid_pub);
	mq_close(LV_serial[fd].msgid_sub);
	mq_close(msgid_DDSPUB);
	LV_serial[fd].msgid_pub = -1;
	LV_serial[fd].msgid_sub = -1;
	sem_post(&(LV_serial[fd].sem_read));
	sem_post(&(LV_serial[fd].sem_write));
	return(0);
}



/*------------------------------------------------------------------
 * comm_open_port - open channel port.
 *
 * Attempt to open channel port in variable ttys. The function returns 0
 * when no problem is encountered, otherwise < 0.
 *
 *
 *	In the DDS version, there is only one logical port
 *	implemented with two POSIX queues:
 *	One queue is to publish or send messages to the daemon.
 *	The other queue receives the subscription messages.
 * 
 *----------------------------------------------------------------*/
int comm_open_port_SALTOPIC (int np, char *name_pub, char *name_sub)
{
	pthread_t new_thread;
	pthread_attr_t attr;  
        mqd_t msgid_r, msgid_w;
        struct mq_attr attrq;
	int i;
	char buf[8192];
		
        msgid_r = mq_open(name_sub, O_RDONLY | O_CREAT, 
                0777, NULL);
        if (msgid_r == (mqd_t) -1) return(-1);
        if (mq_getattr(msgid_r, &attrq) == -1) return(-1);
	if (attrq.mq_curmsgs != 0)
	{
		for (i = 0; i < attrq.mq_curmsgs; i++)
			mq_receive(msgid_r, buf, MQ_MAX, NULL);
	}
        msgid_w = mq_open(name_pub, O_WRONLY | O_CREAT, 
                0777, NULL);
        if (msgid_w == (mqd_t) -1) return(-1);
        if (mq_getattr(msgid_w, &attrq) == -1) return(-1);
	
	LV_serial[np].msgid_pub = msgid_w;
	LV_serial[np].msgid_sub = msgid_r;
	
			/* generate the threads	*/
			
	pthread_attr_init(&attr);
	pthread_create(&new_thread, &attr, (void *) &serial_read_SALTOPIC,
		       &LV_serial[np]);
	LV_serial[np].thread_read = new_thread;
	pthread_attr_init(&attr);
	pthread_create(&new_thread, &attr, (void *) &serial_write_SALTOPIC,
		       &LV_serial[np]);
	LV_serial[np].thread_write = new_thread;
	
  	return (0);
}

/*------------------------------------------------------------------
 * comm_send_msg_SALTOPIC - send a string through the serial port.
 *
 * This function sends the given string through the serial port along
 * with a newline character '\r'.
 *
 *  	MODIFIED FOR FIFO LOGIC
 *
 *	The FIFO protocol sends the length of the message as 4 bytes,
 *	followed by the actual message
 *
 *	The DDS version issues an POSIX send
 *
 *------------------------------------------------------------------*/
int comm_send_msg_SALTOPIC (mqd_t fdttys, SALTOPIC *outBuf)
{
	int ll, err;
	
	ll = sizeof(SALTOPIC);
	err = mq_send(fdttys, outBuf, ll, 1);
	if (err == -1) return(-1);
  	return (0);
}

/*------------------------------------------------------------------
 * comm_get_msg_SALTOPIC - get a string from the serial port.
 *
 * This function reads a newline terminated string from the serial port.
 *
 *	MODIFIED FOR FIFO LOGIC
 *
 *	The FIFO protocol reads the length of the message as 4 bytes,
 *	and then reads the message.
 *
 *	The DDS version issues an POSIX receive
 *
 *------------------------------------------------------------------*/
int comm_get_msg_SALTOPIC (mqd_t fdttys, SALTOPIC *inBuf)
{
   	int nResult;
	char buf[8192];

	nResult = mq_receive(fdttys, buf, MQ_MAX, NULL);
	if (nResult == -1) return(-1);
	memcpy(inBuf, buf, sizeof(SALTOPIC));
   	return(0);
}

/***********************************************************************/

/*
	Serial read threaded task.
	Wait on select, then read the port, put data in the
	structure and trigger the occurrence.
*/
void serial_read_SALTOPIC(serial_st *pack)
{
	SALTOPIC *cmd;
	mqd_t fdttys;
	Occurrence occ;
	int n, wait;
	struct timeval tv;
	fd_set fds;
	
	occ = pack->occ_read;
	cmd = &pack->D_read;
	sem_init(&(pack->sem_read), 0, 0);
	wait = 1;
	while(1)
	{
		if (wait)
		{
			sem_wait(&(pack->sem_read));
			wait = 0;
		}
		fdttys = pack->msgid_sub;
		if (fdttys < 0)
		{
			pack->er.code = -3; 
			break;
		}
           	FD_ZERO(&fds);
            	FD_SET(fdttys, &fds);
            	tv.tv_sec = 1;
           	tv.tv_usec = 0;
            	n = select(fdttys+1, &fds, NULL, NULL, &tv);
            	if (n == 0)
		{
			pack->er.status = LVTRUE;
			pack->er.code = -2;
		}
		else
		{
			fdttys = pack->msgid_sub;
			if (fdttys < 0)

			{
				pack->er.code = -3; 
				break;
			}
			if (comm_get_msg(fdttys, cmd) < 0)
			{
				pack->er.status = LVTRUE;
				pack->er.code = -4;
			}
			else
				pack->er.status = LVFALSE;
		}
		Occur(occ);
		wait = 1;
	}
	pack->er.status = LVTRUE;
	Occur(occ);
	sem_destroy(&(pack->sem_read));
}

/*
	Serial write threaded task.
	Wait on a semaphore, take data from structure, write to port,
	and trigger the occurrence.
*/
void serial_write_SALTOPIC(serial_st *pack)
{
	SALTOPIC *cmd;
	mqd_t fdttys;
	Occurrence occ;
	
	occ = pack->occ_write;
	cmd = &pack->D_write;
	sem_init(&(pack->sem_write), 0, 0);
	while(1)
	{	
		sem_wait(&(pack->sem_write));
		fdttys = pack->msgid_pub;
		if (fdttys < 0) break;
		if (comm_send_msg(fdttys, cmd) < 0)
			pack->ew.status = LVTRUE;
		else
			pack->ew.status = LVFALSE;
		Occur(occ);
	}
	sem_destroy(&(pack->sem_write));
}
		

int LVcomm_open_dds_SALTOPIC(int fd, LStrHandle buf_pub, LStrHandle buf_sub)
{
	int lenp, lens, len, err; 
	char name_pub[64], name_sub[64];
	SALTOPIC msg;
        struct mq_attr attrq;

        msgid_DDSPUB = mq_open("/DDS_SALTOPIC", O_WRONLY | O_CREAT, 
                0777, NULL);
        if (msgid_DDSPUB == (mqd_t) -1) return(-1);
        if (mq_getattr(msgid_DDSPUB, &attrq) == -1) return(-1);
        lenp = LStrLen(*buf_pub);
	memcpy(name_pub, *(char **) buf_pub+4, lenp);
	name_pub[lenp] = '\0';
        lens = LStrLen(*buf_sub);
	memcpy(name_sub, *(char **) buf_sub+4, lens);
	name_sub[lens] = '\0';
	err = comm_open_port(fd, name_pub, name_sub);
	if (err < 0) return(-5);

	msg.key = 0;
	msg.type = PUB_INIT;
	msg.length = lenp;
	strcpy(msg.msg, name_pub);
	strcat(msg.msg, " ");
	strcat(msg.msg, name_sub);
	len = sizeof(DDS_MSG);
	err = mq_send(msgid_DDSPUB, &msg, len, 1);
	if (err == -1) return(-2);
	
  	return (0);
}


