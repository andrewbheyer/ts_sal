2010-11-08  Angelo Corsaro  <angelo.corsaro@gmail.com>
	* Added optional type required to support xtypes @optional 
	attributes.
	
	* Rationalized use of close in conditions. 
	 
	* BytesWriter now overloads write iterators to write byte range.
	
	* Updated using directive on xtypes
	
	* Completed the merge of xtypes into the main trunk
	
2010-11-08  Rick Warren  <rick.warren@rti.com>
    * Removed obsolete class InstanceWriter.
    * Made it easier to write keyed data without first wrapping samples in
      TopicInstance.
    * Added read/take overloads to access by instance, with condition.
      Made it easier to promote ViewState, InstanceState, SampleState
      to ReaderState.

2010-11-07  Rick Warren  <rick.warren@rti.com>
    * Completed *fwd.hpp headers. Cleaned up file dependencies.
    * Throw exceptions, not strings.
    * Added copyright, license notices at the top of the remaining files.

2010-11-07  Angelo Corsaro  <angelo.corsaro@gmail.com>
	* Merged in xtypes changes in the tdds package
	
	* Moved Read/Query condition to dds::sub::cond namespace
	
	* Added equality/inequality operators to the Value class. 
	
	* Fixed some issue and code duplications with the InstanceHandle class

2010-11-06  Rick Warren  <rick.warren@rti.com>
    * Added factory methods for ReadCondition and QueryCondition
    * Completed read example, including fixing some minor issues in Samples
      API
    * Removed AnyStatusCondition: the Condition base class can serve much the
      same role. And if we keep it, we would also need to add
      AnyReadCondition -- and AnyQueryCondition, or reuse AnyReadCondition?
      Simplify.
    * Added InvalidDataError to handle case where user attempts to access
      invalid data from a sample.
    * Implemented StatusCondition accessors. Finished parent() for conditions.
    * Completed GuardCondition.
    * Completed factory methods.


2010-11-06  Angelo Corsaro  <angelo.corsaro@gmail.com>
	* Checked in initial version of xTypes. Compilation is disabled now for these files as
	some refactoring is ongoing.

	* Added method to control the default ReadState for the data reader and 
	removed the default argument. This way a programmer can control explicitly
	the default it wants and manipulators can also be used to control it
	
	* Added streaming read/take. Manipulators are used to do control 
	  whether the streaming does a read or a take. ReaderState can also 
	  be streamed control which data is read/taken
	
	* Changed "new_data" into "any_data" for the DataReader default read/take
	 
	* Added any_data constant to the ReaderState to indicate read/not-read data
	  from live instances in any view state
	  
	* Fixed detail class for StatusCondition by making it a template.
	
2010-11-05  Rick Warren  <rick.warren@rti.com>
    * Fixed bugs in WaitSet
    * Fixed QoS policy bugs
    * Added DomainParticipantFactory
    * Added participant --> subscriber factory methods
    * Made TopicDescription a template
    * Fixed memory leaks, assignment in "Any" types
    * Added subscriber --> reader factory methods
    * Added reader example (not done yet)

2010-11-05   Angelo Corsaro  <angelo.corsaro@gmail.com>
	* Added BinIterator find for the Publisher
	
	* Added Loan API for DataReader
	
	* Moved Sample/View/Instance-State to the sub package
	
	* Added a Sample class that encapsulate data type and Sample Info
	
	* Moved Macros used to defined status size to dds/core/types.hpp. 
	
	* replaced use of auto_ptr with dds::core::smart_ptr_traits<>::ref_type

2010-11-04  Rick Warren  <rick.warren@rti.com>
    * Added factory methods: participant --> publisher, publisher --> writer.
      Remaining factories are still to come.

2010-11-04   Angelo Corsaro  <angelo.corsaro@gmail.com>

	* Removed Discovery Service class. The functionalities now are provided as 
	a set of function, e.g., discover().
	
	* updated find implementation to reflect changes in the template signature
	
	* added compile time assertions on find functions wherever needed
	
	* added is_same type trait to help doing compile time assertions on 
	find functions.
	
	* Completely refactored the policy ctors to be now included as part of the 
	  Policy class themselves. 
	  Now the code using them would look like this:
	  
	  TopicQos tqos;
	  tqos << Durability::Transient() 
	       << Reliability::Reliable()
	       << History::KeepAll() 
	       << TransportPriority(10);
	       
	* Added ReaderState to simplify read API

	* Consolidated read API on data Reader

	* Added an uniform std::find-like API to replace the
	  various look-up methods provided by the DDS PIM  and reduce
	  circular dependencies
	  
	* Refactored TopicDescription to be come an Entity
	
	  
2010-11-02  Rick Warren  <rick.warren@rti.com>
    * Fixed listeners: completed implementation, removed commented code,
      fixed several compile errors, added missing getters/setters, added
      raw pointer access as decided in Cambridge.
    * Removed per-entity, per-policy getters/setters: can lead to inconsistent
      QoS, use built-in topics inefficiently, and not in the PIM
    * Removed void close(const dds::core::Time&): not in the PIM or other PSMs
    * Renamed policy ctor classes per discussion in Cambridge:
      <Policy>_<Kind>. At the same time, consolidated the policy definitions
      they refer to.

2010-11-02  Rick Warren  <rick.warren@rti.com>
    * Merged static DDS profile conformance checking in from RTI branch
    * Updated top-level license files
    * Made StatusCondition a template so that parent() can be type-safe

	* Added support for ContentFilteredTopic & MultiTopic
	
	* Moved lookup methods out of Publisher/Subscriber into a "find" function
	a la STL. This find function is not used to search contained entities in
	an uniform way. Tha main advantage along with reducing the number of methods
	is that this reduces the cross dependencies.

2010-11-02  Rick Warren  <rick.warren@rti.com>
    * Merged static DDS profile conformance checking in from RTI branch
	
2010-11-01  Angelo Corsaro  <angelo.corsaro@gmail.com>

	* Removed Entity's name accessor. As this attribute is not modeled in the PIM
	  we need to add it to the DDS spec first.
	  
	* update details classes to use the "parent" method as opposed to  "publisher/subscriber/etc.". 
	  

2010-11-01  Rick Warren  <rick.warren@rti.com>
    * Renamed dds::core::status::Status back to ...::StatusMask.
      Replaced static constants with static methods to avoid ctor
      nondeterminism.

2010-10-31  Rick Warren  <rick.warren@rti.com>
    * Added idds "impl" classes for InstanceHandle, QosPolicyCount
    * Renamed DEFINE_POLICY_NAME to OMG_DDS_DEFINE_POLICY_TRAITS to avoid
      collisions with other APIs: since macros aren't in any namespace, they
      should always start with "OMG_DDS_".
    * Introduced QosPolicyId typedef to clarify relationship between
      QosPolicyCount class and policy_id trait
    * Changed policy_name::name from a constant to a method returning a
      constant: non-local constants with non-trivial ctors are unsafe, because
      their constructors are called at nondeterministic times.
    * Introduced constant dds::core::LENGTH_UNLIMITED and got rid of
      corresponding magic numbers
    * Moved DomainId from dds::core to dds::domain: it's only used there.
    * Removed ability to modify status objects: it's not needed, since
      statuses always come from the middleware to the application.
    * Removed State constants: unsafe because their constructors are called
      at nondeterministic times.
    * Made status count fields signed as in PIM: sometimes they need to be
      negative
    * Fixed other minor inconsistencies

2010-10-29  Rick Warren  <rick.warren@rti.com>
    * Removed obsolete (t)dds/qos/ directories -- seems to have been an
      oversight.
    * Got rid of extraneous begin_/end_coherent changes, suspend_/
      resume_publications, and being_/end_accss: we have RAII classes for
      those.
        * Made CoherentAccess consistent with the other two.
        * Renamed "CoherentChange" to "CoherentSet": the PIM says that calling
          begin_coherent_changes creates a "coherent set".
        * Renamed "SuspendPublication" to "SuspendedPublication": more
          grammatical.
    * Renamed "InvalidDowncastException" to "InvalidDowncastError" to be
      consistent with the rest of the exceptions -- here and in ::std
    * Renamed "OctetSeq" to "ByteSeq" to be consistent with DDS-XTypes.
    * All accessors for parent entities are now consistently named "parent":
      works everywhere, good for templates.
    * Made get_/set_qos vs. just qos, get_/set_policy vs. just policy
      consistent: chose the shorter names
    * Return Duration by value: constrains implementers less, and is probably
      faster, because Duration is so small
    * Removed Reliability::synchronous: not in the PIM; don't know what it
      was for.
    * Some alignment with rti_proposal branch in accordance with already-
      agreed-upon changes
    * Eliminated remaining use of non-standard variadic templates for better
      compiler support (was unused anyway).
    * Added Subversion-standard properties to all source files

2010-10-26  Rick Warren  <rick.warren@rti.com>
    * Added HOWTO: build instructions
    * Removed auto-generated cmake files from example dir: seem to have been
      checked in by mistake
    * Increased Boost compatibility back to 1.35: I've verified that it works
      (and it just happens to be the version provided by my pkg mgr)

2010-10-23  Rick Warren  <rick.warren@rti.com>
    * Some alignment with rti_proposal branch in accordance with already-
      agreed-upon changes
    * Replaced Duration::INFINITE and ZERO constants with methods: constants
      have non-deterministic construction time. Added some more operators and
      conversions to Duration class.
    * Removed non-PIM-derived exceptions. Renamed AlreadyDisposedError to
      AlreadyClosedError. Added explicit copy ctors and what() overrides to
      all exception classes.
    * Pass null_type by value: it's always stateless anyway
    * Commented overloaded operators in StatusMask: they should be inherited
      from std::bitset already. Can we remove them?
    * Declared Value ctors protected. It isn't a polymorphic class. 
    * Fixed typos, warnings, and other minor errors
    * Removed unnecessary member-by-member status and built-in topic data
      ctors: these types are never instantiated by applications except when
      creating copies of objects obtained from the middleware
    * Reduced use of non-standard variadic templates 
    * Updated Eclipse project settings: specified source directories

2010-10-19  Angelo Corsaro  <angelo.corsaro@gmail.com>
	* Refactored the dds::core/domain/pub to properly 
	rely on the detail namespace. Reduced header dependencies and
	fixed some issues with the Any types in dds::pub.
	
2010-10-03  Angelo Corsaro  <angelo.corsaro@gmail.com>

	* Uploaded initial version for the DDS PSM for C++.
	

