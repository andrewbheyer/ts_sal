/*                               
   Example:
        
       To run the example application on domain <domain_id>:
                                  
       On Unix: 
       
       objs/<arch>/tcs__publisher <domain_id> 
       objs/<arch>/tcs__subscriber <domain_id> 
                            
        
modification history
------------ -------       
*/

#include <stdio.h>
#include <stdlib.h>

#include "dds_dcps.h"
###INSERT includes

static char * write_partition  = "LSST";

static int publisher_main(int domainId, int sample_count)
{

    DDS_ConditionSeq                         *conditionList;
    DDS_WaitSet                              w;
    DDS_Condition                            exp_condition;
    handler                                  *active_handler;

    DDS_DomainParticipantQos                 *dpQos;
    DDS_TopicQos                             *tQos;
    DDS_PublisherQos                         *pQos;
    DDS_DataWriterQos                        *dwQos;
    

###INSERT variables

    svcSAL_initialize();
 
    /*
     * Create WaitSet
     */
    w     = DDS_WaitSet__alloc ();
    /*
     * Initialize Qos variables
     */
    dpQos = DDS_DomainParticipantQos__alloc();
    tQos  = DDS_TopicQos__alloc();
    pQos  = DDS_PublisherQos__alloc();
    dwQos = DDS_DataWriterQos__alloc();

    /*
     * Initialize condition list
     */
    conditionList = NULL;

    /*
     * Create participant
     */
    /* To customize participant QoS, use 
       DDS_DomainParticipantFactory_get_default_participant_qos() */
    dpf = DDS_DomainParticipantFactory_get_instance ();
    dp = DDS_DomainParticipantFactory_create_participant (dpf, domainId, DDS_PARTICIPANT_QOS_DEFAULT, NULL, DDS_ANY_STATUS);
    if (dp == DDS_HANDLE_NIL) {
        printf ("%s ERROR - Splice Daemon not running", argv[0]);
        exit (1);
    }

   /* 
     * Create publisher
     */
    DDS_DomainParticipant_get_default_publisher_qos (dp, pQos);
    pQos->partition.name._length = 1;
    pQos->partition.name._maximum = 1;
    pQos->partition.name._buffer = DDS_StringSeq_allocbuf (1);
    pQos->partition.name._buffer[0] = DDS_string_alloc (strlen(write_partition) + 1);
    strcpy (pQos->partition.name._buffer[0], write_partition);
    p = DDS_DomainParticipant_create_publisher (dp, pQos, NULL, DDS_ANY_STATUS);
    DDS_free (pQos);



    /* Register type before creating topic */
###INSERT registertypes

    /* To customize topic QoS, use
       DDS_DomainParticipant_get_default_topic_qos() */


###INSERT createtopics

    /* To customize data writer QoS, use
       DDS_Publisher_get_default_datawriter_qos() */

###INSERT createwriters

    /* Create data sample for writing */
###INSERT createinstances

/* Main Loop */

###INSERT fromshmem

###INSERT tidyup 

    /* Cleanup and delete delete all entities */ 
    result = DDS_DomainParticipant_delete_subscriber (dp, s);

###INSERT finalize

    result = DDS_DomainParticipantFactory_delete_participant (dpf, dp);
    DDS_free (w);
    DDS_free (tQos);
    DDS_free (pQos);
    DDS_free (dwQos);

 
}

int main(int argc, char *argv[])
{
    int domainId = 0;
    int sample_count = 0; /* infinite loop */

    if (argc >= 2) {
        domainId = atoi(argv[1]);
    }
    if (argc >= 3) {
        sample_count = atoi(argv[2]);
    }
    
        
    return publisher_main(domainId, sample_count);
}



