#include "SAL_hexapod.h"
#include "shmem_hexapod_Actuators.h"

int tcl_gethexapod_Actuators ( Tcl_Interp *interp) {
    char newValue[128];
    char newName[128];
    int  iterator;
    SALTopicC data;
    int status;

    status = getSampleActuators(&data);
    if ( status == SAL__OK ) {
// double
      sprintf(newValue,\"%[set iformat]\",data.[set iname]);
      Tcl_SetVar(interp, \"SALTopic.[set iname]\", newValue,  TCL_GLOBAL_ONLY);
....
// array
      for (iterator=0;iterator<[set isize];iterator++) {
	  sprintf(newValue,\"%[set iformat]\",data.Raw[iterator]);
          sprintf(newName,\"SALTopic.[set iname](%d)\",iterator);
	  Tcl_SetVar(interp, newName, newValue,  TCL_GLOBAL_ONLY);
      \}
//

  } else {
      return TCL_ERROR;
  }
  return TCL_OK;
}


int tcl_puthexapod_Actuators ( Tcl_Interp *interp) {
    char newName[128];
    int  iterator;
    SALTopicC data;
    int status;

// double
    text = (char *)Tcl_GetVar(interp, \"SALTopic.[set iname]\", TCL_GLOBAL_ONLY);
    sscanf(text,\"%[set iformat]\", &data.private_sndStamp);
// array
   for (iterator=0;iterator<[set isize];iterator++) {
        sprintf(newName,\"SALTopic.Raw(%d)\",iterator);
	text = Tcl_GetVar(interp, newName,  TCL_GLOBAL_ONLY);
        sscanf(text,\"%[set iformat]\", &data.[set iname]\[iterator\]);
   \}
//

   status = putSampleActuators(&data);
   return TCL_OK;
}




int tcl_shmgethexapod_Actuators ( Tcl_Interp *interp, int *shmdata_ref) {
    char newValue[128];
    char newName[128];
    int  iterator;
    SALTopic_cache *data;
    data = (SALTopic_cache *)shmdata_ref;
    int status;

    status = getSampleActuators(&data);
    if ( status == SAL__OK ) {
// double
      sprintf(newValue,\"%[set iformat]\",data->[set iname]);
      Tcl_SetVar(interp, \"SALTopic.[set iname]\", newValue,  TCL_GLOBAL_ONLY);
....
// array
      for (iterator=0;iterator<[set isize];iterator++) {
	  sprintf(newValue,\"%[set iformat]\",data->[set iname]\[iterator\]);
          sprintf(newName,\"SALTopic.[set iname](%d)\",iterator);
	  Tcl_SetVar(interp, newName, newValue,  TCL_GLOBAL_ONLY);
      \}
//  string
   strncpy(data->[ldata.[set iname],newValue,[set isize]);
//

  } else {
      return TCL_ERROR;
  }
  return TCL_OK;
}



// add copy from shm to local copy before put!!
int tcl_puthexapod_Actuators ( Tcl_Interp *interp, int *shmdata_ref) {
    char newName[128];
    int  iterator;
    SALTopicC ldata;
    SALTopic_cache *data;
    data = (SALTopic_cache *)shmdata_ref;
    int status;

// double
    text = (char *)Tcl_GetVar(interp, \"SALTopic.[set iname]\", TCL_GLOBAL_ONLY);
    sscanf(text,\"%[set iformat]\", &data->[set iname]);
    ldata.[set iname] = data->[set iname];
// array
   for (iterator=0;iterator<[set isize];iterator++) {
        sprintf(newName,\"SALTopic.[set iname](%d)\",iterator);
	text = Tcl_GetVar(interp, newName,  TCL_GLOBAL_ONLY);
        sscanf(text,\"%[set iformat]\", &data->[set iname]\[iterator\]);
        ldata.[set iname]\[iterator\] = data->[set iname]\[iterator\]);
   \}
//  string
   strncpy(data->[set iname],ldata.[set iname],[set isize]);

   status = putSampleActuators(&ldata);
   return TCL_OK;
}

#ifdef SAL_SUBSYSTEM_ID_IS_KEYED
int tcl_SAL_hexapod (Tcl_Interp *interp, int aKey) {
   SAL_hexapod *result;
   result = new SAL_hexapod(aKey);
   return result;
}
#else 
int tcl_SAL_hexapod (Tcl_Interp *interp) {
   SAL_hexapod *result;
   result = new SAL_hexapod();
   return result;
}
#endif


int tcl_shmhexapod_Actuators (Tcl_Interp *interp) {
   int status;
   if ( hexapod_Actuators_m_shared_mem == NULL) {
      status = shmhexapod_Actuators();
   } else {
      return TCL_OK;
   }
   return status;
}


#put this in SALDDS.cpp interface
SAL_hexapod::shmhexapod_Actuators () {

       time_t cTime;
       key_t key = 0xabc3;
       size_t hexapod_Actuators_shmsize = 212;
       bool bCreated = false;

       m_hexapod_Actuators_shmid = shmget(key, hexapod_Actuators_shmsize, 0666);

       if (-1 == m_hexapod_Actuators_shmid) {

           if (ENOENT != errno) {
               cerr << __FILE__ <<  ":" <<  __LINE__ <<  " Critical error in shmget"  << endl;
               return TCL_ERROR;
           }

           m_hexapod_Actuators_shmid = shmget(key, hexapod_Actuators_shmsize, IPC_CREAT | 0666);

           if (-1 == m_hexapod_Actuators_shmid) {
               cerr <<  __FILE__ <<  ":" <<  __LINE__ <<  " Critical error in shmget" << endl;
               return;
           }

           cout <<   "Created the shared memory" <<  endl;
           bCreated = true;
       }

       hexapod_Actuators_m_shared_mem = (hexapod_Actuators_cache *) shmat(m_hexapod_Actuators_shmid, NULL, 0);

       if (-1 == (size_t)shm_hexapod_Actuators::m_shared_mem) {
           cerr <<  __FILE__ <<  ":" <<  __LINE__ <<  " Critical error in shmat" << endl;
           return TCL_ERROR;
       }

       if (bCreated) {
           // Construct objects on the shared memory
           hexapod_Actuators_m_shared_mem->syncO = time(&cTime);
           hexapod_Actuators_m_shared_mem->syncI = time(&cTime);
       }

       return TCL_OK;
}



