/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGTCL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdio.h>
#include <tcl.h>
#include <errno.h>
#include <stdlib.h>
#include <stdarg.h>
#include <ctype.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return and integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGINTERN const char*
SWIG_Tcl_ErrorType(int code) {
  const char* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = "MemoryError";
    break;
  case SWIG_IOError:
    type = "IOError";
    break;
  case SWIG_RuntimeError:
    type = "RuntimeError";
    break;
  case SWIG_IndexError:
    type = "IndexError";
    break;
  case SWIG_TypeError:
    type = "TypeError";
    break;
  case SWIG_DivisionByZero:
    type = "ZeroDivisionError";
    break;
  case SWIG_OverflowError:
    type = "OverflowError";
    break;
  case SWIG_SyntaxError:
    type = "SyntaxError";
    break;
  case SWIG_ValueError:
    type = "ValueError";
    break;
  case SWIG_SystemError:
    type = "SystemError";
    break;
  case SWIG_AttributeError:
    type = "AttributeError";
    break;
  default:
    type = "RuntimeError";
  }
  return type;
}


SWIGINTERN void
SWIG_Tcl_SetErrorObj(Tcl_Interp *interp, const char *ctype, Tcl_Obj *obj)
{
  Tcl_ResetResult(interp);
  Tcl_SetObjResult(interp, obj);
  Tcl_SetErrorCode(interp, "SWIG", ctype, NULL);
}

SWIGINTERN void
SWIG_Tcl_SetErrorMsg(Tcl_Interp *interp, const char *ctype, const char *mesg)
{
  Tcl_ResetResult(interp);
  Tcl_SetErrorCode(interp, "SWIG", ctype, NULL);
  Tcl_AppendResult(interp, ctype, " ", mesg, NULL);
  /*
  Tcl_AddErrorInfo(interp, ctype);
  Tcl_AddErrorInfo(interp, " ");
  Tcl_AddErrorInfo(interp, mesg);
  */
}

SWIGINTERNINLINE void
SWIG_Tcl_AddErrorMsg(Tcl_Interp *interp, const char* mesg)
{
  Tcl_AddErrorInfo(interp, mesg);
}



/* -----------------------------------------------------------------------------
 * SWIG API. Portion that goes into the runtime
 * ----------------------------------------------------------------------------- */
#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_TCL_POINTER 4
#define SWIG_TCL_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;

typedef int   (*swig_wrapper)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
typedef int   (*swig_wrapper_func)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
typedef char *(*swig_variable_func)(ClientData, Tcl_Interp *, char *, char *, int);
typedef void  (*swig_delete_func)(ClientData);

typedef struct swig_method {
  const char     *name;
  swig_wrapper   method;
} swig_method;

typedef struct swig_attribute {
  const char     *name;
  swig_wrapper   getmethod;
  swig_wrapper   setmethod;
} swig_attribute;

typedef struct swig_class {
  const char         *name;
  swig_type_info   **type;
  swig_wrapper       constructor;
  void              (*destructor)(void *);
  swig_method        *methods;
  swig_attribute     *attributes;
  struct swig_class **bases;
  const char              **base_names;
  swig_module_info   *module;
} swig_class;

typedef struct swig_instance {
  Tcl_Obj       *thisptr;
  void          *thisvalue;
  swig_class   *classptr;
  int            destroy;
  Tcl_Command    cmdtok;
} swig_instance;

/* Structure for command table */
typedef struct {
  const char *name;
  int       (*wrapper)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
  ClientData  clientdata;
} swig_command_info;

/* Structure for variable linking table */
typedef struct {
  const char *name;
  void *addr;
  char * (*get)(ClientData, Tcl_Interp *, char *, char *, int);
  char * (*set)(ClientData, Tcl_Interp *, char *, char *, int);
} swig_var_info;


/* -----------------------------------------------------------------------------*
 *  Install a constant object 
 * -----------------------------------------------------------------------------*/

static Tcl_HashTable   swigconstTable;
static int             swigconstTableinit = 0;

SWIGINTERN void
SWIG_Tcl_SetConstantObj(Tcl_Interp *interp, const char* name, Tcl_Obj *obj) {
  int newobj;
  Tcl_ObjSetVar2(interp,Tcl_NewStringObj(name,-1), NULL, obj, TCL_GLOBAL_ONLY);
  Tcl_SetHashValue(Tcl_CreateHashEntry(&swigconstTable, name, &newobj), (ClientData) obj);
}

SWIGINTERN Tcl_Obj *
SWIG_Tcl_GetConstantObj(const char *key) {
  Tcl_HashEntry *entryPtr;
  if (!swigconstTableinit) return 0;
  entryPtr = Tcl_FindHashEntry(&swigconstTable, key);
  if (entryPtr) {
    return (Tcl_Obj *) Tcl_GetHashValue(entryPtr);
  }
  return 0;
}

#ifdef __cplusplus
}
#endif



/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * tclrun.swg
 *
 * This file contains the runtime support for Tcl modules and includes
 * code for managing global variables and pointer type checking.
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_ConvertPtr(oc, ptr, ty, flags)             SWIG_Tcl_ConvertPtr(interp, oc, ptr, ty, flags)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Tcl_NewPointerObj(ptr, type, flags)

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Tcl_ConvertPacked(interp, obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Tcl_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_Tcl_ConvertPtr(interp, obj, pptr, type, flags)
#define SWIG_NewInstanceObj(thisvalue, type, flags)     SWIG_Tcl_NewInstanceObj(interp, thisvalue, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Tcl_ConvertPtr(interp, obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Tcl_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Tcl_ConvertPacked(interp,obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Tcl_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Tcl_GetModule((Tcl_Interp *) (clientdata))	     
#define SWIG_SetModule(clientdata, pointer)          	SWIG_Tcl_SetModule((Tcl_Interp *) (clientdata), pointer)


/* Error manipulation */

#define SWIG_ErrorType(code)                            SWIG_Tcl_ErrorType(code)                                      
#define SWIG_Error(code, msg)            		SWIG_Tcl_SetErrorMsg(interp, SWIG_Tcl_ErrorType(code), msg)
#define SWIG_fail                        		goto fail						    


/* Tcl-specific SWIG API */

#define SWIG_Acquire(ptr)                               SWIG_Tcl_Acquire(ptr)                                     
#define SWIG_MethodCommand                           	SWIG_Tcl_MethodCommand				       
#define SWIG_Disown(ptr)                             	SWIG_Tcl_Disown(ptr)				       
#define SWIG_ConvertPtrFromString(c, ptr, ty, flags) 	SWIG_Tcl_ConvertPtrFromString(interp, c, ptr, ty, flags)  
#define SWIG_MakePtr(c, ptr, ty, flags)              	SWIG_Tcl_MakePtr(c, ptr, ty, flags)		       
#define SWIG_PointerTypeFromString(c)                	SWIG_Tcl_PointerTypeFromString(c)			       
#define SWIG_GetArgs                                 	SWIG_Tcl_GetArgs					       
#define SWIG_GetConstantObj(key)                     	SWIG_Tcl_GetConstantObj(key)			       
#define SWIG_ObjectConstructor                       	SWIG_Tcl_ObjectConstructor				       
#define SWIG_Thisown(ptr)                            	SWIG_Tcl_Thisown(ptr)				       
#define SWIG_ObjectDelete                            	SWIG_Tcl_ObjectDelete				       


#define SWIG_TCL_DECL_ARGS_2(arg1, arg2)                (Tcl_Interp *interp SWIGUNUSED, arg1, arg2)
#define SWIG_TCL_CALL_ARGS_2(arg1, arg2)                (interp, arg1, arg2)
/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_GetConstant        SWIG_GetConstantObj
#define SWIG_Tcl_GetConstant    SWIG_Tcl_GetConstantObj

#include "assert.h"

#ifdef __cplusplus
extern "C" {
#if 0
} /* cc-mode */
#endif
#endif

/* Object support */

SWIGRUNTIME Tcl_HashTable*
SWIG_Tcl_ObjectTable(void) {
  static Tcl_HashTable  swigobjectTable;
  static int            swigobjectTableinit = 0;
  if (!swigobjectTableinit) {
    Tcl_InitHashTable(&swigobjectTable, TCL_ONE_WORD_KEYS);
    swigobjectTableinit = 1;
  }
  return &swigobjectTable;
}

/* Acquire ownership of a pointer */
SWIGRUNTIME void
SWIG_Tcl_Acquire(void *ptr) {
  int newobj;
  Tcl_CreateHashEntry(SWIG_Tcl_ObjectTable(), (char *) ptr, &newobj);
}

SWIGRUNTIME int
SWIG_Tcl_Thisown(void *ptr) {
  if (Tcl_FindHashEntry(SWIG_Tcl_ObjectTable(), (char *) ptr)) {
    return 1;
  }
  return 0;
}

/* Disown a pointer.  Returns 1 if we owned it to begin with */
SWIGRUNTIME int
SWIG_Tcl_Disown(void *ptr) {
  Tcl_HashEntry *entryPtr = Tcl_FindHashEntry(SWIG_Tcl_ObjectTable(), (char *) ptr);
  if (entryPtr) {
    Tcl_DeleteHashEntry(entryPtr);
    return 1;
  }
  return 0;
}

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Tcl_ConvertPtrFromString(Tcl_Interp *interp, const char *c, void **ptr, swig_type_info *ty, int flags) {
  swig_cast_info *tc;
  /* Pointer values must start with leading underscore */
  while (*c != '_') {
    *ptr = (void *) 0;
    if (strcmp(c,"NULL") == 0) return SWIG_OK;

    /* Empty string: not a pointer */
    if (*c == 0) return SWIG_ERROR; 

    /* Hmmm. It could be an object name. */

    /* Check if this is a command at all. Prevents <c> cget -this         */
    /* from being called when c is not a command, firing the unknown proc */
    if (Tcl_VarEval(interp,"info commands ", c, (char *) NULL) == TCL_OK) {
      Tcl_Obj *result = Tcl_GetObjResult(interp);
      if (*(Tcl_GetStringFromObj(result, NULL)) == 0) {
        /* It's not a command, so it can't be a pointer */
        Tcl_ResetResult(interp);
        return SWIG_ERROR;
      }
    } else {
      /* This will only fail if the argument is multiple words. */
      /* Multiple words are also not commands.                  */
      Tcl_ResetResult(interp);
      return SWIG_ERROR;
    }

    /* Check if this is really a SWIG pointer */
    if (Tcl_VarEval(interp,c," cget -this", (char *) NULL) != TCL_OK) {
      Tcl_ResetResult(interp);
      return SWIG_ERROR;
    }

    c = Tcl_GetStringFromObj(Tcl_GetObjResult(interp), NULL);
  }

  c++;
  c = SWIG_UnpackData(c,ptr,sizeof(void *));
  if (ty) {
    tc = c ? SWIG_TypeCheck(c,ty) : 0;
    if (!tc) {
      return SWIG_ERROR;
    }
    if (flags & SWIG_POINTER_DISOWN) {
      SWIG_Disown((void *) *ptr);
    }
    {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc,(void *) *ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    }
  }
  return SWIG_OK;
}

/* Convert a pointer value */
SWIGRUNTIMEINLINE int
SWIG_Tcl_ConvertPtr(Tcl_Interp *interp, Tcl_Obj *oc, void **ptr, swig_type_info *ty, int flags) {
  return SWIG_Tcl_ConvertPtrFromString(interp, Tcl_GetStringFromObj(oc,NULL), ptr, ty, flags);
}

/* Convert a pointer value */
SWIGRUNTIME char *
SWIG_Tcl_PointerTypeFromString(char *c) {
  char d;
  /* Pointer values must start with leading underscore. NULL has no type */
  if (*c != '_') {
    return 0;
  }
  c++;
  /* Extract hex value from pointer */
  while ((d = *c)) {
    if (!(((d >= '0') && (d <= '9')) || ((d >= 'a') && (d <= 'f')))) break;
    c++;
  }
  return c;
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Tcl_ConvertPacked(Tcl_Interp *SWIGUNUSEDPARM(interp) , Tcl_Obj *obj, void *ptr, int sz, swig_type_info *ty) {
  swig_cast_info *tc;
  const char  *c;

  if (!obj) goto type_error;
  c = Tcl_GetStringFromObj(obj,NULL);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return SWIG_OK;

 type_error:

  return SWIG_ERROR;
}


/* Take a pointer and convert it to a string */
SWIGRUNTIME void
SWIG_Tcl_MakePtr(char *c, void *ptr, swig_type_info *ty, int flags) {
  if (ptr) {
    *(c++) = '_';
    c = SWIG_PackData(c,&ptr,sizeof(void *));
    strcpy(c,ty->name);
  } else {
    strcpy(c,(char *)"NULL");
  }
  flags = 0;
}

/* Create a new pointer object */
SWIGRUNTIMEINLINE Tcl_Obj *
SWIG_Tcl_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
  Tcl_Obj *robj;
  char result[SWIG_BUFFER_SIZE];
  SWIG_MakePtr(result,ptr,type,flags);
  robj = Tcl_NewStringObj(result,-1);
  return robj;
}

SWIGRUNTIME Tcl_Obj *
SWIG_Tcl_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,type->name);
  return Tcl_NewStringObj(result,-1);
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

SWIGRUNTIME swig_module_info * 
SWIG_Tcl_GetModule(Tcl_Interp *interp) {
  const char *data;
  swig_module_info *ret = 0;
  
  /* first check if pointer already created */
  data = Tcl_GetVar(interp, (char *)"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, TCL_GLOBAL_ONLY);
  if (data) {
    SWIG_UnpackData(data, &ret, sizeof(swig_type_info **));
  }

  return ret;
}

SWIGRUNTIME void
SWIG_Tcl_SetModule(Tcl_Interp *interp, swig_module_info *module) {
  char buf[SWIG_BUFFER_SIZE];
  char *data;

  /* create a new pointer */
  data = SWIG_PackData(buf, &module, sizeof(swig_type_info **));
  *data = 0;
  Tcl_SetVar(interp, (char *)"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, buf, 0);
}

/* -----------------------------------------------------------------------------*
 *  Object auxiliars
 * -----------------------------------------------------------------------------*/


SWIGRUNTIME void
SWIG_Tcl_ObjectDelete(ClientData clientData) {
  swig_instance *si = (swig_instance *) clientData;
  if ((si) && (si->destroy) && (SWIG_Disown(si->thisvalue))) {
    if (si->classptr->destructor) {
      (si->classptr->destructor)(si->thisvalue);
    }
  }
  Tcl_DecrRefCount(si->thisptr);
  free(si);
}

/* Function to invoke object methods given an instance */
SWIGRUNTIME int
SWIG_Tcl_MethodCommand(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  char *method,   *attrname;
  swig_instance   *inst = (swig_instance *) clientData;
  swig_method     *meth;
  swig_attribute  *attr;
  Tcl_Obj         *oldarg;
  Tcl_Obj         **objv;
  int              rcode;
  swig_class      *cls;
  swig_class      *cls_stack[64];
  int              cls_stack_bi[64];
  int              cls_stack_top = 0;
  int              numconf = 2;
  int              bi;

  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
    return TCL_ERROR;
  }
  method = Tcl_GetStringFromObj(objv[1],NULL);
  if (strcmp(method,"-acquire") == 0) {
    inst->destroy = 1;
    SWIG_Acquire(inst->thisvalue);
    return TCL_OK;
  }
  if (strcmp(method,"-disown") == 0) {
    if (inst->destroy) {
      SWIG_Disown(inst->thisvalue);
    }
    inst->destroy = 0;
    return TCL_OK;
  }
  if (strcmp(method,"-delete") == 0) {
    Tcl_DeleteCommandFromToken(interp,inst->cmdtok);
    return TCL_OK;
  }
  cls_stack[cls_stack_top] = inst->classptr;
  cls_stack_bi[cls_stack_top] = -1;
  cls = inst->classptr;
  while (1) {
    bi = cls_stack_bi[cls_stack_top];
    cls = cls_stack[cls_stack_top];
    if (bi != -1) {
      if (!cls->bases[bi] && cls->base_names[bi]) {
        /* lookup and cache the base class */
	swig_type_info *info = SWIG_TypeQueryModule(cls->module, cls->module, cls->base_names[bi]);
	if (info) cls->bases[bi] = (swig_class *) info->clientdata;
      }
      cls = cls->bases[bi];
      if (cls) {
        cls_stack_bi[cls_stack_top]++;
        cls_stack_top++;
        cls_stack[cls_stack_top] = cls;
        cls_stack_bi[cls_stack_top] = -1;
        continue;
      }
    }
    if (!cls) {
      cls_stack_top--;
      if (cls_stack_top < 0) break;
      else continue;
    }
    cls_stack_bi[cls_stack_top]++;

    meth = cls->methods;
    /* Check for methods */
    while (meth && meth->name) {
      if (strcmp(meth->name,method) == 0) {
        oldarg = objv[1];
        objv[1] = inst->thisptr;
        Tcl_IncrRefCount(inst->thisptr);
        rcode = (*meth->method)(clientData,interp,objc,objv);
        objv[1] = oldarg;
        Tcl_DecrRefCount(inst->thisptr);
        return rcode;
      }
      meth++;
    }
    /* Check class methods for a match */
    if (strcmp(method,"cget") == 0) {
      if (objc < 3) {
        Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
        return TCL_ERROR;
      }
      attrname = Tcl_GetStringFromObj(objv[2],NULL);
      attr = cls->attributes;
      while (attr && attr->name) {
        if ((strcmp(attr->name, attrname) == 0) && (attr->getmethod)) {
          oldarg = objv[1];
          objv[1] = inst->thisptr;
          Tcl_IncrRefCount(inst->thisptr);
          rcode = (*attr->getmethod)(clientData,interp,2, objv);
          objv[1] = oldarg;
          Tcl_DecrRefCount(inst->thisptr);
          return rcode;
        }
        attr++;
      }
      if (strcmp(attrname, "-this") == 0) {
        Tcl_SetObjResult(interp, Tcl_DuplicateObj(inst->thisptr));
        return TCL_OK;
      }
      if (strcmp(attrname, "-thisown") == 0) {
        if (SWIG_Thisown(inst->thisvalue)) {
          Tcl_SetResult(interp,(char*)"1",TCL_STATIC);
        } else {
          Tcl_SetResult(interp,(char*)"0",TCL_STATIC);
        }
        return TCL_OK;
      }
    } else if (strcmp(method, "configure") == 0) {
      int i;
      if (objc < 4) {
        Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
        return TCL_ERROR;
      }
      i = 2;
      while (i < objc) {
        attrname = Tcl_GetStringFromObj(objv[i],NULL);
        attr = cls->attributes;
        while (attr && attr->name) {
          if ((strcmp(attr->name, attrname) == 0) && (attr->setmethod)) {
            oldarg = objv[i];
            objv[i] = inst->thisptr;
            Tcl_IncrRefCount(inst->thisptr);
            rcode = (*attr->setmethod)(clientData,interp,3, &objv[i-1]);
            objv[i] = oldarg;
            Tcl_DecrRefCount(inst->thisptr);
            if (rcode != TCL_OK) return rcode;
            numconf += 2;
          }
          attr++;
        }
        i+=2;
      }
    }
  }
  if (strcmp(method,"configure") == 0) {
    if (numconf >= objc) {
      return TCL_OK;
    } else {
      Tcl_SetResult(interp,(char *) "Invalid attribute name.", TCL_STATIC);
      return TCL_ERROR;
    }
  }
  if (strcmp(method,"cget") == 0) {
    Tcl_SetResult(interp,(char *) "Invalid attribute name.", TCL_STATIC);
    return TCL_ERROR;
  }
  Tcl_SetResult(interp, (char *) "Invalid method. Must be one of: configure cget -acquire -disown -delete", TCL_STATIC);
  cls = inst->classptr;
  bi = 0;
  while (cls) {
    meth = cls->methods;
    while (meth && meth->name) {
      char *cr = (char *) Tcl_GetStringResult(interp);
      size_t meth_len = strlen(meth->name);
      char* where = strchr(cr,':');
      while(where) {
        where = strstr(where, meth->name);
        if(where) {
          if(where[-1] == ' ' && (where[meth_len] == ' ' || where[meth_len]==0)) {
            break;
          } else {
            where++;
          }
        }
      }

      if (!where)
        Tcl_AppendElement(interp, (char *) meth->name);
      meth++;
    }
    cls = inst->classptr->bases[bi++];
  }
  return TCL_ERROR;
}

/* This function takes the current result and turns it into an object command */
SWIGRUNTIME Tcl_Obj *
SWIG_Tcl_NewInstanceObj(Tcl_Interp *interp, void *thisvalue, swig_type_info *type, int flags) {
  Tcl_Obj *robj = SWIG_NewPointerObj(thisvalue, type,0);
  /* Check to see if this pointer belongs to a class or not */
  if ((type->clientdata) && (interp)) {
    Tcl_CmdInfo    ci;
    char          *name;
    name = Tcl_GetStringFromObj(robj,NULL);
    if (!Tcl_GetCommandInfo(interp,name, &ci) || (flags)) {
      swig_instance *newinst = (swig_instance *) malloc(sizeof(swig_instance));
      newinst->thisptr = Tcl_DuplicateObj(robj);
      Tcl_IncrRefCount(newinst->thisptr);
      newinst->thisvalue = thisvalue;
      newinst->classptr = (swig_class *) type->clientdata;
      newinst->destroy = flags;
      newinst->cmdtok = Tcl_CreateObjCommand(interp, Tcl_GetStringFromObj(robj,NULL), (swig_wrapper_func) SWIG_MethodCommand, (ClientData) newinst, (swig_delete_func) SWIG_ObjectDelete);
      if (flags) {
        SWIG_Acquire(thisvalue);
      }
    }
  }
  return robj;
}

/* Function to create objects */
SWIGRUNTIME int
SWIG_Tcl_ObjectConstructor(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj          *newObj = 0;
  void             *thisvalue = 0;
  swig_instance   *newinst = 0;
  swig_class      *classptr = (swig_class *) clientData;
  swig_wrapper     cons = 0;
  char             *name = 0;
  int               firstarg = 0;
  int               thisarg = 0;
  int               destroy = 1;

  if (!classptr) {
    Tcl_SetResult(interp, (char *) "swig: internal runtime error. No class object defined.", TCL_STATIC);
    return TCL_ERROR;
  }
  cons = classptr->constructor;
  if (objc > 1) {
    char *s = Tcl_GetStringFromObj(objv[1],NULL);
    if (strcmp(s,"-this") == 0) {
      thisarg = 2;
      cons = 0;
    } else if (strcmp(s,"-args") == 0) {
      firstarg = 1;
    } else if (objc == 2) {
      firstarg = 1;
      name = s;
    } else if (objc >= 3) {
      char *s1;
      name = s;
      s1 = Tcl_GetStringFromObj(objv[2],NULL);
      if (strcmp(s1,"-this") == 0) {
	thisarg = 3;
	cons = 0;
      } else {
	firstarg = 1;
      }
    }
  }
  if (cons) {
    int result;
    result = (*cons)(0, interp, objc-firstarg, &objv[firstarg]);
    if (result != TCL_OK) {
      return result;
    }
    newObj = Tcl_DuplicateObj(Tcl_GetObjResult(interp));
    if (!name) name = Tcl_GetStringFromObj(newObj,NULL);
  } else if (thisarg > 0) {
    if (thisarg < objc) {
      destroy = 0;
      newObj = Tcl_DuplicateObj(objv[thisarg]);
      if (!name) name = Tcl_GetStringFromObj(newObj,NULL);
    } else {
      Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
      return TCL_ERROR;
    }
  } else {
    Tcl_SetResult(interp, (char *) "No constructor available.", TCL_STATIC);
    return TCL_ERROR;
  }
  if (SWIG_Tcl_ConvertPtr(interp,newObj, (void **) &thisvalue, *(classptr->type), 0) != SWIG_OK) {
    Tcl_DecrRefCount(newObj);
    return TCL_ERROR;
  }
  newinst = (swig_instance *) malloc(sizeof(swig_instance));
  newinst->thisptr = newObj;
  Tcl_IncrRefCount(newObj);
  newinst->thisvalue = thisvalue;
  newinst->classptr = classptr;
  newinst->destroy = destroy;
  if (destroy) {
    SWIG_Acquire(thisvalue);
  }
  newinst->cmdtok = Tcl_CreateObjCommand(interp,name, (swig_wrapper) SWIG_MethodCommand, (ClientData) newinst, (swig_delete_func) SWIG_ObjectDelete);
  return TCL_OK;
}

/* -----------------------------------------------------------------------------*
 *   Get arguments 
 * -----------------------------------------------------------------------------*/
SWIGRUNTIME int
SWIG_Tcl_GetArgs(Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[], const char *fmt, ...) {
  int        argno = 0, opt = 0;
  long       tempi;
  double     tempd;
  const char *c;
  va_list    ap;
  void      *vptr;
  Tcl_Obj   *obj = 0;
  swig_type_info *ty;

  va_start(ap,fmt);
  for (c = fmt; (*c && (*c != ':') && (*c != ';')); c++,argno++) {
    if (*c == '|') {
      opt = 1;
      c++;
    }
    if (argno >= (objc-1)) {
      if (!opt) {
        Tcl_SetResult(interp, (char *) "Wrong number of arguments ", TCL_STATIC);
        goto argerror;
      } else {
        va_end(ap);
        return TCL_OK;
      }
    }

    vptr = va_arg(ap,void *);
    if (vptr) {
      if (isupper(*c)) {
        obj = SWIG_Tcl_GetConstantObj(Tcl_GetStringFromObj(objv[argno+1],0));
        if (!obj) obj = objv[argno+1];
      } else {
        obj = objv[argno+1];
      }
      switch(*c) {
      case 'i': case 'I':
      case 'l': case 'L':
      case 'h': case 'H':
      case 'b': case 'B':
        if (Tcl_GetLongFromObj(interp,obj,&tempi) != TCL_OK) goto argerror;
        if ((*c == 'i') || (*c == 'I')) *((int *)vptr) = (int)tempi;
        else if ((*c == 'l') || (*c == 'L')) *((long *)vptr) = (long)tempi;
        else if ((*c == 'h') || (*c == 'H')) *((short*)vptr) = (short)tempi;
        else if ((*c == 'b') || (*c == 'B')) *((unsigned char *)vptr) = (unsigned char)tempi;
        break;
      case 'f': case 'F':
      case 'd': case 'D':
        if (Tcl_GetDoubleFromObj(interp,obj,&tempd) != TCL_OK) goto argerror;
        if ((*c == 'f') || (*c == 'F')) *((float *) vptr) = (float)tempd;
        else if ((*c == 'd') || (*c == 'D')) *((double*) vptr) = tempd;
        break;
      case 's': case 'S':
        if (*(c+1) == '#') {
          int *vlptr = (int *) va_arg(ap, void *);
          *((char **) vptr) = Tcl_GetStringFromObj(obj, vlptr);
          c++;
        } else {
          *((char **)vptr) = Tcl_GetStringFromObj(obj,NULL);
        }
        break;
      case 'c': case 'C':
        *((char *)vptr) = *(Tcl_GetStringFromObj(obj,NULL));
        break;
      case 'p': case 'P':
        ty = (swig_type_info *) va_arg(ap, void *);
        if (SWIG_Tcl_ConvertPtr(interp, obj, (void **) vptr, ty, 0) != SWIG_OK) goto argerror;
        break;
      case 'o': case 'O':
        *((Tcl_Obj **)vptr) = objv[argno+1];
        break;
      default:
        break;
      }
    }
  }

  if ((*c != ';') && ((objc-1) > argno)) {
    Tcl_SetResult(interp, (char *) "Wrong # args.", TCL_STATIC);
    goto argerror;
  }
  va_end(ap);
  return TCL_OK;

 argerror:
  {
    char temp[32];
    sprintf(temp,"%d", argno+1);
    c = strchr(fmt,':');
    if (!c) c = strchr(fmt,';');
    if (!c) c = (char *)"";
    Tcl_AppendResult(interp,c," argument ", temp, NULL);
    va_end(ap);
    return TCL_ERROR;
  }
}

#ifdef __cplusplus
#if 0
{ /* cc-mode */
#endif
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_SAL_hexapod swig_types[0]
#define SWIGTYPE_p_char swig_types[1]
#define SWIGTYPE_p_float swig_types[2]
#define SWIGTYPE_p_hexapod_ActuatorsC swig_types[3]
#define SWIGTYPE_p_hexapod_ApplicationC swig_types[4]
#define SWIGTYPE_p_hexapod_ElectricalC swig_types[5]
#define SWIGTYPE_p_hexapod_LimitSensorsC swig_types[6]
#define SWIGTYPE_p_hexapod_MetrologyC swig_types[7]
#define SWIGTYPE_p_hexapod_TCC swig_types[8]
#define SWIGTYPE_p_hexapod__Actuators swig_types[9]
#define SWIGTYPE_p_hexapod__ActuatorsSeq swig_types[10]
#define SWIGTYPE_p_hexapod__Application swig_types[11]
#define SWIGTYPE_p_hexapod__ApplicationSeq swig_types[12]
#define SWIGTYPE_p_hexapod__Electrical swig_types[13]
#define SWIGTYPE_p_hexapod__ElectricalSeq swig_types[14]
#define SWIGTYPE_p_hexapod__LimitSensors swig_types[15]
#define SWIGTYPE_p_hexapod__LimitSensorsSeq swig_types[16]
#define SWIGTYPE_p_hexapod__Metrology swig_types[17]
#define SWIGTYPE_p_hexapod__MetrologySeq swig_types[18]
#define SWIGTYPE_p_hexapod__TC swig_types[19]
#define SWIGTYPE_p_hexapod__TCSeq swig_types[20]
#define SWIGTYPE_p_hexapod__ackcmdSeq swig_types[21]
#define SWIGTYPE_p_hexapod__command swig_types[22]
#define SWIGTYPE_p_hexapod__commandSeq swig_types[23]
#define SWIGTYPE_p_hexapod__logeventSeq swig_types[24]
#define SWIGTYPE_p_hexapod_ackcmdC swig_types[25]
#define SWIGTYPE_p_hexapod_commandC swig_types[26]
#define SWIGTYPE_p_hexapod_logeventC swig_types[27]
#define SWIGTYPE_p_long swig_types[28]
#define SWIGTYPE_p_salCHAR swig_types[29]
#define SWIGTYPE_p_salINT swig_types[30]
#define SWIGTYPE_p_salLONG swig_types[31]
#define SWIGTYPE_p_salReturn swig_types[32]
#define SWIGTYPE_p_salUINT swig_types[33]
#define SWIGTYPE_p_short swig_types[34]
static swig_type_info *swig_types[36];
static swig_module_info swig_module = {swig_types, 35, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Sal_hexapod_Init
#define SWIG_name    "sal_hexapod"
#define SWIG_prefix  ""
#define SWIG_version "0.0"

#define SWIGVERSION 0x010340 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>



#ifdef __cplusplus
extern "C" {
#endif
#ifdef MAC_TCL
#pragma export on
#endif
SWIGEXPORT int SWIG_init(Tcl_Interp *);
#ifdef MAC_TCL
#pragma export off
#endif
#ifdef __cplusplus
}
#endif

/* Compatibility version for TCL stubs */
#ifndef SWIG_TCL_STUBS_VERSION
#define SWIG_TCL_STUBS_VERSION "8.1"
#endif




  #include <string>
  #include <cassert>
  #include <string>
  #include <iostream>
  #include <fstream>
  #include "SAL_defines.h"
  #include "ccpp_dds_dcps.h"
  #include "ccpp_sal_hexapod.h"

  #include "CheckStatus.h"
  #include "SAL_hexapod.h"



SWIGINTERN int
SWIG_AsCharPtrAndSize(Tcl_Obj *obj, char** cptr, size_t* psize, int *alloc)
{ 
  int len = 0;
  char *cstr = Tcl_GetStringFromObj(obj, &len);
  if (cstr) {
    if (cptr)  *cptr = cstr;
    if (psize) *psize = len + 1;
    if (alloc) *alloc = SWIG_OLDOBJ;
    return SWIG_OK;
  }
  return SWIG_TypeError;
}





SWIGINTERN int
SWIG_AsCharArray(Tcl_Obj * obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    if ((csize == size + 1) && cptr && !(cptr[csize-1])) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERNINLINE Tcl_Obj *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  return (size < INT_MAX) ? Tcl_NewStringObj(carray, static_cast< int >(size)) : NULL;
}


SWIGINTERN int
SWIG_AsVal_long SWIG_TCL_DECL_ARGS_2(Tcl_Obj *obj, long* val)
{
  long v;
  if (Tcl_GetLongFromObj(0,obj, &v) == TCL_OK) {
    if (val) *val = (long) v;
    return SWIG_OK;
  }
  return SWIG_TypeError;
}


SWIGINTERNINLINE Tcl_Obj* 
SWIG_From_long  (long value)
{
  if (((long) INT_MIN <= value) && (value <= (long) INT_MAX)) {
    return Tcl_NewIntObj(static_cast< int >(value));
  } else {
    return Tcl_NewLongObj(value);
  }
}

#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN int
_wrap_SAL_hexapod_putSample__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SAL_hexapod *arg1 = (SAL_hexapod *) 0 ;
  hexapod::Actuators arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  salReturn result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SAL_hexapod_putSample self data ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SAL_hexapod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SAL_hexapod_putSample" "', argument " "1"" of type '" "SAL_hexapod *""'"); 
  }
  arg1 = reinterpret_cast< SAL_hexapod * >(argp1);
  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_hexapod__Actuators,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SAL_hexapod_putSample" "', argument " "2"" of type '" "hexapod::Actuators""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SAL_hexapod_putSample" "', argument " "2"" of type '" "hexapod::Actuators""'");
    } else {
      arg2 = *(reinterpret_cast< hexapod::Actuators * >(argp2));
    }
  }
  result = (arg1)->putSample(arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new salReturn(static_cast< const salReturn& >(result))), SWIGTYPE_p_salReturn, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SAL_hexapod_getSample__SWIG_0(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SAL_hexapod *arg1 = (SAL_hexapod *) 0 ;
  hexapod::ActuatorsSeq arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  salReturn result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SAL_hexapod_getSample self data ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SAL_hexapod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SAL_hexapod_getSample" "', argument " "1"" of type '" "SAL_hexapod *""'"); 
  }
  arg1 = reinterpret_cast< SAL_hexapod * >(argp1);
  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_hexapod__ActuatorsSeq,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SAL_hexapod_getSample" "', argument " "2"" of type '" "hexapod::ActuatorsSeq""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SAL_hexapod_getSample" "', argument " "2"" of type '" "hexapod::ActuatorsSeq""'");
    } else {
      arg2 = *(reinterpret_cast< hexapod::ActuatorsSeq * >(argp2));
    }
  }
  result = (arg1)->getSample(arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new salReturn(static_cast< const salReturn& >(result))), SWIGTYPE_p_salReturn, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SAL_hexapod_putSampleActuators(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SAL_hexapod *arg1 = (SAL_hexapod *) 0 ;
  hexapod_ActuatorsC *arg2 = (hexapod_ActuatorsC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  salReturn result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SAL_hexapod_putSampleActuators self data ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SAL_hexapod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SAL_hexapod_putSampleActuators" "', argument " "1"" of type '" "SAL_hexapod *""'"); 
  }
  arg1 = reinterpret_cast< SAL_hexapod * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_hexapod_ActuatorsC, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SAL_hexapod_putSampleActuators" "', argument " "2"" of type '" "hexapod_ActuatorsC *""'"); 
  }
  arg2 = reinterpret_cast< hexapod_ActuatorsC * >(argp2);
  result = (arg1)->putSampleActuators(arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new salReturn(static_cast< const salReturn& >(result))), SWIGTYPE_p_salReturn, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SAL_hexapod_getSampleActuators(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SAL_hexapod *arg1 = (SAL_hexapod *) 0 ;
  hexapod_ActuatorsC *arg2 = (hexapod_ActuatorsC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  salReturn result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SAL_hexapod_getSampleActuators self data ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SAL_hexapod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SAL_hexapod_getSampleActuators" "', argument " "1"" of type '" "SAL_hexapod *""'"); 
  }
  arg1 = reinterpret_cast< SAL_hexapod * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_hexapod_ActuatorsC, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SAL_hexapod_getSampleActuators" "', argument " "2"" of type '" "hexapod_ActuatorsC *""'"); 
  }
  arg2 = reinterpret_cast< hexapod_ActuatorsC * >(argp2);
  result = (arg1)->getSampleActuators(arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new salReturn(static_cast< const salReturn& >(result))), SWIGTYPE_p_salReturn, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SAL_hexapod_putSample__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SAL_hexapod *arg1 = (SAL_hexapod *) 0 ;
  hexapod::Application arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  salReturn result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SAL_hexapod_putSample self data ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SAL_hexapod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SAL_hexapod_putSample" "', argument " "1"" of type '" "SAL_hexapod *""'"); 
  }
  arg1 = reinterpret_cast< SAL_hexapod * >(argp1);
  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_hexapod__Application,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SAL_hexapod_putSample" "', argument " "2"" of type '" "hexapod::Application""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SAL_hexapod_putSample" "', argument " "2"" of type '" "hexapod::Application""'");
    } else {
      arg2 = *(reinterpret_cast< hexapod::Application * >(argp2));
    }
  }
  result = (arg1)->putSample(arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new salReturn(static_cast< const salReturn& >(result))), SWIGTYPE_p_salReturn, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SAL_hexapod_getSample__SWIG_1(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SAL_hexapod *arg1 = (SAL_hexapod *) 0 ;
  hexapod::ApplicationSeq arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  salReturn result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SAL_hexapod_getSample self data ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SAL_hexapod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SAL_hexapod_getSample" "', argument " "1"" of type '" "SAL_hexapod *""'"); 
  }
  arg1 = reinterpret_cast< SAL_hexapod * >(argp1);
  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_hexapod__ApplicationSeq,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SAL_hexapod_getSample" "', argument " "2"" of type '" "hexapod::ApplicationSeq""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SAL_hexapod_getSample" "', argument " "2"" of type '" "hexapod::ApplicationSeq""'");
    } else {
      arg2 = *(reinterpret_cast< hexapod::ApplicationSeq * >(argp2));
    }
  }
  result = (arg1)->getSample(arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new salReturn(static_cast< const salReturn& >(result))), SWIGTYPE_p_salReturn, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SAL_hexapod_putSampleApplication(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SAL_hexapod *arg1 = (SAL_hexapod *) 0 ;
  hexapod_ApplicationC *arg2 = (hexapod_ApplicationC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  salReturn result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SAL_hexapod_putSampleApplication self data ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SAL_hexapod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SAL_hexapod_putSampleApplication" "', argument " "1"" of type '" "SAL_hexapod *""'"); 
  }
  arg1 = reinterpret_cast< SAL_hexapod * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_hexapod_ApplicationC, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SAL_hexapod_putSampleApplication" "', argument " "2"" of type '" "hexapod_ApplicationC *""'"); 
  }
  arg2 = reinterpret_cast< hexapod_ApplicationC * >(argp2);
  result = (arg1)->putSampleApplication(arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new salReturn(static_cast< const salReturn& >(result))), SWIGTYPE_p_salReturn, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SAL_hexapod_getSampleApplication(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SAL_hexapod *arg1 = (SAL_hexapod *) 0 ;
  hexapod_ApplicationC *arg2 = (hexapod_ApplicationC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  salReturn result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SAL_hexapod_getSampleApplication self data ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SAL_hexapod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SAL_hexapod_getSampleApplication" "', argument " "1"" of type '" "SAL_hexapod *""'"); 
  }
  arg1 = reinterpret_cast< SAL_hexapod * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_hexapod_ApplicationC, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SAL_hexapod_getSampleApplication" "', argument " "2"" of type '" "hexapod_ApplicationC *""'"); 
  }
  arg2 = reinterpret_cast< hexapod_ApplicationC * >(argp2);
  result = (arg1)->getSampleApplication(arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new salReturn(static_cast< const salReturn& >(result))), SWIGTYPE_p_salReturn, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SAL_hexapod_putSample__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SAL_hexapod *arg1 = (SAL_hexapod *) 0 ;
  hexapod::Electrical arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  salReturn result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SAL_hexapod_putSample self data ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SAL_hexapod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SAL_hexapod_putSample" "', argument " "1"" of type '" "SAL_hexapod *""'"); 
  }
  arg1 = reinterpret_cast< SAL_hexapod * >(argp1);
  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_hexapod__Electrical,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SAL_hexapod_putSample" "', argument " "2"" of type '" "hexapod::Electrical""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SAL_hexapod_putSample" "', argument " "2"" of type '" "hexapod::Electrical""'");
    } else {
      arg2 = *(reinterpret_cast< hexapod::Electrical * >(argp2));
    }
  }
  result = (arg1)->putSample(arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new salReturn(static_cast< const salReturn& >(result))), SWIGTYPE_p_salReturn, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SAL_hexapod_getSample__SWIG_2(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SAL_hexapod *arg1 = (SAL_hexapod *) 0 ;
  hexapod::ElectricalSeq arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  salReturn result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SAL_hexapod_getSample self data ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SAL_hexapod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SAL_hexapod_getSample" "', argument " "1"" of type '" "SAL_hexapod *""'"); 
  }
  arg1 = reinterpret_cast< SAL_hexapod * >(argp1);
  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_hexapod__ElectricalSeq,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SAL_hexapod_getSample" "', argument " "2"" of type '" "hexapod::ElectricalSeq""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SAL_hexapod_getSample" "', argument " "2"" of type '" "hexapod::ElectricalSeq""'");
    } else {
      arg2 = *(reinterpret_cast< hexapod::ElectricalSeq * >(argp2));
    }
  }
  result = (arg1)->getSample(arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new salReturn(static_cast< const salReturn& >(result))), SWIGTYPE_p_salReturn, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SAL_hexapod_putSampleElectrical(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SAL_hexapod *arg1 = (SAL_hexapod *) 0 ;
  hexapod_ElectricalC *arg2 = (hexapod_ElectricalC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  salReturn result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SAL_hexapod_putSampleElectrical self data ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SAL_hexapod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SAL_hexapod_putSampleElectrical" "', argument " "1"" of type '" "SAL_hexapod *""'"); 
  }
  arg1 = reinterpret_cast< SAL_hexapod * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_hexapod_ElectricalC, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SAL_hexapod_putSampleElectrical" "', argument " "2"" of type '" "hexapod_ElectricalC *""'"); 
  }
  arg2 = reinterpret_cast< hexapod_ElectricalC * >(argp2);
  result = (arg1)->putSampleElectrical(arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new salReturn(static_cast< const salReturn& >(result))), SWIGTYPE_p_salReturn, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SAL_hexapod_getSampleElectrical(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SAL_hexapod *arg1 = (SAL_hexapod *) 0 ;
  hexapod_ElectricalC *arg2 = (hexapod_ElectricalC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  salReturn result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SAL_hexapod_getSampleElectrical self data ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SAL_hexapod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SAL_hexapod_getSampleElectrical" "', argument " "1"" of type '" "SAL_hexapod *""'"); 
  }
  arg1 = reinterpret_cast< SAL_hexapod * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_hexapod_ElectricalC, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SAL_hexapod_getSampleElectrical" "', argument " "2"" of type '" "hexapod_ElectricalC *""'"); 
  }
  arg2 = reinterpret_cast< hexapod_ElectricalC * >(argp2);
  result = (arg1)->getSampleElectrical(arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new salReturn(static_cast< const salReturn& >(result))), SWIGTYPE_p_salReturn, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SAL_hexapod_putSample__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SAL_hexapod *arg1 = (SAL_hexapod *) 0 ;
  hexapod::LimitSensors arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  salReturn result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SAL_hexapod_putSample self data ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SAL_hexapod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SAL_hexapod_putSample" "', argument " "1"" of type '" "SAL_hexapod *""'"); 
  }
  arg1 = reinterpret_cast< SAL_hexapod * >(argp1);
  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_hexapod__LimitSensors,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SAL_hexapod_putSample" "', argument " "2"" of type '" "hexapod::LimitSensors""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SAL_hexapod_putSample" "', argument " "2"" of type '" "hexapod::LimitSensors""'");
    } else {
      arg2 = *(reinterpret_cast< hexapod::LimitSensors * >(argp2));
    }
  }
  result = (arg1)->putSample(arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new salReturn(static_cast< const salReturn& >(result))), SWIGTYPE_p_salReturn, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SAL_hexapod_getSample__SWIG_3(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SAL_hexapod *arg1 = (SAL_hexapod *) 0 ;
  hexapod::LimitSensorsSeq arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  salReturn result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SAL_hexapod_getSample self data ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SAL_hexapod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SAL_hexapod_getSample" "', argument " "1"" of type '" "SAL_hexapod *""'"); 
  }
  arg1 = reinterpret_cast< SAL_hexapod * >(argp1);
  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_hexapod__LimitSensorsSeq,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SAL_hexapod_getSample" "', argument " "2"" of type '" "hexapod::LimitSensorsSeq""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SAL_hexapod_getSample" "', argument " "2"" of type '" "hexapod::LimitSensorsSeq""'");
    } else {
      arg2 = *(reinterpret_cast< hexapod::LimitSensorsSeq * >(argp2));
    }
  }
  result = (arg1)->getSample(arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new salReturn(static_cast< const salReturn& >(result))), SWIGTYPE_p_salReturn, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SAL_hexapod_putSampleLimitSensors(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SAL_hexapod *arg1 = (SAL_hexapod *) 0 ;
  hexapod_LimitSensorsC *arg2 = (hexapod_LimitSensorsC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  salReturn result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SAL_hexapod_putSampleLimitSensors self data ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SAL_hexapod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SAL_hexapod_putSampleLimitSensors" "', argument " "1"" of type '" "SAL_hexapod *""'"); 
  }
  arg1 = reinterpret_cast< SAL_hexapod * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_hexapod_LimitSensorsC, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SAL_hexapod_putSampleLimitSensors" "', argument " "2"" of type '" "hexapod_LimitSensorsC *""'"); 
  }
  arg2 = reinterpret_cast< hexapod_LimitSensorsC * >(argp2);
  result = (arg1)->putSampleLimitSensors(arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new salReturn(static_cast< const salReturn& >(result))), SWIGTYPE_p_salReturn, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SAL_hexapod_getSampleLimitSensors(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SAL_hexapod *arg1 = (SAL_hexapod *) 0 ;
  hexapod_LimitSensorsC *arg2 = (hexapod_LimitSensorsC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  salReturn result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SAL_hexapod_getSampleLimitSensors self data ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SAL_hexapod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SAL_hexapod_getSampleLimitSensors" "', argument " "1"" of type '" "SAL_hexapod *""'"); 
  }
  arg1 = reinterpret_cast< SAL_hexapod * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_hexapod_LimitSensorsC, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SAL_hexapod_getSampleLimitSensors" "', argument " "2"" of type '" "hexapod_LimitSensorsC *""'"); 
  }
  arg2 = reinterpret_cast< hexapod_LimitSensorsC * >(argp2);
  result = (arg1)->getSampleLimitSensors(arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new salReturn(static_cast< const salReturn& >(result))), SWIGTYPE_p_salReturn, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SAL_hexapod_putSample__SWIG_4(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SAL_hexapod *arg1 = (SAL_hexapod *) 0 ;
  hexapod::Metrology arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  salReturn result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SAL_hexapod_putSample self data ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SAL_hexapod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SAL_hexapod_putSample" "', argument " "1"" of type '" "SAL_hexapod *""'"); 
  }
  arg1 = reinterpret_cast< SAL_hexapod * >(argp1);
  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_hexapod__Metrology,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SAL_hexapod_putSample" "', argument " "2"" of type '" "hexapod::Metrology""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SAL_hexapod_putSample" "', argument " "2"" of type '" "hexapod::Metrology""'");
    } else {
      arg2 = *(reinterpret_cast< hexapod::Metrology * >(argp2));
    }
  }
  result = (arg1)->putSample(arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new salReturn(static_cast< const salReturn& >(result))), SWIGTYPE_p_salReturn, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SAL_hexapod_getSample__SWIG_4(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SAL_hexapod *arg1 = (SAL_hexapod *) 0 ;
  hexapod::MetrologySeq arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  salReturn result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SAL_hexapod_getSample self data ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SAL_hexapod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SAL_hexapod_getSample" "', argument " "1"" of type '" "SAL_hexapod *""'"); 
  }
  arg1 = reinterpret_cast< SAL_hexapod * >(argp1);
  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_hexapod__MetrologySeq,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SAL_hexapod_getSample" "', argument " "2"" of type '" "hexapod::MetrologySeq""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SAL_hexapod_getSample" "', argument " "2"" of type '" "hexapod::MetrologySeq""'");
    } else {
      arg2 = *(reinterpret_cast< hexapod::MetrologySeq * >(argp2));
    }
  }
  result = (arg1)->getSample(arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new salReturn(static_cast< const salReturn& >(result))), SWIGTYPE_p_salReturn, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SAL_hexapod_putSampleMetrology(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SAL_hexapod *arg1 = (SAL_hexapod *) 0 ;
  hexapod_MetrologyC *arg2 = (hexapod_MetrologyC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  salReturn result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SAL_hexapod_putSampleMetrology self data ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SAL_hexapod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SAL_hexapod_putSampleMetrology" "', argument " "1"" of type '" "SAL_hexapod *""'"); 
  }
  arg1 = reinterpret_cast< SAL_hexapod * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_hexapod_MetrologyC, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SAL_hexapod_putSampleMetrology" "', argument " "2"" of type '" "hexapod_MetrologyC *""'"); 
  }
  arg2 = reinterpret_cast< hexapod_MetrologyC * >(argp2);
  result = (arg1)->putSampleMetrology(arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new salReturn(static_cast< const salReturn& >(result))), SWIGTYPE_p_salReturn, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SAL_hexapod_getSampleMetrology(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SAL_hexapod *arg1 = (SAL_hexapod *) 0 ;
  hexapod_MetrologyC *arg2 = (hexapod_MetrologyC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  salReturn result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SAL_hexapod_getSampleMetrology self data ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SAL_hexapod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SAL_hexapod_getSampleMetrology" "', argument " "1"" of type '" "SAL_hexapod *""'"); 
  }
  arg1 = reinterpret_cast< SAL_hexapod * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_hexapod_MetrologyC, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SAL_hexapod_getSampleMetrology" "', argument " "2"" of type '" "hexapod_MetrologyC *""'"); 
  }
  arg2 = reinterpret_cast< hexapod_MetrologyC * >(argp2);
  result = (arg1)->getSampleMetrology(arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new salReturn(static_cast< const salReturn& >(result))), SWIGTYPE_p_salReturn, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SAL_hexapod_putSample__SWIG_5(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SAL_hexapod *arg1 = (SAL_hexapod *) 0 ;
  hexapod::TC arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  salReturn result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SAL_hexapod_putSample self data ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SAL_hexapod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SAL_hexapod_putSample" "', argument " "1"" of type '" "SAL_hexapod *""'"); 
  }
  arg1 = reinterpret_cast< SAL_hexapod * >(argp1);
  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_hexapod__TC,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SAL_hexapod_putSample" "', argument " "2"" of type '" "hexapod::TC""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SAL_hexapod_putSample" "', argument " "2"" of type '" "hexapod::TC""'");
    } else {
      arg2 = *(reinterpret_cast< hexapod::TC * >(argp2));
    }
  }
  result = (arg1)->putSample(arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new salReturn(static_cast< const salReturn& >(result))), SWIGTYPE_p_salReturn, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SAL_hexapod_putSample(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SAL_hexapod, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_hexapod__Actuators, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SAL_hexapod_putSample__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SAL_hexapod, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_hexapod__Application, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SAL_hexapod_putSample__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SAL_hexapod, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_hexapod__Electrical, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SAL_hexapod_putSample__SWIG_2(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SAL_hexapod, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_hexapod__LimitSensors, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SAL_hexapod_putSample__SWIG_3(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SAL_hexapod, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_hexapod__Metrology, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SAL_hexapod_putSample__SWIG_4(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SAL_hexapod, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_hexapod__TC, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SAL_hexapod_putSample__SWIG_5(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'SAL_hexapod_putSample'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SAL_hexapod_getSample__SWIG_5(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SAL_hexapod *arg1 = (SAL_hexapod *) 0 ;
  hexapod::TCSeq arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  salReturn result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SAL_hexapod_getSample self data ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SAL_hexapod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SAL_hexapod_getSample" "', argument " "1"" of type '" "SAL_hexapod *""'"); 
  }
  arg1 = reinterpret_cast< SAL_hexapod * >(argp1);
  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_hexapod__TCSeq,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SAL_hexapod_getSample" "', argument " "2"" of type '" "hexapod::TCSeq""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SAL_hexapod_getSample" "', argument " "2"" of type '" "hexapod::TCSeq""'");
    } else {
      arg2 = *(reinterpret_cast< hexapod::TCSeq * >(argp2));
    }
  }
  result = (arg1)->getSample(arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new salReturn(static_cast< const salReturn& >(result))), SWIGTYPE_p_salReturn, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SAL_hexapod_getSample(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj *CONST *argv = objv+1;
  int argc = objc-1;
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SAL_hexapod, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_hexapod__ActuatorsSeq, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SAL_hexapod_getSample__SWIG_0(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SAL_hexapod, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_hexapod__ApplicationSeq, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SAL_hexapod_getSample__SWIG_1(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SAL_hexapod, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_hexapod__ElectricalSeq, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SAL_hexapod_getSample__SWIG_2(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SAL_hexapod, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_hexapod__LimitSensorsSeq, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SAL_hexapod_getSample__SWIG_3(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SAL_hexapod, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_hexapod__MetrologySeq, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SAL_hexapod_getSample__SWIG_4(clientData, interp, objc, argv - 1);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SAL_hexapod, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_hexapod__TCSeq, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SAL_hexapod_getSample__SWIG_5(clientData, interp, objc, argv - 1);
      }
    }
  }
  
  Tcl_SetResult(interp,(char *) "No matching function for overloaded 'SAL_hexapod_getSample'", TCL_STATIC);
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SAL_hexapod_putSampleTC(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SAL_hexapod *arg1 = (SAL_hexapod *) 0 ;
  hexapod_TCC *arg2 = (hexapod_TCC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  salReturn result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SAL_hexapod_putSampleTC self data ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SAL_hexapod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SAL_hexapod_putSampleTC" "', argument " "1"" of type '" "SAL_hexapod *""'"); 
  }
  arg1 = reinterpret_cast< SAL_hexapod * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_hexapod_TCC, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SAL_hexapod_putSampleTC" "', argument " "2"" of type '" "hexapod_TCC *""'"); 
  }
  arg2 = reinterpret_cast< hexapod_TCC * >(argp2);
  result = (arg1)->putSampleTC(arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new salReturn(static_cast< const salReturn& >(result))), SWIGTYPE_p_salReturn, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SAL_hexapod_getSampleTC(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SAL_hexapod *arg1 = (SAL_hexapod *) 0 ;
  hexapod_TCC *arg2 = (hexapod_TCC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  salReturn result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SAL_hexapod_getSampleTC self data ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SAL_hexapod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SAL_hexapod_getSampleTC" "', argument " "1"" of type '" "SAL_hexapod *""'"); 
  }
  arg1 = reinterpret_cast< SAL_hexapod * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_hexapod_TCC, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SAL_hexapod_getSampleTC" "', argument " "2"" of type '" "hexapod_TCC *""'"); 
  }
  arg2 = reinterpret_cast< hexapod_TCC * >(argp2);
  result = (arg1)->getSampleTC(arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new salReturn(static_cast< const salReturn& >(result))), SWIGTYPE_p_salReturn, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SAL_hexapod_salTypeSupport(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SAL_hexapod *arg1 = (SAL_hexapod *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SAL_hexapod_salTypeSupport self topicName ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SAL_hexapod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SAL_hexapod_salTypeSupport" "', argument " "1"" of type '" "SAL_hexapod *""'"); 
  }
  arg1 = reinterpret_cast< SAL_hexapod * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SAL_hexapod_salTypeSupport" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->salTypeSupport(arg2);
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SAL_hexapod_salTelemetryPub(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SAL_hexapod *arg1 = (SAL_hexapod *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SAL_hexapod_salTelemetryPub self topicName ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SAL_hexapod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SAL_hexapod_salTelemetryPub" "', argument " "1"" of type '" "SAL_hexapod *""'"); 
  }
  arg1 = reinterpret_cast< SAL_hexapod * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SAL_hexapod_salTelemetryPub" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->salTelemetryPub(arg2);
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SAL_hexapod_salTelemetrySub(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SAL_hexapod *arg1 = (SAL_hexapod *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SAL_hexapod_salTelemetrySub self topicName ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SAL_hexapod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SAL_hexapod_salTelemetrySub" "', argument " "1"" of type '" "SAL_hexapod *""'"); 
  }
  arg1 = reinterpret_cast< SAL_hexapod * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SAL_hexapod_salTelemetrySub" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->salTelemetrySub(arg2);
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SAL_hexapod_salEvent(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SAL_hexapod *arg1 = (SAL_hexapod *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SAL_hexapod_salEvent self topicName ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SAL_hexapod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SAL_hexapod_salEvent" "', argument " "1"" of type '" "SAL_hexapod *""'"); 
  }
  arg1 = reinterpret_cast< SAL_hexapod * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SAL_hexapod_salEvent" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  (arg1)->salEvent(arg2);
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SAL_hexapod_getResponse(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SAL_hexapod *arg1 = (SAL_hexapod *) 0 ;
  hexapod::ackcmdSeq arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  salReturn result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SAL_hexapod_getResponse self data ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SAL_hexapod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SAL_hexapod_getResponse" "', argument " "1"" of type '" "SAL_hexapod *""'"); 
  }
  arg1 = reinterpret_cast< SAL_hexapod * >(argp1);
  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_hexapod__ackcmdSeq,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SAL_hexapod_getResponse" "', argument " "2"" of type '" "hexapod::ackcmdSeq""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SAL_hexapod_getResponse" "', argument " "2"" of type '" "hexapod::ackcmdSeq""'");
    } else {
      arg2 = *(reinterpret_cast< hexapod::ackcmdSeq * >(argp2));
    }
  }
  result = (arg1)->getResponse(arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new salReturn(static_cast< const salReturn& >(result))), SWIGTYPE_p_salReturn, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SAL_hexapod_getEvent(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SAL_hexapod *arg1 = (SAL_hexapod *) 0 ;
  hexapod::logeventSeq arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  salReturn result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SAL_hexapod_getEvent self data ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SAL_hexapod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SAL_hexapod_getEvent" "', argument " "1"" of type '" "SAL_hexapod *""'"); 
  }
  arg1 = reinterpret_cast< SAL_hexapod * >(argp1);
  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_hexapod__logeventSeq,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SAL_hexapod_getEvent" "', argument " "2"" of type '" "hexapod::logeventSeq""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SAL_hexapod_getEvent" "', argument " "2"" of type '" "hexapod::logeventSeq""'");
    } else {
      arg2 = *(reinterpret_cast< hexapod::logeventSeq * >(argp2));
    }
  }
  result = (arg1)->getEvent(arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new salReturn(static_cast< const salReturn& >(result))), SWIGTYPE_p_salReturn, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SAL_hexapod_salShutdown(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SAL_hexapod *arg1 = (SAL_hexapod *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SAL_hexapod_salShutdown self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SAL_hexapod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SAL_hexapod_salShutdown" "', argument " "1"" of type '" "SAL_hexapod *""'"); 
  }
  arg1 = reinterpret_cast< SAL_hexapod * >(argp1);
  (arg1)->salShutdown();
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SAL_hexapod_salInitialize(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SAL_hexapod *arg1 = (SAL_hexapod *) 0 ;
  salUINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SAL_hexapod_salInitialize self aKey ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SAL_hexapod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SAL_hexapod_salInitialize" "', argument " "1"" of type '" "SAL_hexapod *""'"); 
  }
  arg1 = reinterpret_cast< SAL_hexapod * >(argp1);
  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_salUINT,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SAL_hexapod_salInitialize" "', argument " "2"" of type '" "salUINT""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SAL_hexapod_salInitialize" "', argument " "2"" of type '" "salUINT""'");
    } else {
      arg2 = *(reinterpret_cast< salUINT * >(argp2));
    }
  }
  (arg1)->salInitialize(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SAL_hexapod_salCommand(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SAL_hexapod *arg1 = (SAL_hexapod *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:SAL_hexapod_salCommand self command response ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SAL_hexapod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SAL_hexapod_salCommand" "', argument " "1"" of type '" "SAL_hexapod *""'"); 
  }
  arg1 = reinterpret_cast< SAL_hexapod * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SAL_hexapod_salCommand" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SAL_hexapod_salCommand" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->salCommand(arg2,arg3);
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SAL_hexapod_salProcessor(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SAL_hexapod *arg1 = (SAL_hexapod *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:SAL_hexapod_salProcessor self command response ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SAL_hexapod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SAL_hexapod_salProcessor" "', argument " "1"" of type '" "SAL_hexapod *""'"); 
  }
  arg1 = reinterpret_cast< SAL_hexapod * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SAL_hexapod_salProcessor" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SAL_hexapod_salProcessor" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  (arg1)->salProcessor(arg2,arg3);
  
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SAL_hexapod_issueCommand(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SAL_hexapod *arg1 = (SAL_hexapod *) 0 ;
  hexapod::command arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  salUINT result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SAL_hexapod_issueCommand self data ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SAL_hexapod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SAL_hexapod_issueCommand" "', argument " "1"" of type '" "SAL_hexapod *""'"); 
  }
  arg1 = reinterpret_cast< SAL_hexapod * >(argp1);
  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_hexapod__command,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SAL_hexapod_issueCommand" "', argument " "2"" of type '" "hexapod::command""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SAL_hexapod_issueCommand" "', argument " "2"" of type '" "hexapod::command""'");
    } else {
      arg2 = *(reinterpret_cast< hexapod::command * >(argp2));
    }
  }
  result = (arg1)->issueCommand(arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new salUINT(static_cast< const salUINT& >(result))), SWIGTYPE_p_salUINT, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SAL_hexapod_ackCommand(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SAL_hexapod *arg1 = (SAL_hexapod *) 0 ;
  salUINT arg2 ;
  salLONG arg3 ;
  salLONG arg4 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  salReturn result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooooo:SAL_hexapod_ackCommand self cmdSeqNum ack error result ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SAL_hexapod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SAL_hexapod_ackCommand" "', argument " "1"" of type '" "SAL_hexapod *""'"); 
  }
  arg1 = reinterpret_cast< SAL_hexapod * >(argp1);
  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_salUINT,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SAL_hexapod_ackCommand" "', argument " "2"" of type '" "salUINT""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SAL_hexapod_ackCommand" "', argument " "2"" of type '" "salUINT""'");
    } else {
      arg2 = *(reinterpret_cast< salUINT * >(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_salLONG,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SAL_hexapod_ackCommand" "', argument " "3"" of type '" "salLONG""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SAL_hexapod_ackCommand" "', argument " "3"" of type '" "salLONG""'");
    } else {
      arg3 = *(reinterpret_cast< salLONG * >(argp3));
    }
  }
  {
    res4 = SWIG_ConvertPtr(objv[4], &argp4, SWIGTYPE_p_salLONG,  0 );
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SAL_hexapod_ackCommand" "', argument " "4"" of type '" "salLONG""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SAL_hexapod_ackCommand" "', argument " "4"" of type '" "salLONG""'");
    } else {
      arg4 = *(reinterpret_cast< salLONG * >(argp4));
    }
  }
  res5 = SWIG_AsCharPtrAndSize(objv[5], &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "SAL_hexapod_ackCommand" "', argument " "5"" of type '" "char *""'");
  }
  arg5 = reinterpret_cast< char * >(buf5);
  result = (arg1)->ackCommand(arg2,arg3,arg4,arg5);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new salReturn(static_cast< const salReturn& >(result))), SWIGTYPE_p_salReturn, SWIG_POINTER_OWN | 0 ));
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return TCL_OK;
fail:
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SAL_hexapod_acceptCommand(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SAL_hexapod *arg1 = (SAL_hexapod *) 0 ;
  hexapod::commandSeq arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  salReturn result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SAL_hexapod_acceptCommand self data ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SAL_hexapod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SAL_hexapod_acceptCommand" "', argument " "1"" of type '" "SAL_hexapod *""'"); 
  }
  arg1 = reinterpret_cast< SAL_hexapod * >(argp1);
  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_hexapod__commandSeq,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SAL_hexapod_acceptCommand" "', argument " "2"" of type '" "hexapod::commandSeq""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SAL_hexapod_acceptCommand" "', argument " "2"" of type '" "hexapod::commandSeq""'");
    } else {
      arg2 = *(reinterpret_cast< hexapod::commandSeq * >(argp2));
    }
  }
  result = (arg1)->acceptCommand(arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new salReturn(static_cast< const salReturn& >(result))), SWIGTYPE_p_salReturn, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SAL_hexapod_checkCommand(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SAL_hexapod *arg1 = (SAL_hexapod *) 0 ;
  salINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  salReturn result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SAL_hexapod_checkCommand self cmdSeqNum ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SAL_hexapod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SAL_hexapod_checkCommand" "', argument " "1"" of type '" "SAL_hexapod *""'"); 
  }
  arg1 = reinterpret_cast< SAL_hexapod * >(argp1);
  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_salINT,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SAL_hexapod_checkCommand" "', argument " "2"" of type '" "salINT""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SAL_hexapod_checkCommand" "', argument " "2"" of type '" "salINT""'");
    } else {
      arg2 = *(reinterpret_cast< salINT * >(argp2));
    }
  }
  result = (arg1)->checkCommand(arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new salReturn(static_cast< const salReturn& >(result))), SWIGTYPE_p_salReturn, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SAL_hexapod_cancelCommand(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SAL_hexapod *arg1 = (SAL_hexapod *) 0 ;
  salINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  salReturn result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SAL_hexapod_cancelCommand self cmdSeqNum ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SAL_hexapod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SAL_hexapod_cancelCommand" "', argument " "1"" of type '" "SAL_hexapod *""'"); 
  }
  arg1 = reinterpret_cast< SAL_hexapod * >(argp1);
  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_salINT,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SAL_hexapod_cancelCommand" "', argument " "2"" of type '" "salINT""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SAL_hexapod_cancelCommand" "', argument " "2"" of type '" "salINT""'");
    } else {
      arg2 = *(reinterpret_cast< salINT * >(argp2));
    }
  }
  result = (arg1)->cancelCommand(arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new salReturn(static_cast< const salReturn& >(result))), SWIGTYPE_p_salReturn, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SAL_hexapod_abortCommand(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SAL_hexapod *arg1 = (SAL_hexapod *) 0 ;
  salINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  salReturn result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SAL_hexapod_abortCommand self cmdSeqNum ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SAL_hexapod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SAL_hexapod_abortCommand" "', argument " "1"" of type '" "SAL_hexapod *""'"); 
  }
  arg1 = reinterpret_cast< SAL_hexapod * >(argp1);
  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_salINT,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SAL_hexapod_abortCommand" "', argument " "2"" of type '" "salINT""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SAL_hexapod_abortCommand" "', argument " "2"" of type '" "salINT""'");
    } else {
      arg2 = *(reinterpret_cast< salINT * >(argp2));
    }
  }
  result = (arg1)->abortCommand(arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new salReturn(static_cast< const salReturn& >(result))), SWIGTYPE_p_salReturn, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SAL_hexapod_waitForCompletion(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SAL_hexapod *arg1 = (SAL_hexapod *) 0 ;
  salINT arg2 ;
  salUINT arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  salReturn result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:SAL_hexapod_waitForCompletion self cmdSeqNum timeout ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SAL_hexapod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SAL_hexapod_waitForCompletion" "', argument " "1"" of type '" "SAL_hexapod *""'"); 
  }
  arg1 = reinterpret_cast< SAL_hexapod * >(argp1);
  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_salINT,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SAL_hexapod_waitForCompletion" "', argument " "2"" of type '" "salINT""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SAL_hexapod_waitForCompletion" "', argument " "2"" of type '" "salINT""'");
    } else {
      arg2 = *(reinterpret_cast< salINT * >(argp2));
    }
  }
  {
    res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_salUINT,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SAL_hexapod_waitForCompletion" "', argument " "3"" of type '" "salUINT""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SAL_hexapod_waitForCompletion" "', argument " "3"" of type '" "salUINT""'");
    } else {
      arg3 = *(reinterpret_cast< salUINT * >(argp3));
    }
  }
  result = (arg1)->waitForCompletion(arg2,arg3);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new salReturn(static_cast< const salReturn& >(result))), SWIGTYPE_p_salReturn, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SAL_hexapod_setDebugLevel(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SAL_hexapod *arg1 = (SAL_hexapod *) 0 ;
  salUINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  salReturn result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SAL_hexapod_setDebugLevel self level ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SAL_hexapod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SAL_hexapod_setDebugLevel" "', argument " "1"" of type '" "SAL_hexapod *""'"); 
  }
  arg1 = reinterpret_cast< SAL_hexapod * >(argp1);
  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_salUINT,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SAL_hexapod_setDebugLevel" "', argument " "2"" of type '" "salUINT""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SAL_hexapod_setDebugLevel" "', argument " "2"" of type '" "salUINT""'");
    } else {
      arg2 = *(reinterpret_cast< salUINT * >(argp2));
    }
  }
  result = (arg1)->setDebugLevel(arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new salReturn(static_cast< const salReturn& >(result))), SWIGTYPE_p_salReturn, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SAL_hexapod_getDebugLevel(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SAL_hexapod *arg1 = (SAL_hexapod *) 0 ;
  salUINT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  salUINT result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SAL_hexapod_getDebugLevel self level ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SAL_hexapod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SAL_hexapod_getDebugLevel" "', argument " "1"" of type '" "SAL_hexapod *""'"); 
  }
  arg1 = reinterpret_cast< SAL_hexapod * >(argp1);
  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_salUINT,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SAL_hexapod_getDebugLevel" "', argument " "2"" of type '" "salUINT""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SAL_hexapod_getDebugLevel" "', argument " "2"" of type '" "salUINT""'");
    } else {
      arg2 = *(reinterpret_cast< salUINT * >(argp2));
    }
  }
  result = (arg1)->getDebugLevel(arg2);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new salUINT(static_cast< const salUINT& >(result))), SWIGTYPE_p_salUINT, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SAL_hexapod_getOrigin(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SAL_hexapod *arg1 = (SAL_hexapod *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  salUINT result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SAL_hexapod_getOrigin self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SAL_hexapod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SAL_hexapod_getOrigin" "', argument " "1"" of type '" "SAL_hexapod *""'"); 
  }
  arg1 = reinterpret_cast< SAL_hexapod * >(argp1);
  result = (arg1)->getOrigin();
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new salUINT(static_cast< const salUINT& >(result))), SWIGTYPE_p_salUINT, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SAL_hexapod_getProperty(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SAL_hexapod *arg1 = (SAL_hexapod *) 0 ;
  salCHAR *arg2 = (salCHAR *) 0 ;
  salCHAR *arg3 = (salCHAR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  salUINT result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:SAL_hexapod_getProperty self property value ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SAL_hexapod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SAL_hexapod_getProperty" "', argument " "1"" of type '" "SAL_hexapod *""'"); 
  }
  arg1 = reinterpret_cast< SAL_hexapod * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_salCHAR, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SAL_hexapod_getProperty" "', argument " "2"" of type '" "salCHAR *""'"); 
  }
  arg2 = reinterpret_cast< salCHAR * >(argp2);
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_salCHAR, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SAL_hexapod_getProperty" "', argument " "3"" of type '" "salCHAR *""'"); 
  }
  arg3 = reinterpret_cast< salCHAR * >(argp3);
  result = (arg1)->getProperty(arg2,arg3);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new salUINT(static_cast< const salUINT& >(result))), SWIGTYPE_p_salUINT, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SAL_hexapod_setProperty(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SAL_hexapod *arg1 = (SAL_hexapod *) 0 ;
  salCHAR *arg2 = (salCHAR *) 0 ;
  salCHAR *arg3 = (salCHAR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  salReturn result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:SAL_hexapod_setProperty self property value ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SAL_hexapod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SAL_hexapod_setProperty" "', argument " "1"" of type '" "SAL_hexapod *""'"); 
  }
  arg1 = reinterpret_cast< SAL_hexapod * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_salCHAR, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SAL_hexapod_setProperty" "', argument " "2"" of type '" "salCHAR *""'"); 
  }
  arg2 = reinterpret_cast< salCHAR * >(argp2);
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_salCHAR, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SAL_hexapod_setProperty" "', argument " "3"" of type '" "salCHAR *""'"); 
  }
  arg3 = reinterpret_cast< salCHAR * >(argp3);
  result = (arg1)->setProperty(arg2,arg3);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new salReturn(static_cast< const salReturn& >(result))), SWIGTYPE_p_salReturn, SWIG_POINTER_OWN | 0 ));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SAL_hexapod_logError(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SAL_hexapod *arg1 = (SAL_hexapod *) 0 ;
  salReturn arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SAL_hexapod_logError self status ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SAL_hexapod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SAL_hexapod_logError" "', argument " "1"" of type '" "SAL_hexapod *""'"); 
  }
  arg1 = reinterpret_cast< SAL_hexapod * >(argp1);
  {
    res2 = SWIG_ConvertPtr(objv[2], &argp2, SWIGTYPE_p_salReturn,  0 );
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SAL_hexapod_logError" "', argument " "2"" of type '" "salReturn""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SAL_hexapod_logError" "', argument " "2"" of type '" "salReturn""'");
    } else {
      arg2 = *(reinterpret_cast< salReturn * >(argp2));
    }
  }
  (arg1)->logError(arg2);
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SAL_hexapod_logEvent(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SAL_hexapod *arg1 = (SAL_hexapod *) 0 ;
  char *arg2 = (char *) 0 ;
  salUINT arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  salReturn result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:SAL_hexapod_logEvent self message priority ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SAL_hexapod, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SAL_hexapod_logEvent" "', argument " "1"" of type '" "SAL_hexapod *""'"); 
  }
  arg1 = reinterpret_cast< SAL_hexapod * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SAL_hexapod_logEvent" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    res3 = SWIG_ConvertPtr(objv[3], &argp3, SWIGTYPE_p_salUINT,  0 );
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SAL_hexapod_logEvent" "', argument " "3"" of type '" "salUINT""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SAL_hexapod_logEvent" "', argument " "3"" of type '" "salUINT""'");
    } else {
      arg3 = *(reinterpret_cast< salUINT * >(argp3));
    }
  }
  result = (arg1)->logEvent(arg2,arg3);
  Tcl_SetObjResult(interp,SWIG_NewInstanceObj((new salReturn(static_cast< const salReturn& >(result))), SWIGTYPE_p_salReturn, SWIG_POINTER_OWN | 0 ));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_SAL_hexapod(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SAL_hexapod *arg1 = (SAL_hexapod *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_SAL_hexapod self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SAL_hexapod, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SAL_hexapod" "', argument " "1"" of type '" "SAL_hexapod *""'"); 
  }
  arg1 = reinterpret_cast< SAL_hexapod * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_SAL_hexapod(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SAL_hexapod *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_SAL_hexapod ") == TCL_ERROR) SWIG_fail;
  result = (SAL_hexapod *)new SAL_hexapod();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_SAL_hexapod,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_SAL_hexapod(void *obj) {
SAL_hexapod *arg1 = (SAL_hexapod *) obj;
delete arg1;
}
static swig_method swig_SAL_hexapod_methods[] = {
    {"putSampleActuators", _wrap_SAL_hexapod_putSampleActuators}, 
    {"getSampleActuators", _wrap_SAL_hexapod_getSampleActuators}, 
    {"putSampleApplication", _wrap_SAL_hexapod_putSampleApplication}, 
    {"getSampleApplication", _wrap_SAL_hexapod_getSampleApplication}, 
    {"putSampleElectrical", _wrap_SAL_hexapod_putSampleElectrical}, 
    {"getSampleElectrical", _wrap_SAL_hexapod_getSampleElectrical}, 
    {"putSampleLimitSensors", _wrap_SAL_hexapod_putSampleLimitSensors}, 
    {"getSampleLimitSensors", _wrap_SAL_hexapod_getSampleLimitSensors}, 
    {"putSampleMetrology", _wrap_SAL_hexapod_putSampleMetrology}, 
    {"getSampleMetrology", _wrap_SAL_hexapod_getSampleMetrology}, 
    {"putSample", _wrap_SAL_hexapod_putSample}, 
    {"getSample", _wrap_SAL_hexapod_getSample}, 
    {"putSampleTC", _wrap_SAL_hexapod_putSampleTC}, 
    {"getSampleTC", _wrap_SAL_hexapod_getSampleTC}, 
    {"salTypeSupport", _wrap_SAL_hexapod_salTypeSupport}, 
    {"salTelemetryPub", _wrap_SAL_hexapod_salTelemetryPub}, 
    {"salTelemetrySub", _wrap_SAL_hexapod_salTelemetrySub}, 
    {"salEvent", _wrap_SAL_hexapod_salEvent}, 
    {"getResponse", _wrap_SAL_hexapod_getResponse}, 
    {"getEvent", _wrap_SAL_hexapod_getEvent}, 
    {"salShutdown", _wrap_SAL_hexapod_salShutdown}, 
    {"salInitialize", _wrap_SAL_hexapod_salInitialize}, 
    {"salCommand", _wrap_SAL_hexapod_salCommand}, 
    {"salProcessor", _wrap_SAL_hexapod_salProcessor}, 
    {"issueCommand", _wrap_SAL_hexapod_issueCommand}, 
    {"ackCommand", _wrap_SAL_hexapod_ackCommand}, 
    {"acceptCommand", _wrap_SAL_hexapod_acceptCommand}, 
    {"checkCommand", _wrap_SAL_hexapod_checkCommand}, 
    {"cancelCommand", _wrap_SAL_hexapod_cancelCommand}, 
    {"abortCommand", _wrap_SAL_hexapod_abortCommand}, 
    {"waitForCompletion", _wrap_SAL_hexapod_waitForCompletion}, 
    {"setDebugLevel", _wrap_SAL_hexapod_setDebugLevel}, 
    {"getDebugLevel", _wrap_SAL_hexapod_getDebugLevel}, 
    {"getOrigin", _wrap_SAL_hexapod_getOrigin}, 
    {"getProperty", _wrap_SAL_hexapod_getProperty}, 
    {"setProperty", _wrap_SAL_hexapod_setProperty}, 
    {"logError", _wrap_SAL_hexapod_logError}, 
    {"logEvent", _wrap_SAL_hexapod_logEvent}, 
    {0,0}
};
static swig_attribute swig_SAL_hexapod_attributes[] = {
    {0,0,0}
};
static swig_class *swig_SAL_hexapod_bases[] = {0};
static const char * swig_SAL_hexapod_base_names[] = {0};
static swig_class _wrap_class_SAL_hexapod = { "SAL_hexapod", &SWIGTYPE_p_SAL_hexapod,_wrap_new_SAL_hexapod, swig_delete_SAL_hexapod, swig_SAL_hexapod_methods, swig_SAL_hexapod_attributes, swig_SAL_hexapod_bases,swig_SAL_hexapod_base_names, &swig_module };
SWIGINTERN int
_wrap_hexapod_ActuatorsC_Raw_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_ActuatorsC *arg1 = (hexapod_ActuatorsC *) 0 ;
  long *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:hexapod_ActuatorsC_Raw_set self Raw ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_ActuatorsC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexapod_ActuatorsC_Raw_set" "', argument " "1"" of type '" "hexapod_ActuatorsC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_ActuatorsC * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hexapod_ActuatorsC_Raw_set" "', argument " "2"" of type '" "long [18]""'"); 
  } 
  arg2 = reinterpret_cast< long * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)18; ++ii) arg1->Raw[ii] = arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""Raw""' of type '""long [18]""'");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hexapod_ActuatorsC_Raw_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_ActuatorsC *arg1 = (hexapod_ActuatorsC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hexapod_ActuatorsC_Raw_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_ActuatorsC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexapod_ActuatorsC_Raw_get" "', argument " "1"" of type '" "hexapod_ActuatorsC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_ActuatorsC * >(argp1);
  result = (long *)(long *) ((arg1)->Raw);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_long,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hexapod_ActuatorsC_Calibrated_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_ActuatorsC *arg1 = (hexapod_ActuatorsC *) 0 ;
  float *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:hexapod_ActuatorsC_Calibrated_set self Calibrated ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_ActuatorsC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexapod_ActuatorsC_Calibrated_set" "', argument " "1"" of type '" "hexapod_ActuatorsC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_ActuatorsC * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hexapod_ActuatorsC_Calibrated_set" "', argument " "2"" of type '" "float [18]""'"); 
  } 
  arg2 = reinterpret_cast< float * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)18; ++ii) arg1->Calibrated[ii] = arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""Calibrated""' of type '""float [18]""'");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hexapod_ActuatorsC_Calibrated_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_ActuatorsC *arg1 = (hexapod_ActuatorsC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hexapod_ActuatorsC_Calibrated_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_ActuatorsC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexapod_ActuatorsC_Calibrated_get" "', argument " "1"" of type '" "hexapod_ActuatorsC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_ActuatorsC * >(argp1);
  result = (float *)(float *) ((arg1)->Calibrated);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_float,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_hexapod_ActuatorsC(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_ActuatorsC *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_hexapod_ActuatorsC ") == TCL_ERROR) SWIG_fail;
  result = (hexapod_ActuatorsC *)new hexapod_ActuatorsC();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_hexapod_ActuatorsC,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_hexapod_ActuatorsC(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_ActuatorsC *arg1 = (hexapod_ActuatorsC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_hexapod_ActuatorsC self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_ActuatorsC, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_hexapod_ActuatorsC" "', argument " "1"" of type '" "hexapod_ActuatorsC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_ActuatorsC * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_hexapod_ActuatorsC(void *obj) {
hexapod_ActuatorsC *arg1 = (hexapod_ActuatorsC *) obj;
delete arg1;
}
static swig_method swig_hexapod_ActuatorsC_methods[] = {
    {0,0}
};
static swig_attribute swig_hexapod_ActuatorsC_attributes[] = {
    { "-Raw",_wrap_hexapod_ActuatorsC_Raw_get, _wrap_hexapod_ActuatorsC_Raw_set},
    { "-Calibrated",_wrap_hexapod_ActuatorsC_Calibrated_get, _wrap_hexapod_ActuatorsC_Calibrated_set},
    {0,0,0}
};
static swig_class *swig_hexapod_ActuatorsC_bases[] = {0};
static const char * swig_hexapod_ActuatorsC_base_names[] = {0};
static swig_class _wrap_class_hexapod_ActuatorsC = { "hexapod_ActuatorsC", &SWIGTYPE_p_hexapod_ActuatorsC,_wrap_new_hexapod_ActuatorsC, swig_delete_hexapod_ActuatorsC, swig_hexapod_ActuatorsC_methods, swig_hexapod_ActuatorsC_attributes, swig_hexapod_ActuatorsC_bases,swig_hexapod_ActuatorsC_base_names, &swig_module };
SWIGINTERN int
_wrap_hexapod_ApplicationC_Demand_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_ApplicationC *arg1 = (hexapod_ApplicationC *) 0 ;
  float *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:hexapod_ApplicationC_Demand_set self Demand ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_ApplicationC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexapod_ApplicationC_Demand_set" "', argument " "1"" of type '" "hexapod_ApplicationC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_ApplicationC * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hexapod_ApplicationC_Demand_set" "', argument " "2"" of type '" "float [6]""'"); 
  } 
  arg2 = reinterpret_cast< float * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)6; ++ii) arg1->Demand[ii] = arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""Demand""' of type '""float [6]""'");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hexapod_ApplicationC_Demand_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_ApplicationC *arg1 = (hexapod_ApplicationC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hexapod_ApplicationC_Demand_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_ApplicationC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexapod_ApplicationC_Demand_get" "', argument " "1"" of type '" "hexapod_ApplicationC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_ApplicationC * >(argp1);
  result = (float *)(float *) ((arg1)->Demand);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_float,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hexapod_ApplicationC_Position_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_ApplicationC *arg1 = (hexapod_ApplicationC *) 0 ;
  float *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:hexapod_ApplicationC_Position_set self Position ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_ApplicationC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexapod_ApplicationC_Position_set" "', argument " "1"" of type '" "hexapod_ApplicationC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_ApplicationC * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hexapod_ApplicationC_Position_set" "', argument " "2"" of type '" "float [6]""'"); 
  } 
  arg2 = reinterpret_cast< float * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)6; ++ii) arg1->Position[ii] = arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""Position""' of type '""float [6]""'");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hexapod_ApplicationC_Position_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_ApplicationC *arg1 = (hexapod_ApplicationC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hexapod_ApplicationC_Position_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_ApplicationC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexapod_ApplicationC_Position_get" "', argument " "1"" of type '" "hexapod_ApplicationC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_ApplicationC * >(argp1);
  result = (float *)(float *) ((arg1)->Position);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_float,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hexapod_ApplicationC_Error_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_ApplicationC *arg1 = (hexapod_ApplicationC *) 0 ;
  float *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:hexapod_ApplicationC_Error_set self Error ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_ApplicationC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexapod_ApplicationC_Error_set" "', argument " "1"" of type '" "hexapod_ApplicationC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_ApplicationC * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hexapod_ApplicationC_Error_set" "', argument " "2"" of type '" "float [6]""'"); 
  } 
  arg2 = reinterpret_cast< float * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)6; ++ii) arg1->Error[ii] = arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""Error""' of type '""float [6]""'");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hexapod_ApplicationC_Error_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_ApplicationC *arg1 = (hexapod_ApplicationC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hexapod_ApplicationC_Error_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_ApplicationC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexapod_ApplicationC_Error_get" "', argument " "1"" of type '" "hexapod_ApplicationC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_ApplicationC * >(argp1);
  result = (float *)(float *) ((arg1)->Error);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_float,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_hexapod_ApplicationC(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_ApplicationC *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_hexapod_ApplicationC ") == TCL_ERROR) SWIG_fail;
  result = (hexapod_ApplicationC *)new hexapod_ApplicationC();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_hexapod_ApplicationC,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_hexapod_ApplicationC(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_ApplicationC *arg1 = (hexapod_ApplicationC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_hexapod_ApplicationC self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_ApplicationC, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_hexapod_ApplicationC" "', argument " "1"" of type '" "hexapod_ApplicationC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_ApplicationC * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_hexapod_ApplicationC(void *obj) {
hexapod_ApplicationC *arg1 = (hexapod_ApplicationC *) obj;
delete arg1;
}
static swig_method swig_hexapod_ApplicationC_methods[] = {
    {0,0}
};
static swig_attribute swig_hexapod_ApplicationC_attributes[] = {
    { "-Demand",_wrap_hexapod_ApplicationC_Demand_get, _wrap_hexapod_ApplicationC_Demand_set},
    { "-Position",_wrap_hexapod_ApplicationC_Position_get, _wrap_hexapod_ApplicationC_Position_set},
    { "-Error",_wrap_hexapod_ApplicationC_Error_get, _wrap_hexapod_ApplicationC_Error_set},
    {0,0,0}
};
static swig_class *swig_hexapod_ApplicationC_bases[] = {0};
static const char * swig_hexapod_ApplicationC_base_names[] = {0};
static swig_class _wrap_class_hexapod_ApplicationC = { "hexapod_ApplicationC", &SWIGTYPE_p_hexapod_ApplicationC,_wrap_new_hexapod_ApplicationC, swig_delete_hexapod_ApplicationC, swig_hexapod_ApplicationC_methods, swig_hexapod_ApplicationC_attributes, swig_hexapod_ApplicationC_bases,swig_hexapod_ApplicationC_base_names, &swig_module };
SWIGINTERN int
_wrap_hexapod_ElectricalC_voltage_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_ElectricalC *arg1 = (hexapod_ElectricalC *) 0 ;
  long *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:hexapod_ElectricalC_voltage_set self voltage ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_ElectricalC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexapod_ElectricalC_voltage_set" "', argument " "1"" of type '" "hexapod_ElectricalC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_ElectricalC * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hexapod_ElectricalC_voltage_set" "', argument " "2"" of type '" "long [16]""'"); 
  } 
  arg2 = reinterpret_cast< long * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)16; ++ii) arg1->voltage[ii] = arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""voltage""' of type '""long [16]""'");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hexapod_ElectricalC_voltage_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_ElectricalC *arg1 = (hexapod_ElectricalC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hexapod_ElectricalC_voltage_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_ElectricalC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexapod_ElectricalC_voltage_get" "', argument " "1"" of type '" "hexapod_ElectricalC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_ElectricalC * >(argp1);
  result = (long *)(long *) ((arg1)->voltage);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_long,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hexapod_ElectricalC_error_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_ElectricalC *arg1 = (hexapod_ElectricalC *) 0 ;
  long *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:hexapod_ElectricalC_error_set self error ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_ElectricalC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexapod_ElectricalC_error_set" "', argument " "1"" of type '" "hexapod_ElectricalC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_ElectricalC * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hexapod_ElectricalC_error_set" "', argument " "2"" of type '" "long [16]""'"); 
  } 
  arg2 = reinterpret_cast< long * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)16; ++ii) arg1->error[ii] = arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""error""' of type '""long [16]""'");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hexapod_ElectricalC_error_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_ElectricalC *arg1 = (hexapod_ElectricalC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hexapod_ElectricalC_error_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_ElectricalC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexapod_ElectricalC_error_get" "', argument " "1"" of type '" "hexapod_ElectricalC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_ElectricalC * >(argp1);
  result = (long *)(long *) ((arg1)->error);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_long,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hexapod_ElectricalC_status_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_ElectricalC *arg1 = (hexapod_ElectricalC *) 0 ;
  short *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:hexapod_ElectricalC_status_set self status ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_ElectricalC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexapod_ElectricalC_status_set" "', argument " "1"" of type '" "hexapod_ElectricalC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_ElectricalC * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_short, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hexapod_ElectricalC_status_set" "', argument " "2"" of type '" "short [16]""'"); 
  } 
  arg2 = reinterpret_cast< short * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)16; ++ii) arg1->status[ii] = arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""status""' of type '""short [16]""'");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hexapod_ElectricalC_status_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_ElectricalC *arg1 = (hexapod_ElectricalC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hexapod_ElectricalC_status_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_ElectricalC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexapod_ElectricalC_status_get" "', argument " "1"" of type '" "hexapod_ElectricalC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_ElectricalC * >(argp1);
  result = (short *)(short *) ((arg1)->status);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_short,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_hexapod_ElectricalC(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_ElectricalC *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_hexapod_ElectricalC ") == TCL_ERROR) SWIG_fail;
  result = (hexapod_ElectricalC *)new hexapod_ElectricalC();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_hexapod_ElectricalC,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_hexapod_ElectricalC(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_ElectricalC *arg1 = (hexapod_ElectricalC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_hexapod_ElectricalC self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_ElectricalC, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_hexapod_ElectricalC" "', argument " "1"" of type '" "hexapod_ElectricalC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_ElectricalC * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_hexapod_ElectricalC(void *obj) {
hexapod_ElectricalC *arg1 = (hexapod_ElectricalC *) obj;
delete arg1;
}
static swig_method swig_hexapod_ElectricalC_methods[] = {
    {0,0}
};
static swig_attribute swig_hexapod_ElectricalC_attributes[] = {
    { "-voltage",_wrap_hexapod_ElectricalC_voltage_get, _wrap_hexapod_ElectricalC_voltage_set},
    { "-error",_wrap_hexapod_ElectricalC_error_get, _wrap_hexapod_ElectricalC_error_set},
    { "-status",_wrap_hexapod_ElectricalC_status_get, _wrap_hexapod_ElectricalC_status_set},
    {0,0,0}
};
static swig_class *swig_hexapod_ElectricalC_bases[] = {0};
static const char * swig_hexapod_ElectricalC_base_names[] = {0};
static swig_class _wrap_class_hexapod_ElectricalC = { "hexapod_ElectricalC", &SWIGTYPE_p_hexapod_ElectricalC,_wrap_new_hexapod_ElectricalC, swig_delete_hexapod_ElectricalC, swig_hexapod_ElectricalC_methods, swig_hexapod_ElectricalC_attributes, swig_hexapod_ElectricalC_bases,swig_hexapod_ElectricalC_base_names, &swig_module };
SWIGINTERN int
_wrap_hexapod_LimitSensorsC_liftoff_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_LimitSensorsC *arg1 = (hexapod_LimitSensorsC *) 0 ;
  short *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:hexapod_LimitSensorsC_liftoff_set self liftoff ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_LimitSensorsC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexapod_LimitSensorsC_liftoff_set" "', argument " "1"" of type '" "hexapod_LimitSensorsC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_LimitSensorsC * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_short, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hexapod_LimitSensorsC_liftoff_set" "', argument " "2"" of type '" "short [18]""'"); 
  } 
  arg2 = reinterpret_cast< short * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)18; ++ii) arg1->liftoff[ii] = arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""liftoff""' of type '""short [18]""'");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hexapod_LimitSensorsC_liftoff_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_LimitSensorsC *arg1 = (hexapod_LimitSensorsC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hexapod_LimitSensorsC_liftoff_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_LimitSensorsC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexapod_LimitSensorsC_liftoff_get" "', argument " "1"" of type '" "hexapod_LimitSensorsC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_LimitSensorsC * >(argp1);
  result = (short *)(short *) ((arg1)->liftoff);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_short,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hexapod_LimitSensorsC_limit_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_LimitSensorsC *arg1 = (hexapod_LimitSensorsC *) 0 ;
  short *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:hexapod_LimitSensorsC_limit_set self limit ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_LimitSensorsC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexapod_LimitSensorsC_limit_set" "', argument " "1"" of type '" "hexapod_LimitSensorsC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_LimitSensorsC * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_short, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hexapod_LimitSensorsC_limit_set" "', argument " "2"" of type '" "short [18]""'"); 
  } 
  arg2 = reinterpret_cast< short * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)18; ++ii) arg1->limit[ii] = arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""limit""' of type '""short [18]""'");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hexapod_LimitSensorsC_limit_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_LimitSensorsC *arg1 = (hexapod_LimitSensorsC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hexapod_LimitSensorsC_limit_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_LimitSensorsC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexapod_LimitSensorsC_limit_get" "', argument " "1"" of type '" "hexapod_LimitSensorsC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_LimitSensorsC * >(argp1);
  result = (short *)(short *) ((arg1)->limit);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_short,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_hexapod_LimitSensorsC(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_LimitSensorsC *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_hexapod_LimitSensorsC ") == TCL_ERROR) SWIG_fail;
  result = (hexapod_LimitSensorsC *)new hexapod_LimitSensorsC();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_hexapod_LimitSensorsC,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_hexapod_LimitSensorsC(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_LimitSensorsC *arg1 = (hexapod_LimitSensorsC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_hexapod_LimitSensorsC self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_LimitSensorsC, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_hexapod_LimitSensorsC" "', argument " "1"" of type '" "hexapod_LimitSensorsC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_LimitSensorsC * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_hexapod_LimitSensorsC(void *obj) {
hexapod_LimitSensorsC *arg1 = (hexapod_LimitSensorsC *) obj;
delete arg1;
}
static swig_method swig_hexapod_LimitSensorsC_methods[] = {
    {0,0}
};
static swig_attribute swig_hexapod_LimitSensorsC_attributes[] = {
    { "-liftoff",_wrap_hexapod_LimitSensorsC_liftoff_get, _wrap_hexapod_LimitSensorsC_liftoff_set},
    { "-limit",_wrap_hexapod_LimitSensorsC_limit_get, _wrap_hexapod_LimitSensorsC_limit_set},
    {0,0,0}
};
static swig_class *swig_hexapod_LimitSensorsC_bases[] = {0};
static const char * swig_hexapod_LimitSensorsC_base_names[] = {0};
static swig_class _wrap_class_hexapod_LimitSensorsC = { "hexapod_LimitSensorsC", &SWIGTYPE_p_hexapod_LimitSensorsC,_wrap_new_hexapod_LimitSensorsC, swig_delete_hexapod_LimitSensorsC, swig_hexapod_LimitSensorsC_methods, swig_hexapod_LimitSensorsC_attributes, swig_hexapod_LimitSensorsC_bases,swig_hexapod_LimitSensorsC_base_names, &swig_module };
SWIGINTERN int
_wrap_hexapod_MetrologyC_distance_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_MetrologyC *arg1 = (hexapod_MetrologyC *) 0 ;
  long *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:hexapod_MetrologyC_distance_set self distance ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_MetrologyC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexapod_MetrologyC_distance_set" "', argument " "1"" of type '" "hexapod_MetrologyC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_MetrologyC * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hexapod_MetrologyC_distance_set" "', argument " "2"" of type '" "long [18]""'"); 
  } 
  arg2 = reinterpret_cast< long * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)18; ++ii) arg1->distance[ii] = arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""distance""' of type '""long [18]""'");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hexapod_MetrologyC_distance_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_MetrologyC *arg1 = (hexapod_MetrologyC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hexapod_MetrologyC_distance_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_MetrologyC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexapod_MetrologyC_distance_get" "', argument " "1"" of type '" "hexapod_MetrologyC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_MetrologyC * >(argp1);
  result = (long *)(long *) ((arg1)->distance);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_long,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hexapod_MetrologyC_error_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_MetrologyC *arg1 = (hexapod_MetrologyC *) 0 ;
  long *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:hexapod_MetrologyC_error_set self error ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_MetrologyC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexapod_MetrologyC_error_set" "', argument " "1"" of type '" "hexapod_MetrologyC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_MetrologyC * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hexapod_MetrologyC_error_set" "', argument " "2"" of type '" "long [18]""'"); 
  } 
  arg2 = reinterpret_cast< long * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)18; ++ii) arg1->error[ii] = arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""error""' of type '""long [18]""'");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hexapod_MetrologyC_error_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_MetrologyC *arg1 = (hexapod_MetrologyC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hexapod_MetrologyC_error_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_MetrologyC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexapod_MetrologyC_error_get" "', argument " "1"" of type '" "hexapod_MetrologyC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_MetrologyC * >(argp1);
  result = (long *)(long *) ((arg1)->error);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_long,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hexapod_MetrologyC_status_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_MetrologyC *arg1 = (hexapod_MetrologyC *) 0 ;
  short *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:hexapod_MetrologyC_status_set self status ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_MetrologyC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexapod_MetrologyC_status_set" "', argument " "1"" of type '" "hexapod_MetrologyC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_MetrologyC * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_short, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hexapod_MetrologyC_status_set" "', argument " "2"" of type '" "short [18]""'"); 
  } 
  arg2 = reinterpret_cast< short * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)18; ++ii) arg1->status[ii] = arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""status""' of type '""short [18]""'");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hexapod_MetrologyC_status_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_MetrologyC *arg1 = (hexapod_MetrologyC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hexapod_MetrologyC_status_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_MetrologyC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexapod_MetrologyC_status_get" "', argument " "1"" of type '" "hexapod_MetrologyC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_MetrologyC * >(argp1);
  result = (short *)(short *) ((arg1)->status);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_short,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_hexapod_MetrologyC(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_MetrologyC *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_hexapod_MetrologyC ") == TCL_ERROR) SWIG_fail;
  result = (hexapod_MetrologyC *)new hexapod_MetrologyC();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_hexapod_MetrologyC,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_hexapod_MetrologyC(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_MetrologyC *arg1 = (hexapod_MetrologyC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_hexapod_MetrologyC self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_MetrologyC, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_hexapod_MetrologyC" "', argument " "1"" of type '" "hexapod_MetrologyC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_MetrologyC * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_hexapod_MetrologyC(void *obj) {
hexapod_MetrologyC *arg1 = (hexapod_MetrologyC *) obj;
delete arg1;
}
static swig_method swig_hexapod_MetrologyC_methods[] = {
    {0,0}
};
static swig_attribute swig_hexapod_MetrologyC_attributes[] = {
    { "-distance",_wrap_hexapod_MetrologyC_distance_get, _wrap_hexapod_MetrologyC_distance_set},
    { "-error",_wrap_hexapod_MetrologyC_error_get, _wrap_hexapod_MetrologyC_error_set},
    { "-status",_wrap_hexapod_MetrologyC_status_get, _wrap_hexapod_MetrologyC_status_set},
    {0,0,0}
};
static swig_class *swig_hexapod_MetrologyC_bases[] = {0};
static const char * swig_hexapod_MetrologyC_base_names[] = {0};
static swig_class _wrap_class_hexapod_MetrologyC = { "hexapod_MetrologyC", &SWIGTYPE_p_hexapod_MetrologyC,_wrap_new_hexapod_MetrologyC, swig_delete_hexapod_MetrologyC, swig_hexapod_MetrologyC_methods, swig_hexapod_MetrologyC_attributes, swig_hexapod_MetrologyC_bases,swig_hexapod_MetrologyC_base_names, &swig_module };
SWIGINTERN int
_wrap_hexapod_TCC_setpoint_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_TCC *arg1 = (hexapod_TCC *) 0 ;
  float *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:hexapod_TCC_setpoint_set self setpoint ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_TCC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexapod_TCC_setpoint_set" "', argument " "1"" of type '" "hexapod_TCC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_TCC * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hexapod_TCC_setpoint_set" "', argument " "2"" of type '" "float [16]""'"); 
  } 
  arg2 = reinterpret_cast< float * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)16; ++ii) arg1->setpoint[ii] = arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""setpoint""' of type '""float [16]""'");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hexapod_TCC_setpoint_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_TCC *arg1 = (hexapod_TCC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hexapod_TCC_setpoint_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_TCC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexapod_TCC_setpoint_get" "', argument " "1"" of type '" "hexapod_TCC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_TCC * >(argp1);
  result = (float *)(float *) ((arg1)->setpoint);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_float,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hexapod_TCC_temperature_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_TCC *arg1 = (hexapod_TCC *) 0 ;
  float *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:hexapod_TCC_temperature_set self temperature ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_TCC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexapod_TCC_temperature_set" "', argument " "1"" of type '" "hexapod_TCC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_TCC * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hexapod_TCC_temperature_set" "', argument " "2"" of type '" "float [16]""'"); 
  } 
  arg2 = reinterpret_cast< float * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)16; ++ii) arg1->temperature[ii] = arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""temperature""' of type '""float [16]""'");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hexapod_TCC_temperature_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_TCC *arg1 = (hexapod_TCC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hexapod_TCC_temperature_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_TCC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexapod_TCC_temperature_get" "', argument " "1"" of type '" "hexapod_TCC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_TCC * >(argp1);
  result = (float *)(float *) ((arg1)->temperature);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_float,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hexapod_TCC_error_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_TCC *arg1 = (hexapod_TCC *) 0 ;
  float *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:hexapod_TCC_error_set self error ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_TCC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexapod_TCC_error_set" "', argument " "1"" of type '" "hexapod_TCC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_TCC * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_float, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hexapod_TCC_error_set" "', argument " "2"" of type '" "float [16]""'"); 
  } 
  arg2 = reinterpret_cast< float * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)16; ++ii) arg1->error[ii] = arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""error""' of type '""float [16]""'");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hexapod_TCC_error_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_TCC *arg1 = (hexapod_TCC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hexapod_TCC_error_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_TCC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexapod_TCC_error_get" "', argument " "1"" of type '" "hexapod_TCC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_TCC * >(argp1);
  result = (float *)(float *) ((arg1)->error);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_float,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hexapod_TCC_status_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_TCC *arg1 = (hexapod_TCC *) 0 ;
  short *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:hexapod_TCC_status_set self status ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_TCC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexapod_TCC_status_set" "', argument " "1"" of type '" "hexapod_TCC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_TCC * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_short, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hexapod_TCC_status_set" "', argument " "2"" of type '" "short [16]""'"); 
  } 
  arg2 = reinterpret_cast< short * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)16; ++ii) arg1->status[ii] = arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""status""' of type '""short [16]""'");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hexapod_TCC_status_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_TCC *arg1 = (hexapod_TCC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hexapod_TCC_status_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_TCC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexapod_TCC_status_get" "', argument " "1"" of type '" "hexapod_TCC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_TCC * >(argp1);
  result = (short *)(short *) ((arg1)->status);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_short,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_hexapod_TCC(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_TCC *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_hexapod_TCC ") == TCL_ERROR) SWIG_fail;
  result = (hexapod_TCC *)new hexapod_TCC();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_hexapod_TCC,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_hexapod_TCC(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_TCC *arg1 = (hexapod_TCC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_hexapod_TCC self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_TCC, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_hexapod_TCC" "', argument " "1"" of type '" "hexapod_TCC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_TCC * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_hexapod_TCC(void *obj) {
hexapod_TCC *arg1 = (hexapod_TCC *) obj;
delete arg1;
}
static swig_method swig_hexapod_TCC_methods[] = {
    {0,0}
};
static swig_attribute swig_hexapod_TCC_attributes[] = {
    { "-setpoint",_wrap_hexapod_TCC_setpoint_get, _wrap_hexapod_TCC_setpoint_set},
    { "-temperature",_wrap_hexapod_TCC_temperature_get, _wrap_hexapod_TCC_temperature_set},
    { "-error",_wrap_hexapod_TCC_error_get, _wrap_hexapod_TCC_error_set},
    { "-status",_wrap_hexapod_TCC_status_get, _wrap_hexapod_TCC_status_set},
    {0,0,0}
};
static swig_class *swig_hexapod_TCC_bases[] = {0};
static const char * swig_hexapod_TCC_base_names[] = {0};
static swig_class _wrap_class_hexapod_TCC = { "hexapod_TCC", &SWIGTYPE_p_hexapod_TCC,_wrap_new_hexapod_TCC, swig_delete_hexapod_TCC, swig_hexapod_TCC_methods, swig_hexapod_TCC_attributes, swig_hexapod_TCC_bases,swig_hexapod_TCC_base_names, &swig_module };
SWIGINTERN int
_wrap_hexapod_commandC_device_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_commandC *arg1 = (hexapod_commandC *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[32] ;
  int res2 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:hexapod_commandC_device_set self device ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_commandC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexapod_commandC_device_set" "', argument " "1"" of type '" "hexapod_commandC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_commandC * >(argp1);
  res2 = SWIG_AsCharArray(objv[2], temp2, 32);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hexapod_commandC_device_set" "', argument " "2"" of type '" "char [32]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->device,arg2,32*sizeof(char));
  else memset(arg1->device,0,32*sizeof(char));
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hexapod_commandC_device_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_commandC *arg1 = (hexapod_commandC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hexapod_commandC_device_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_commandC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexapod_commandC_device_get" "', argument " "1"" of type '" "hexapod_commandC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_commandC * >(argp1);
  result = (char *)(char *) ((arg1)->device);
  {
    size_t size = 32;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    Tcl_SetObjResult(interp,SWIG_FromCharPtrAndSize(result, size));
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hexapod_commandC_property_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_commandC *arg1 = (hexapod_commandC *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[32] ;
  int res2 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:hexapod_commandC_property_set self property ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_commandC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexapod_commandC_property_set" "', argument " "1"" of type '" "hexapod_commandC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_commandC * >(argp1);
  res2 = SWIG_AsCharArray(objv[2], temp2, 32);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hexapod_commandC_property_set" "', argument " "2"" of type '" "char [32]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->property,arg2,32*sizeof(char));
  else memset(arg1->property,0,32*sizeof(char));
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hexapod_commandC_property_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_commandC *arg1 = (hexapod_commandC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hexapod_commandC_property_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_commandC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexapod_commandC_property_get" "', argument " "1"" of type '" "hexapod_commandC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_commandC * >(argp1);
  result = (char *)(char *) ((arg1)->property);
  {
    size_t size = 32;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    Tcl_SetObjResult(interp,SWIG_FromCharPtrAndSize(result, size));
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hexapod_commandC_action_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_commandC *arg1 = (hexapod_commandC *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[32] ;
  int res2 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:hexapod_commandC_action_set self action ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_commandC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexapod_commandC_action_set" "', argument " "1"" of type '" "hexapod_commandC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_commandC * >(argp1);
  res2 = SWIG_AsCharArray(objv[2], temp2, 32);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hexapod_commandC_action_set" "', argument " "2"" of type '" "char [32]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->action,arg2,32*sizeof(char));
  else memset(arg1->action,0,32*sizeof(char));
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hexapod_commandC_action_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_commandC *arg1 = (hexapod_commandC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hexapod_commandC_action_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_commandC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexapod_commandC_action_get" "', argument " "1"" of type '" "hexapod_commandC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_commandC * >(argp1);
  result = (char *)(char *) ((arg1)->action);
  {
    size_t size = 32;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    Tcl_SetObjResult(interp,SWIG_FromCharPtrAndSize(result, size));
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hexapod_commandC_value_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_commandC *arg1 = (hexapod_commandC *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[32] ;
  int res2 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:hexapod_commandC_value_set self value ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_commandC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexapod_commandC_value_set" "', argument " "1"" of type '" "hexapod_commandC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_commandC * >(argp1);
  res2 = SWIG_AsCharArray(objv[2], temp2, 32);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hexapod_commandC_value_set" "', argument " "2"" of type '" "char [32]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->value,arg2,32*sizeof(char));
  else memset(arg1->value,0,32*sizeof(char));
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hexapod_commandC_value_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_commandC *arg1 = (hexapod_commandC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hexapod_commandC_value_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_commandC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexapod_commandC_value_get" "', argument " "1"" of type '" "hexapod_commandC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_commandC * >(argp1);
  result = (char *)(char *) ((arg1)->value);
  {
    size_t size = 32;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    Tcl_SetObjResult(interp,SWIG_FromCharPtrAndSize(result, size));
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hexapod_commandC_modifiers_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_commandC *arg1 = (hexapod_commandC *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[128] ;
  int res2 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:hexapod_commandC_modifiers_set self modifiers ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_commandC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexapod_commandC_modifiers_set" "', argument " "1"" of type '" "hexapod_commandC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_commandC * >(argp1);
  res2 = SWIG_AsCharArray(objv[2], temp2, 128);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hexapod_commandC_modifiers_set" "', argument " "2"" of type '" "char [128]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->modifiers,arg2,128*sizeof(char));
  else memset(arg1->modifiers,0,128*sizeof(char));
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hexapod_commandC_modifiers_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_commandC *arg1 = (hexapod_commandC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hexapod_commandC_modifiers_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_commandC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexapod_commandC_modifiers_get" "', argument " "1"" of type '" "hexapod_commandC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_commandC * >(argp1);
  result = (char *)(char *) ((arg1)->modifiers);
  {
    size_t size = 128;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    Tcl_SetObjResult(interp,SWIG_FromCharPtrAndSize(result, size));
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_hexapod_commandC(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_commandC *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_hexapod_commandC ") == TCL_ERROR) SWIG_fail;
  result = (hexapod_commandC *)new hexapod_commandC();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_hexapod_commandC,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_hexapod_commandC(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_commandC *arg1 = (hexapod_commandC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_hexapod_commandC self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_commandC, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_hexapod_commandC" "', argument " "1"" of type '" "hexapod_commandC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_commandC * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_hexapod_commandC(void *obj) {
hexapod_commandC *arg1 = (hexapod_commandC *) obj;
delete arg1;
}
static swig_method swig_hexapod_commandC_methods[] = {
    {0,0}
};
static swig_attribute swig_hexapod_commandC_attributes[] = {
    { "-device",_wrap_hexapod_commandC_device_get, _wrap_hexapod_commandC_device_set},
    { "-property",_wrap_hexapod_commandC_property_get, _wrap_hexapod_commandC_property_set},
    { "-action",_wrap_hexapod_commandC_action_get, _wrap_hexapod_commandC_action_set},
    { "-value",_wrap_hexapod_commandC_value_get, _wrap_hexapod_commandC_value_set},
    { "-modifiers",_wrap_hexapod_commandC_modifiers_get, _wrap_hexapod_commandC_modifiers_set},
    {0,0,0}
};
static swig_class *swig_hexapod_commandC_bases[] = {0};
static const char * swig_hexapod_commandC_base_names[] = {0};
static swig_class _wrap_class_hexapod_commandC = { "hexapod_commandC", &SWIGTYPE_p_hexapod_commandC,_wrap_new_hexapod_commandC, swig_delete_hexapod_commandC, swig_hexapod_commandC_methods, swig_hexapod_commandC_attributes, swig_hexapod_commandC_bases,swig_hexapod_commandC_base_names, &swig_module };
SWIGINTERN int
_wrap_hexapod_ackcmdC_ack_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_ackcmdC *arg1 = (hexapod_ackcmdC *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:hexapod_ackcmdC_ack_set self ack ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_ackcmdC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexapod_ackcmdC_ack_set" "', argument " "1"" of type '" "hexapod_ackcmdC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_ackcmdC * >(argp1);
  ecode2 = SWIG_AsVal_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "hexapod_ackcmdC_ack_set" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  if (arg1) (arg1)->ack = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hexapod_ackcmdC_ack_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_ackcmdC *arg1 = (hexapod_ackcmdC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hexapod_ackcmdC_ack_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_ackcmdC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexapod_ackcmdC_ack_get" "', argument " "1"" of type '" "hexapod_ackcmdC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_ackcmdC * >(argp1);
  result = (long) ((arg1)->ack);
  Tcl_SetObjResult(interp,SWIG_From_long(static_cast< long >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hexapod_ackcmdC_error_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_ackcmdC *arg1 = (hexapod_ackcmdC *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:hexapod_ackcmdC_error_set self error ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_ackcmdC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexapod_ackcmdC_error_set" "', argument " "1"" of type '" "hexapod_ackcmdC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_ackcmdC * >(argp1);
  ecode2 = SWIG_AsVal_long SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "hexapod_ackcmdC_error_set" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  if (arg1) (arg1)->error = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hexapod_ackcmdC_error_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_ackcmdC *arg1 = (hexapod_ackcmdC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hexapod_ackcmdC_error_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_ackcmdC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexapod_ackcmdC_error_get" "', argument " "1"" of type '" "hexapod_ackcmdC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_ackcmdC * >(argp1);
  result = (long) ((arg1)->error);
  Tcl_SetObjResult(interp,SWIG_From_long(static_cast< long >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hexapod_ackcmdC_result_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_ackcmdC *arg1 = (hexapod_ackcmdC *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[32] ;
  int res2 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:hexapod_ackcmdC_result_set self result ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_ackcmdC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexapod_ackcmdC_result_set" "', argument " "1"" of type '" "hexapod_ackcmdC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_ackcmdC * >(argp1);
  res2 = SWIG_AsCharArray(objv[2], temp2, 32);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hexapod_ackcmdC_result_set" "', argument " "2"" of type '" "char [32]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->result,arg2,32*sizeof(char));
  else memset(arg1->result,0,32*sizeof(char));
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hexapod_ackcmdC_result_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_ackcmdC *arg1 = (hexapod_ackcmdC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hexapod_ackcmdC_result_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_ackcmdC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexapod_ackcmdC_result_get" "', argument " "1"" of type '" "hexapod_ackcmdC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_ackcmdC * >(argp1);
  result = (char *)(char *) ((arg1)->result);
  {
    size_t size = 32;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    Tcl_SetObjResult(interp,SWIG_FromCharPtrAndSize(result, size));
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_hexapod_ackcmdC(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_ackcmdC *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_hexapod_ackcmdC ") == TCL_ERROR) SWIG_fail;
  result = (hexapod_ackcmdC *)new hexapod_ackcmdC();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_hexapod_ackcmdC,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_hexapod_ackcmdC(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_ackcmdC *arg1 = (hexapod_ackcmdC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_hexapod_ackcmdC self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_ackcmdC, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_hexapod_ackcmdC" "', argument " "1"" of type '" "hexapod_ackcmdC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_ackcmdC * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_hexapod_ackcmdC(void *obj) {
hexapod_ackcmdC *arg1 = (hexapod_ackcmdC *) obj;
delete arg1;
}
static swig_method swig_hexapod_ackcmdC_methods[] = {
    {0,0}
};
static swig_attribute swig_hexapod_ackcmdC_attributes[] = {
    { "-ack",_wrap_hexapod_ackcmdC_ack_get, _wrap_hexapod_ackcmdC_ack_set},
    { "-error",_wrap_hexapod_ackcmdC_error_get, _wrap_hexapod_ackcmdC_error_set},
    { "-result",_wrap_hexapod_ackcmdC_result_get, _wrap_hexapod_ackcmdC_result_set},
    {0,0,0}
};
static swig_class *swig_hexapod_ackcmdC_bases[] = {0};
static const char * swig_hexapod_ackcmdC_base_names[] = {0};
static swig_class _wrap_class_hexapod_ackcmdC = { "hexapod_ackcmdC", &SWIGTYPE_p_hexapod_ackcmdC,_wrap_new_hexapod_ackcmdC, swig_delete_hexapod_ackcmdC, swig_hexapod_ackcmdC_methods, swig_hexapod_ackcmdC_attributes, swig_hexapod_ackcmdC_bases,swig_hexapod_ackcmdC_base_names, &swig_module };
SWIGINTERN int
_wrap_hexapod_logeventC_message_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_logeventC *arg1 = (hexapod_logeventC *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[128] ;
  int res2 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:hexapod_logeventC_message_set self message ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_logeventC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexapod_logeventC_message_set" "', argument " "1"" of type '" "hexapod_logeventC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_logeventC * >(argp1);
  res2 = SWIG_AsCharArray(objv[2], temp2, 128);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "hexapod_logeventC_message_set" "', argument " "2"" of type '" "char [128]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->message,arg2,128*sizeof(char));
  else memset(arg1->message,0,128*sizeof(char));
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_hexapod_logeventC_message_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_logeventC *arg1 = (hexapod_logeventC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:hexapod_logeventC_message_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_logeventC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "hexapod_logeventC_message_get" "', argument " "1"" of type '" "hexapod_logeventC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_logeventC * >(argp1);
  result = (char *)(char *) ((arg1)->message);
  {
    size_t size = 128;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    Tcl_SetObjResult(interp,SWIG_FromCharPtrAndSize(result, size));
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_hexapod_logeventC(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_logeventC *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_hexapod_logeventC ") == TCL_ERROR) SWIG_fail;
  result = (hexapod_logeventC *)new hexapod_logeventC();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_hexapod_logeventC,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_hexapod_logeventC(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  hexapod_logeventC *arg1 = (hexapod_logeventC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_hexapod_logeventC self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_hexapod_logeventC, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_hexapod_logeventC" "', argument " "1"" of type '" "hexapod_logeventC *""'"); 
  }
  arg1 = reinterpret_cast< hexapod_logeventC * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_hexapod_logeventC(void *obj) {
hexapod_logeventC *arg1 = (hexapod_logeventC *) obj;
delete arg1;
}
static swig_method swig_hexapod_logeventC_methods[] = {
    {0,0}
};
static swig_attribute swig_hexapod_logeventC_attributes[] = {
    { "-message",_wrap_hexapod_logeventC_message_get, _wrap_hexapod_logeventC_message_set},
    {0,0,0}
};
static swig_class *swig_hexapod_logeventC_bases[] = {0};
static const char * swig_hexapod_logeventC_base_names[] = {0};
static swig_class _wrap_class_hexapod_logeventC = { "hexapod_logeventC", &SWIGTYPE_p_hexapod_logeventC,_wrap_new_hexapod_logeventC, swig_delete_hexapod_logeventC, swig_hexapod_logeventC_methods, swig_hexapod_logeventC_attributes, swig_hexapod_logeventC_bases,swig_hexapod_logeventC_base_names, &swig_module };

static swig_command_info swig_commands[] = {
    { SWIG_prefix "SAL_hexapod_putSampleActuators", (swig_wrapper_func) _wrap_SAL_hexapod_putSampleActuators, NULL},
    { SWIG_prefix "SAL_hexapod_getSampleActuators", (swig_wrapper_func) _wrap_SAL_hexapod_getSampleActuators, NULL},
    { SWIG_prefix "SAL_hexapod_putSampleApplication", (swig_wrapper_func) _wrap_SAL_hexapod_putSampleApplication, NULL},
    { SWIG_prefix "SAL_hexapod_getSampleApplication", (swig_wrapper_func) _wrap_SAL_hexapod_getSampleApplication, NULL},
    { SWIG_prefix "SAL_hexapod_putSampleElectrical", (swig_wrapper_func) _wrap_SAL_hexapod_putSampleElectrical, NULL},
    { SWIG_prefix "SAL_hexapod_getSampleElectrical", (swig_wrapper_func) _wrap_SAL_hexapod_getSampleElectrical, NULL},
    { SWIG_prefix "SAL_hexapod_putSampleLimitSensors", (swig_wrapper_func) _wrap_SAL_hexapod_putSampleLimitSensors, NULL},
    { SWIG_prefix "SAL_hexapod_getSampleLimitSensors", (swig_wrapper_func) _wrap_SAL_hexapod_getSampleLimitSensors, NULL},
    { SWIG_prefix "SAL_hexapod_putSampleMetrology", (swig_wrapper_func) _wrap_SAL_hexapod_putSampleMetrology, NULL},
    { SWIG_prefix "SAL_hexapod_getSampleMetrology", (swig_wrapper_func) _wrap_SAL_hexapod_getSampleMetrology, NULL},
    { SWIG_prefix "SAL_hexapod_putSample", (swig_wrapper_func) _wrap_SAL_hexapod_putSample, NULL},
    { SWIG_prefix "SAL_hexapod_getSample", (swig_wrapper_func) _wrap_SAL_hexapod_getSample, NULL},
    { SWIG_prefix "SAL_hexapod_putSampleTC", (swig_wrapper_func) _wrap_SAL_hexapod_putSampleTC, NULL},
    { SWIG_prefix "SAL_hexapod_getSampleTC", (swig_wrapper_func) _wrap_SAL_hexapod_getSampleTC, NULL},
    { SWIG_prefix "SAL_hexapod_salTypeSupport", (swig_wrapper_func) _wrap_SAL_hexapod_salTypeSupport, NULL},
    { SWIG_prefix "SAL_hexapod_salTelemetryPub", (swig_wrapper_func) _wrap_SAL_hexapod_salTelemetryPub, NULL},
    { SWIG_prefix "SAL_hexapod_salTelemetrySub", (swig_wrapper_func) _wrap_SAL_hexapod_salTelemetrySub, NULL},
    { SWIG_prefix "SAL_hexapod_salEvent", (swig_wrapper_func) _wrap_SAL_hexapod_salEvent, NULL},
    { SWIG_prefix "SAL_hexapod_getResponse", (swig_wrapper_func) _wrap_SAL_hexapod_getResponse, NULL},
    { SWIG_prefix "SAL_hexapod_getEvent", (swig_wrapper_func) _wrap_SAL_hexapod_getEvent, NULL},
    { SWIG_prefix "SAL_hexapod_salShutdown", (swig_wrapper_func) _wrap_SAL_hexapod_salShutdown, NULL},
    { SWIG_prefix "SAL_hexapod_salInitialize", (swig_wrapper_func) _wrap_SAL_hexapod_salInitialize, NULL},
    { SWIG_prefix "SAL_hexapod_salCommand", (swig_wrapper_func) _wrap_SAL_hexapod_salCommand, NULL},
    { SWIG_prefix "SAL_hexapod_salProcessor", (swig_wrapper_func) _wrap_SAL_hexapod_salProcessor, NULL},
    { SWIG_prefix "SAL_hexapod_issueCommand", (swig_wrapper_func) _wrap_SAL_hexapod_issueCommand, NULL},
    { SWIG_prefix "SAL_hexapod_ackCommand", (swig_wrapper_func) _wrap_SAL_hexapod_ackCommand, NULL},
    { SWIG_prefix "SAL_hexapod_acceptCommand", (swig_wrapper_func) _wrap_SAL_hexapod_acceptCommand, NULL},
    { SWIG_prefix "SAL_hexapod_checkCommand", (swig_wrapper_func) _wrap_SAL_hexapod_checkCommand, NULL},
    { SWIG_prefix "SAL_hexapod_cancelCommand", (swig_wrapper_func) _wrap_SAL_hexapod_cancelCommand, NULL},
    { SWIG_prefix "SAL_hexapod_abortCommand", (swig_wrapper_func) _wrap_SAL_hexapod_abortCommand, NULL},
    { SWIG_prefix "SAL_hexapod_waitForCompletion", (swig_wrapper_func) _wrap_SAL_hexapod_waitForCompletion, NULL},
    { SWIG_prefix "SAL_hexapod_setDebugLevel", (swig_wrapper_func) _wrap_SAL_hexapod_setDebugLevel, NULL},
    { SWIG_prefix "SAL_hexapod_getDebugLevel", (swig_wrapper_func) _wrap_SAL_hexapod_getDebugLevel, NULL},
    { SWIG_prefix "SAL_hexapod_getOrigin", (swig_wrapper_func) _wrap_SAL_hexapod_getOrigin, NULL},
    { SWIG_prefix "SAL_hexapod_getProperty", (swig_wrapper_func) _wrap_SAL_hexapod_getProperty, NULL},
    { SWIG_prefix "SAL_hexapod_setProperty", (swig_wrapper_func) _wrap_SAL_hexapod_setProperty, NULL},
    { SWIG_prefix "SAL_hexapod_logError", (swig_wrapper_func) _wrap_SAL_hexapod_logError, NULL},
    { SWIG_prefix "SAL_hexapod_logEvent", (swig_wrapper_func) _wrap_SAL_hexapod_logEvent, NULL},
    { SWIG_prefix "delete_SAL_hexapod", (swig_wrapper_func) _wrap_delete_SAL_hexapod, NULL},
    { SWIG_prefix "new_SAL_hexapod", (swig_wrapper_func) _wrap_new_SAL_hexapod, NULL},
    { SWIG_prefix "SAL_hexapod", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_SAL_hexapod},
    { SWIG_prefix "hexapod_ActuatorsC_Raw_set", (swig_wrapper_func) _wrap_hexapod_ActuatorsC_Raw_set, NULL},
    { SWIG_prefix "hexapod_ActuatorsC_Raw_get", (swig_wrapper_func) _wrap_hexapod_ActuatorsC_Raw_get, NULL},
    { SWIG_prefix "hexapod_ActuatorsC_Calibrated_set", (swig_wrapper_func) _wrap_hexapod_ActuatorsC_Calibrated_set, NULL},
    { SWIG_prefix "hexapod_ActuatorsC_Calibrated_get", (swig_wrapper_func) _wrap_hexapod_ActuatorsC_Calibrated_get, NULL},
    { SWIG_prefix "new_hexapod_ActuatorsC", (swig_wrapper_func) _wrap_new_hexapod_ActuatorsC, NULL},
    { SWIG_prefix "delete_hexapod_ActuatorsC", (swig_wrapper_func) _wrap_delete_hexapod_ActuatorsC, NULL},
    { SWIG_prefix "hexapod_ActuatorsC", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_hexapod_ActuatorsC},
    { SWIG_prefix "hexapod_ApplicationC_Demand_set", (swig_wrapper_func) _wrap_hexapod_ApplicationC_Demand_set, NULL},
    { SWIG_prefix "hexapod_ApplicationC_Demand_get", (swig_wrapper_func) _wrap_hexapod_ApplicationC_Demand_get, NULL},
    { SWIG_prefix "hexapod_ApplicationC_Position_set", (swig_wrapper_func) _wrap_hexapod_ApplicationC_Position_set, NULL},
    { SWIG_prefix "hexapod_ApplicationC_Position_get", (swig_wrapper_func) _wrap_hexapod_ApplicationC_Position_get, NULL},
    { SWIG_prefix "hexapod_ApplicationC_Error_set", (swig_wrapper_func) _wrap_hexapod_ApplicationC_Error_set, NULL},
    { SWIG_prefix "hexapod_ApplicationC_Error_get", (swig_wrapper_func) _wrap_hexapod_ApplicationC_Error_get, NULL},
    { SWIG_prefix "new_hexapod_ApplicationC", (swig_wrapper_func) _wrap_new_hexapod_ApplicationC, NULL},
    { SWIG_prefix "delete_hexapod_ApplicationC", (swig_wrapper_func) _wrap_delete_hexapod_ApplicationC, NULL},
    { SWIG_prefix "hexapod_ApplicationC", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_hexapod_ApplicationC},
    { SWIG_prefix "hexapod_ElectricalC_voltage_set", (swig_wrapper_func) _wrap_hexapod_ElectricalC_voltage_set, NULL},
    { SWIG_prefix "hexapod_ElectricalC_voltage_get", (swig_wrapper_func) _wrap_hexapod_ElectricalC_voltage_get, NULL},
    { SWIG_prefix "hexapod_ElectricalC_error_set", (swig_wrapper_func) _wrap_hexapod_ElectricalC_error_set, NULL},
    { SWIG_prefix "hexapod_ElectricalC_error_get", (swig_wrapper_func) _wrap_hexapod_ElectricalC_error_get, NULL},
    { SWIG_prefix "hexapod_ElectricalC_status_set", (swig_wrapper_func) _wrap_hexapod_ElectricalC_status_set, NULL},
    { SWIG_prefix "hexapod_ElectricalC_status_get", (swig_wrapper_func) _wrap_hexapod_ElectricalC_status_get, NULL},
    { SWIG_prefix "new_hexapod_ElectricalC", (swig_wrapper_func) _wrap_new_hexapod_ElectricalC, NULL},
    { SWIG_prefix "delete_hexapod_ElectricalC", (swig_wrapper_func) _wrap_delete_hexapod_ElectricalC, NULL},
    { SWIG_prefix "hexapod_ElectricalC", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_hexapod_ElectricalC},
    { SWIG_prefix "hexapod_LimitSensorsC_liftoff_set", (swig_wrapper_func) _wrap_hexapod_LimitSensorsC_liftoff_set, NULL},
    { SWIG_prefix "hexapod_LimitSensorsC_liftoff_get", (swig_wrapper_func) _wrap_hexapod_LimitSensorsC_liftoff_get, NULL},
    { SWIG_prefix "hexapod_LimitSensorsC_limit_set", (swig_wrapper_func) _wrap_hexapod_LimitSensorsC_limit_set, NULL},
    { SWIG_prefix "hexapod_LimitSensorsC_limit_get", (swig_wrapper_func) _wrap_hexapod_LimitSensorsC_limit_get, NULL},
    { SWIG_prefix "new_hexapod_LimitSensorsC", (swig_wrapper_func) _wrap_new_hexapod_LimitSensorsC, NULL},
    { SWIG_prefix "delete_hexapod_LimitSensorsC", (swig_wrapper_func) _wrap_delete_hexapod_LimitSensorsC, NULL},
    { SWIG_prefix "hexapod_LimitSensorsC", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_hexapod_LimitSensorsC},
    { SWIG_prefix "hexapod_MetrologyC_distance_set", (swig_wrapper_func) _wrap_hexapod_MetrologyC_distance_set, NULL},
    { SWIG_prefix "hexapod_MetrologyC_distance_get", (swig_wrapper_func) _wrap_hexapod_MetrologyC_distance_get, NULL},
    { SWIG_prefix "hexapod_MetrologyC_error_set", (swig_wrapper_func) _wrap_hexapod_MetrologyC_error_set, NULL},
    { SWIG_prefix "hexapod_MetrologyC_error_get", (swig_wrapper_func) _wrap_hexapod_MetrologyC_error_get, NULL},
    { SWIG_prefix "hexapod_MetrologyC_status_set", (swig_wrapper_func) _wrap_hexapod_MetrologyC_status_set, NULL},
    { SWIG_prefix "hexapod_MetrologyC_status_get", (swig_wrapper_func) _wrap_hexapod_MetrologyC_status_get, NULL},
    { SWIG_prefix "new_hexapod_MetrologyC", (swig_wrapper_func) _wrap_new_hexapod_MetrologyC, NULL},
    { SWIG_prefix "delete_hexapod_MetrologyC", (swig_wrapper_func) _wrap_delete_hexapod_MetrologyC, NULL},
    { SWIG_prefix "hexapod_MetrologyC", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_hexapod_MetrologyC},
    { SWIG_prefix "hexapod_TCC_setpoint_set", (swig_wrapper_func) _wrap_hexapod_TCC_setpoint_set, NULL},
    { SWIG_prefix "hexapod_TCC_setpoint_get", (swig_wrapper_func) _wrap_hexapod_TCC_setpoint_get, NULL},
    { SWIG_prefix "hexapod_TCC_temperature_set", (swig_wrapper_func) _wrap_hexapod_TCC_temperature_set, NULL},
    { SWIG_prefix "hexapod_TCC_temperature_get", (swig_wrapper_func) _wrap_hexapod_TCC_temperature_get, NULL},
    { SWIG_prefix "hexapod_TCC_error_set", (swig_wrapper_func) _wrap_hexapod_TCC_error_set, NULL},
    { SWIG_prefix "hexapod_TCC_error_get", (swig_wrapper_func) _wrap_hexapod_TCC_error_get, NULL},
    { SWIG_prefix "hexapod_TCC_status_set", (swig_wrapper_func) _wrap_hexapod_TCC_status_set, NULL},
    { SWIG_prefix "hexapod_TCC_status_get", (swig_wrapper_func) _wrap_hexapod_TCC_status_get, NULL},
    { SWIG_prefix "new_hexapod_TCC", (swig_wrapper_func) _wrap_new_hexapod_TCC, NULL},
    { SWIG_prefix "delete_hexapod_TCC", (swig_wrapper_func) _wrap_delete_hexapod_TCC, NULL},
    { SWIG_prefix "hexapod_TCC", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_hexapod_TCC},
    { SWIG_prefix "hexapod_commandC_device_set", (swig_wrapper_func) _wrap_hexapod_commandC_device_set, NULL},
    { SWIG_prefix "hexapod_commandC_device_get", (swig_wrapper_func) _wrap_hexapod_commandC_device_get, NULL},
    { SWIG_prefix "hexapod_commandC_property_set", (swig_wrapper_func) _wrap_hexapod_commandC_property_set, NULL},
    { SWIG_prefix "hexapod_commandC_property_get", (swig_wrapper_func) _wrap_hexapod_commandC_property_get, NULL},
    { SWIG_prefix "hexapod_commandC_action_set", (swig_wrapper_func) _wrap_hexapod_commandC_action_set, NULL},
    { SWIG_prefix "hexapod_commandC_action_get", (swig_wrapper_func) _wrap_hexapod_commandC_action_get, NULL},
    { SWIG_prefix "hexapod_commandC_value_set", (swig_wrapper_func) _wrap_hexapod_commandC_value_set, NULL},
    { SWIG_prefix "hexapod_commandC_value_get", (swig_wrapper_func) _wrap_hexapod_commandC_value_get, NULL},
    { SWIG_prefix "hexapod_commandC_modifiers_set", (swig_wrapper_func) _wrap_hexapod_commandC_modifiers_set, NULL},
    { SWIG_prefix "hexapod_commandC_modifiers_get", (swig_wrapper_func) _wrap_hexapod_commandC_modifiers_get, NULL},
    { SWIG_prefix "new_hexapod_commandC", (swig_wrapper_func) _wrap_new_hexapod_commandC, NULL},
    { SWIG_prefix "delete_hexapod_commandC", (swig_wrapper_func) _wrap_delete_hexapod_commandC, NULL},
    { SWIG_prefix "hexapod_commandC", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_hexapod_commandC},
    { SWIG_prefix "hexapod_ackcmdC_ack_set", (swig_wrapper_func) _wrap_hexapod_ackcmdC_ack_set, NULL},
    { SWIG_prefix "hexapod_ackcmdC_ack_get", (swig_wrapper_func) _wrap_hexapod_ackcmdC_ack_get, NULL},
    { SWIG_prefix "hexapod_ackcmdC_error_set", (swig_wrapper_func) _wrap_hexapod_ackcmdC_error_set, NULL},
    { SWIG_prefix "hexapod_ackcmdC_error_get", (swig_wrapper_func) _wrap_hexapod_ackcmdC_error_get, NULL},
    { SWIG_prefix "hexapod_ackcmdC_result_set", (swig_wrapper_func) _wrap_hexapod_ackcmdC_result_set, NULL},
    { SWIG_prefix "hexapod_ackcmdC_result_get", (swig_wrapper_func) _wrap_hexapod_ackcmdC_result_get, NULL},
    { SWIG_prefix "new_hexapod_ackcmdC", (swig_wrapper_func) _wrap_new_hexapod_ackcmdC, NULL},
    { SWIG_prefix "delete_hexapod_ackcmdC", (swig_wrapper_func) _wrap_delete_hexapod_ackcmdC, NULL},
    { SWIG_prefix "hexapod_ackcmdC", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_hexapod_ackcmdC},
    { SWIG_prefix "hexapod_logeventC_message_set", (swig_wrapper_func) _wrap_hexapod_logeventC_message_set, NULL},
    { SWIG_prefix "hexapod_logeventC_message_get", (swig_wrapper_func) _wrap_hexapod_logeventC_message_get, NULL},
    { SWIG_prefix "new_hexapod_logeventC", (swig_wrapper_func) _wrap_new_hexapod_logeventC, NULL},
    { SWIG_prefix "delete_hexapod_logeventC", (swig_wrapper_func) _wrap_delete_hexapod_logeventC, NULL},
    { SWIG_prefix "hexapod_logeventC", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_hexapod_logeventC},
    {0, 0, 0}
};

static swig_var_info swig_variables[] = {
    {0,0,0,0}
};

static swig_const_info swig_constants[] = {
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_SAL_hexapod = {"_p_SAL_hexapod", "SAL_hexapod *", 0, 0, (void*)&_wrap_class_SAL_hexapod, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hexapod_ActuatorsC = {"_p_hexapod_ActuatorsC", "hexapod_ActuatorsC *", 0, 0, (void*)&_wrap_class_hexapod_ActuatorsC, 0};
static swig_type_info _swigt__p_hexapod_ApplicationC = {"_p_hexapod_ApplicationC", "hexapod_ApplicationC *", 0, 0, (void*)&_wrap_class_hexapod_ApplicationC, 0};
static swig_type_info _swigt__p_hexapod_ElectricalC = {"_p_hexapod_ElectricalC", "hexapod_ElectricalC *", 0, 0, (void*)&_wrap_class_hexapod_ElectricalC, 0};
static swig_type_info _swigt__p_hexapod_LimitSensorsC = {"_p_hexapod_LimitSensorsC", "hexapod_LimitSensorsC *", 0, 0, (void*)&_wrap_class_hexapod_LimitSensorsC, 0};
static swig_type_info _swigt__p_hexapod_MetrologyC = {"_p_hexapod_MetrologyC", "hexapod_MetrologyC *", 0, 0, (void*)&_wrap_class_hexapod_MetrologyC, 0};
static swig_type_info _swigt__p_hexapod_TCC = {"_p_hexapod_TCC", "hexapod_TCC *", 0, 0, (void*)&_wrap_class_hexapod_TCC, 0};
static swig_type_info _swigt__p_hexapod__Actuators = {"_p_hexapod__Actuators", "hexapod::Actuators *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hexapod__ActuatorsSeq = {"_p_hexapod__ActuatorsSeq", "hexapod::ActuatorsSeq *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hexapod__Application = {"_p_hexapod__Application", "hexapod::Application *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hexapod__ApplicationSeq = {"_p_hexapod__ApplicationSeq", "hexapod::ApplicationSeq *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hexapod__Electrical = {"_p_hexapod__Electrical", "hexapod::Electrical *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hexapod__ElectricalSeq = {"_p_hexapod__ElectricalSeq", "hexapod::ElectricalSeq *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hexapod__LimitSensors = {"_p_hexapod__LimitSensors", "hexapod::LimitSensors *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hexapod__LimitSensorsSeq = {"_p_hexapod__LimitSensorsSeq", "hexapod::LimitSensorsSeq *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hexapod__Metrology = {"_p_hexapod__Metrology", "hexapod::Metrology *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hexapod__MetrologySeq = {"_p_hexapod__MetrologySeq", "hexapod::MetrologySeq *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hexapod__TC = {"_p_hexapod__TC", "hexapod::TC *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hexapod__TCSeq = {"_p_hexapod__TCSeq", "hexapod::TCSeq *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hexapod__ackcmdSeq = {"_p_hexapod__ackcmdSeq", "hexapod::ackcmdSeq *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hexapod__command = {"_p_hexapod__command", "hexapod::command *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hexapod__commandSeq = {"_p_hexapod__commandSeq", "hexapod::commandSeq *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hexapod__logeventSeq = {"_p_hexapod__logeventSeq", "hexapod::logeventSeq *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_hexapod_ackcmdC = {"_p_hexapod_ackcmdC", "hexapod_ackcmdC *", 0, 0, (void*)&_wrap_class_hexapod_ackcmdC, 0};
static swig_type_info _swigt__p_hexapod_commandC = {"_p_hexapod_commandC", "hexapod_commandC *", 0, 0, (void*)&_wrap_class_hexapod_commandC, 0};
static swig_type_info _swigt__p_hexapod_logeventC = {"_p_hexapod_logeventC", "hexapod_logeventC *", 0, 0, (void*)&_wrap_class_hexapod_logeventC, 0};
static swig_type_info _swigt__p_long = {"_p_long", "long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_salCHAR = {"_p_salCHAR", "salCHAR *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_salINT = {"_p_salINT", "salINT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_salLONG = {"_p_salLONG", "salLONG *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_salReturn = {"_p_salReturn", "salReturn *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_salUINT = {"_p_salUINT", "salUINT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_SAL_hexapod,
  &_swigt__p_char,
  &_swigt__p_float,
  &_swigt__p_hexapod_ActuatorsC,
  &_swigt__p_hexapod_ApplicationC,
  &_swigt__p_hexapod_ElectricalC,
  &_swigt__p_hexapod_LimitSensorsC,
  &_swigt__p_hexapod_MetrologyC,
  &_swigt__p_hexapod_TCC,
  &_swigt__p_hexapod__Actuators,
  &_swigt__p_hexapod__ActuatorsSeq,
  &_swigt__p_hexapod__Application,
  &_swigt__p_hexapod__ApplicationSeq,
  &_swigt__p_hexapod__Electrical,
  &_swigt__p_hexapod__ElectricalSeq,
  &_swigt__p_hexapod__LimitSensors,
  &_swigt__p_hexapod__LimitSensorsSeq,
  &_swigt__p_hexapod__Metrology,
  &_swigt__p_hexapod__MetrologySeq,
  &_swigt__p_hexapod__TC,
  &_swigt__p_hexapod__TCSeq,
  &_swigt__p_hexapod__ackcmdSeq,
  &_swigt__p_hexapod__command,
  &_swigt__p_hexapod__commandSeq,
  &_swigt__p_hexapod__logeventSeq,
  &_swigt__p_hexapod_ackcmdC,
  &_swigt__p_hexapod_commandC,
  &_swigt__p_hexapod_logeventC,
  &_swigt__p_long,
  &_swigt__p_salCHAR,
  &_swigt__p_salINT,
  &_swigt__p_salLONG,
  &_swigt__p_salReturn,
  &_swigt__p_salUINT,
  &_swigt__p_short,
};

static swig_cast_info _swigc__p_SAL_hexapod[] = {  {&_swigt__p_SAL_hexapod, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hexapod_ActuatorsC[] = {  {&_swigt__p_hexapod_ActuatorsC, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hexapod_ApplicationC[] = {  {&_swigt__p_hexapod_ApplicationC, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hexapod_ElectricalC[] = {  {&_swigt__p_hexapod_ElectricalC, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hexapod_LimitSensorsC[] = {  {&_swigt__p_hexapod_LimitSensorsC, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hexapod_MetrologyC[] = {  {&_swigt__p_hexapod_MetrologyC, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hexapod_TCC[] = {  {&_swigt__p_hexapod_TCC, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hexapod__Actuators[] = {  {&_swigt__p_hexapod__Actuators, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hexapod__ActuatorsSeq[] = {  {&_swigt__p_hexapod__ActuatorsSeq, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hexapod__Application[] = {  {&_swigt__p_hexapod__Application, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hexapod__ApplicationSeq[] = {  {&_swigt__p_hexapod__ApplicationSeq, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hexapod__Electrical[] = {  {&_swigt__p_hexapod__Electrical, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hexapod__ElectricalSeq[] = {  {&_swigt__p_hexapod__ElectricalSeq, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hexapod__LimitSensors[] = {  {&_swigt__p_hexapod__LimitSensors, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hexapod__LimitSensorsSeq[] = {  {&_swigt__p_hexapod__LimitSensorsSeq, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hexapod__Metrology[] = {  {&_swigt__p_hexapod__Metrology, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hexapod__MetrologySeq[] = {  {&_swigt__p_hexapod__MetrologySeq, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hexapod__TC[] = {  {&_swigt__p_hexapod__TC, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hexapod__TCSeq[] = {  {&_swigt__p_hexapod__TCSeq, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hexapod__ackcmdSeq[] = {  {&_swigt__p_hexapod__ackcmdSeq, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hexapod__command[] = {  {&_swigt__p_hexapod__command, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hexapod__commandSeq[] = {  {&_swigt__p_hexapod__commandSeq, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hexapod__logeventSeq[] = {  {&_swigt__p_hexapod__logeventSeq, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hexapod_ackcmdC[] = {  {&_swigt__p_hexapod_ackcmdC, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hexapod_commandC[] = {  {&_swigt__p_hexapod_commandC, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_hexapod_logeventC[] = {  {&_swigt__p_hexapod_logeventC, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_salCHAR[] = {  {&_swigt__p_salCHAR, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_salINT[] = {  {&_swigt__p_salINT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_salLONG[] = {  {&_swigt__p_salLONG, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_salReturn[] = {  {&_swigt__p_salReturn, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_salUINT[] = {  {&_swigt__p_salUINT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_SAL_hexapod,
  _swigc__p_char,
  _swigc__p_float,
  _swigc__p_hexapod_ActuatorsC,
  _swigc__p_hexapod_ApplicationC,
  _swigc__p_hexapod_ElectricalC,
  _swigc__p_hexapod_LimitSensorsC,
  _swigc__p_hexapod_MetrologyC,
  _swigc__p_hexapod_TCC,
  _swigc__p_hexapod__Actuators,
  _swigc__p_hexapod__ActuatorsSeq,
  _swigc__p_hexapod__Application,
  _swigc__p_hexapod__ApplicationSeq,
  _swigc__p_hexapod__Electrical,
  _swigc__p_hexapod__ElectricalSeq,
  _swigc__p_hexapod__LimitSensors,
  _swigc__p_hexapod__LimitSensorsSeq,
  _swigc__p_hexapod__Metrology,
  _swigc__p_hexapod__MetrologySeq,
  _swigc__p_hexapod__TC,
  _swigc__p_hexapod__TCSeq,
  _swigc__p_hexapod__ackcmdSeq,
  _swigc__p_hexapod__command,
  _swigc__p_hexapod__commandSeq,
  _swigc__p_hexapod__logeventSeq,
  _swigc__p_hexapod_ackcmdC,
  _swigc__p_hexapod_commandC,
  _swigc__p_hexapod_logeventC,
  _swigc__p_long,
  _swigc__p_salCHAR,
  _swigc__p_salINT,
  _swigc__p_salLONG,
  _swigc__p_salReturn,
  _swigc__p_salUINT,
  _swigc__p_short,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;
  
  clientdata = clientdata;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpeters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif


#ifdef __cplusplus
extern "C" {
#endif
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  
  SWIGINTERN void
  SWIG_Tcl_InstallConstants(Tcl_Interp *interp, swig_const_info constants[]) {
    int i;
    Tcl_Obj *obj;
    
    if (!swigconstTableinit) {
      Tcl_InitHashTable(&swigconstTable, TCL_STRING_KEYS);
      swigconstTableinit = 1;
    }
    for (i = 0; constants[i].type; i++) {
      switch(constants[i].type) {
      case SWIG_TCL_POINTER:
        obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_TCL_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        SWIG_Tcl_SetConstantObj(interp, constants[i].name, obj);
      }
    }
  }
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

SWIGEXPORT int SWIG_init(Tcl_Interp *interp) {
  int i;
  if (interp == 0) return TCL_ERROR;
#ifdef USE_TCL_STUBS
  /* (char*) cast is required to avoid compiler warning/error for Tcl < 8.4. */
  if (Tcl_InitStubs(interp, (char*)SWIG_TCL_STUBS_VERSION, 0) == NULL) {
    return TCL_ERROR;
  }
#endif  
#ifdef USE_TK_STUBS
  /* (char*) cast is required to avoid compiler warning/error. */
  if (Tk_InitStubs(interp, (char*)SWIG_TCL_STUBS_VERSION, 0) == NULL) {
    return TCL_ERROR;
  }
#endif
  
  Tcl_PkgProvide(interp, (char*)SWIG_name, (char*)SWIG_version);
  
#ifdef SWIG_namespace
  Tcl_Eval(interp, "namespace eval " SWIG_namespace " { }");
#endif
  
  SWIG_InitializeModule((void *) interp);
  SWIG_PropagateClientData();
  
  for (i = 0; swig_commands[i].name; i++) {
    Tcl_CreateObjCommand(interp, (char *) swig_commands[i].name, (swig_wrapper_func) swig_commands[i].wrapper,
      swig_commands[i].clientdata, NULL);
  }
  for (i = 0; swig_variables[i].name; i++) {
    Tcl_SetVar(interp, (char *) swig_variables[i].name, (char *) "", TCL_GLOBAL_ONLY);
    Tcl_TraceVar(interp, (char *) swig_variables[i].name, TCL_TRACE_READS | TCL_GLOBAL_ONLY, 
      (Tcl_VarTraceProc *) swig_variables[i].get, (ClientData) swig_variables[i].addr);
    Tcl_TraceVar(interp, (char *) swig_variables[i].name, TCL_TRACE_WRITES | TCL_GLOBAL_ONLY, 
      (Tcl_VarTraceProc *) swig_variables[i].set, (ClientData) swig_variables[i].addr);
  }
  
  SWIG_Tcl_InstallConstants(interp, swig_constants);
  
  
  return TCL_OK;
}
SWIGEXPORT int Sal_hexapod_SafeInit(Tcl_Interp *interp) {
  return SWIG_init(interp);
}

