
/*
 * This file contains the implementation for the 'SALDataPublisher' executable.
 *
 ***/

// Control optional compilation 
#define USE_SAL_WRAPPER

#include <string>
#include <sstream>
#include <iostream>
#include "SAL_SALData.h"
#include "ccpp_sal_SALData.h"
#include "os.h"

#include "example_main.h"

using namespace DDS;
using namespace SALData;

/* entry point exported and demangled so symbol can be found in shared library */
extern "C"
{
  OS_API_EXPORT
  int SALDataPublisher(int argc, char *argv[]);
}

int SALTelemetryPublisher(char *topic_name)
{
  os_time delay_1s = { 1, 0 };
  SAL_SALData mgr;

  // Publish Events
  //create Topic
#ifdef SAL_SUBSYSTEM_ID_IS_KEYED
  salUINT SALDataID = 1;
  mgr.salInitialize(SALDataID);
#else
  mgr.salInitialize();
#endif

  mgr.salTelemetryPub(topic_name);
  SALTopic theTopicInstance; /* Example on Stack */
  theTopicInstance.private_revCode = DDS::string_dup("LSST TEST REVCODE");
  while (1) {
    mgr.putSample(theTopicInstance);
    os_nanoSleep(delay_1s);
  }

  /* Remove the DataWriters etc */
  mgr.salShutdown();

  return 0;
}


int OSPL_MAIN (int argc, char *argv[])
{
  return SALTelemetryPublisher ("SALNAMESTRING");
}


